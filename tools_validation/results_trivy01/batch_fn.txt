
Report Summary

┌────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                       Target                       │    Type    │ Misconfigurations │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace969.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace_Deployment_Service.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace_Deployment_Service_1.yaml                │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace_Deployment_Service_2.yaml                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace_ServiceAccount_ClusterRoleBinding.yaml   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace_ServiceAccount_ClusterRoleBinding_1.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace_ServiceAccount_ClusterRoleBinding_2.yaml │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespace_creation.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespaces_11.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespaces_12.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Namespaces_21.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nano_server_image.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Nano_server_image_1.yaml                           │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ name_with_dot.yaml                                 │ kubernetes │        16         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace818.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace819.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace82.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace820.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace821.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace822.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace823.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace824.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace825.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace826.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace827.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace828.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace829.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace83.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace831.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace832.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace833.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace834.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace835.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace836.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace837.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace838.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace839.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace84.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace840.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace841.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace842.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace843.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace844.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace845.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace845_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace846.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace847.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace848.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace849.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace85.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace851.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace853.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace854.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace855.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace856.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace857.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace858.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace859.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace86.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace860.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace861.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace862.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace863.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace864.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace865.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace866.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace867.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace868.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace869.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace87.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace870.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace871.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace872.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace873.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace874.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace875.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace876.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace877.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace878.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace879.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace88.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace880.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace881.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace882.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace883.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace884.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace885.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace886.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace887.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace888.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace889.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace89.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace890.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace891.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace892.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace893.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace894.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace895.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace896.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace897.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace898.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace899.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace9.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace90.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace900.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace901.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace902.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace903.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace904.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace905.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace906.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace907.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace908.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace909.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace91.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace910.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace911.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace912.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace913.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace914.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace915.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace916.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace917.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace918.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace919.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace92.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace920.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace921.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace922.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace923.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace924.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace925.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace926.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace927.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace928.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace929.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace929_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace93.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace930.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace931.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace932.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace933.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace934.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace935.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace936.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace937.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace938.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace939.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace94.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace940.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace941.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace942.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace943.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace944.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace945.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace946.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace947.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace948.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace949.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace95.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace951.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace952.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace954.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace955.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace956.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace957.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace958.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace959.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace96.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace960.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace961.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace962.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace963.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace964.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace965.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace966.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace966_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace967.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace967_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace968.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace968_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace97.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace970.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace971.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace972.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace973.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace974.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace975.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace976.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace977.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace978.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace979.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace98.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace980.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace981.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace982.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace983.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace984.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace985.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace986.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace987.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace988.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace989.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace99.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace990.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace991.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace992.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace993.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace994.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace995.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace996.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace997.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace998.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace999.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaceAndSecret.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaceAndSecret_1.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_cloudnative_postgresql.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_cloudnative_postgresql1.yaml             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_create.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_kured.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_kured1.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_limitrange.yaml                          │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_resourcequota.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_scoped.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_scoped_1.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_scoped_2.yaml                            │ kubernetes │         3         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_scoped_3.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_scoped_4.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_selector_patch.yaml                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_velero.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_velero1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_with_quota.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_with_quota_1.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespace_with_quota_2.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaceconfig_editor_role.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaceconfig_viewer_role.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource.yaml                           │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource1.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource10.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource11.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource12.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource13.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource14.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource15.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource16.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource17.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource18.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource19.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource2.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource20.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource21.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource22.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource23.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource26.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource27.yaml                         │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource28.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource29.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource3.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource30.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource31.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource32.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource33.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource34.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource35.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource36.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource37.yaml                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource4.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource5.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource6.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource7.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource8.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaced-resource9.yaml                          │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.ambient.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.ambient_1.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.ambient_2.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.ambient_3.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.ambient_4.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.sidecar.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.sidecar_1.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.sidecar_2.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.sidecar_3.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces12.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces12_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces12_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces13.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces13_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces13_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces14.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces14_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces15.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces17.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces18.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces18_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces19.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces19_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces19_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces19_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces19_4.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces19_5.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces19_6.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_10.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_11.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_5.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_6.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_7.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_8.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces1_9.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces20.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces22.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces22_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces22_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces24.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces25.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces25_1.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces25_2.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces25_3.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces25_4.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces26.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces26_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces27.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces27_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces28.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces28_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces29.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces29_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces31.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces32.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces32_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces33.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces33_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces34.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces34_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces35.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces35_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces36.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces36_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces36_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces37.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces38.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces38_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces38_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces39.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces4.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces40.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces40_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces41.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces41_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces42.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces42_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces43.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces43_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces43_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces43_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces43_4.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces43_5.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces44.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces45.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces45_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces45_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces46.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces46_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces46_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces47.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces47_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces47_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces48.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces48_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces49.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces49_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces4_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces4_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces5.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces51.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces51_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces5_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces5_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces6.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces6_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces7.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces8.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces8_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces8_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces8_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces8_4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_10.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_11.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_5.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_6.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_7.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_8.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces9_9.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namespaces_4.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ namspace.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nao-permitir-nada-externo.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ napix-service.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ napix-service_1.yaml                               │ kubernetes │        17         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ napix-service_2.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nat-k8s.yaml                                       │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nat-k8s_1.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ native-sidecar.yaml                                │ kubernetes │        37         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-cluster.yaml                                  │ kubernetes │        22         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-cluster_1.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl.yaml                                     │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl1.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl10.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl10_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl11.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl11_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl12.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl12_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl13.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl13_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl14.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl14_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl15.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl15_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl16.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl16_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl17.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl17_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl18.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl18_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl19.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl19_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl1_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl2.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl20.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl20_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl21.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl21_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl22.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl22_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl23.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl23_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl2_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl3.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl3_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl4.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl4_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl5.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl5_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl6.yaml                                    │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl6_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl7.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl7_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl8.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl8_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl9.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl9_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-depl_1.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-deployments.yaml                              │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-deployments_1.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-v1.0.0.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-v1.0.01.yaml                                  │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-v1.0.02.yaml                                  │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats-v1.0.03.yaml                                  │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats1.yaml                                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats1_1.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats3.yaml                                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats3_1.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats9.yaml                                         │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats9_1.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_1.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset1_1.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset1_2.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset1_3.yaml                           │ kubernetes │         8         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset_1.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset_2.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nats_statefulset_3.yaml                            │ kubernetes │         8         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ naveen_role.yaml                                   │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ navidrome3.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ navidrome3_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nbody-pod.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nbody-pod_1.yaml                                   │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nc-deployment.yaml                                 │ kubernetes │        22         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nc-deployment1.yaml                                │ kubernetes │        22         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nc-svc.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nc-svc1.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ncat-pod.yaml                                      │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neb-new-job.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ needed.yaml                                        │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neel.yaml                                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neel_1.yaml                                        │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neel_2.yaml                                        │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neel_3.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neel_4.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neg.yaml                                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemaspace.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-deployment.yaml                               │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-rbac.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-rbac_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-role-binding.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-role.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-service-account-secret.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-service-account.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nemo-service.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neon-builder-namespace.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neoncode-patch.yaml                                │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ neptune-10ab.yaml                                  │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nest-deployment-test.yaml                          │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nest-deployment.yaml                               │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nest-service.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nestedinputs.golden.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ net-networkpolicy.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ net-policy.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netapi-deployment-v1.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netapi-deployment-v2.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netapi-service-v1.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netapi-service-v2.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-configmap.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-configmap1.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-configmap2.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-deploy.yaml                                 │ kubernetes │        16         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-deploy_1.yaml                               │ kubernetes │        16         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-deploy_2.yaml                               │ kubernetes │        16         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-ingress.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-ingress1.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-ingress1_3.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-ingress2.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-ingress_3.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-media-pvc.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-media-pvc1.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-namespace.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-namespace1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-namespace2.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-postgres-deploy.yaml                        │ kubernetes │        14         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-pvc.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-pvc_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-pvc_2.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-pvc_3.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-pvc_4.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-pvc_5.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-redis-deploy.yaml                           │ kubernetes │        15         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-redis-deploy_1.yaml                         │ kubernetes │        15         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-service.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-service1.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-service2.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-service2_1.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-service2_2.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netbox-service2_3.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netcat-deployment-nomaster.yaml                    │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netcat-deployment.yaml                             │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netcat-deployment_1.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc.yaml                                     │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc1.yaml                                    │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc10.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc11.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc13.yaml                                   │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc14.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc15.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc16.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc17.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc18.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc2.yaml                                    │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc3.yaml                                    │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc4.yaml                                    │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc5.yaml                                    │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc6.yaml                                    │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc7.yaml                                    │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc8.yaml                                    │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecrc9.yaml                                    │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc1.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc10.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc11.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc13.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc14.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc15.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc16.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc17.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc18.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc2.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc3.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc4.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc5.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc6.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc7.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc8.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netexecsvc9.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netflix-deployment.yaml                            │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netflix-deployment_1.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netflix_service.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netns-volume.yaml                                  │ kubernetes │        24         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netperf-deployment.yaml                            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netperf-deployment_1.yaml                          │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netperf-deployment_2.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netperf.yaml                                       │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netperf_1.yaml                                     │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-1.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-11.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-2.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-21.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-3.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-4.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-5.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-6.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-bad.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-bad1.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-bad2.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-bad3.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-bad4.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-cart-access.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-cart-access1.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-cart-db-access.yaml                         │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-cart-db-access1.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-catalogue-access.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-catalogue-access1.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-catalogue-db-access.yaml                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-catalogue-db-access1.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-cortex-access.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-cortex-access1.yaml                         │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default-deny.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default-deny1.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default_1.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default_2.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default_3.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default_4.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-default_5.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-deny-all-ingress-and-egress.yaml            │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-egr.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-egress.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-fail.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-frontend-access.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-frontend-access1.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good1_1.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good1_2.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good2.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good2_1.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good2_2.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good3.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good3_1.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good3_2.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good4.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good4_1.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good4_2.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good_1.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-good_2.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-ing.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-namespace-selector.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-orders-access.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-orders-access1.yaml                         │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-orders-db-access.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-orders-db-access1.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-payment-access.yaml                         │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-payment-access1.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-rabbitmq-access.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-rabbitmq-access1.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-shipping-access.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-shipping-access1.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-user-access.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-user-access1.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-user-db-access.yaml                         │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-user-db-access1.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol-work.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol1.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol10.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol10_1.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol10_2.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol10_3.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol11.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol12.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol12_1.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol12_2.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol12_3.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol13.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol14.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol14_1.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol14_2.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol14_3.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol15.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol16.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol16_1.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol16_2.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol16_3.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol1_1.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol1_2.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol2.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol25.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol2_1.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol2_2.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol3.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol7.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol8.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol8_1.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol8_2.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol8_3.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol9.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol_1.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpol_2.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy1.yaml                                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy1_1.yaml                                  │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy1_2.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy1_3.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy_1.yaml                                   │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy_2.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpolicy_3.yaml                                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpols.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpols_1.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpols_2.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netpols_3.yaml                                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netshoot-deployment.yaml                           │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netshoot.yaml                                      │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netshoot1.yaml                                     │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netshoot2.yaml                                     │ kubernetes │        17         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netshoot3.yaml                                     │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ netshoot4.yaml                                     │ kubernetes │        22         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nettool.yaml                                       │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ nettool1.yaml                                      │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-jsplayground.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-jsplayground_1.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-multitool.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-multitool1.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-multitool1_1.yaml                          │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-multitool_1.yaml                           │ kubernetes │        21         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-observability-svc.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-observability-svc1.yaml                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies.deployment.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies.deployment_1.yaml                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies.deployment_2.yaml                 │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies1.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies2.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies2_1.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies2_2.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policies3.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice1.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice2.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice3.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice4.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice5.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice6.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice7.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-adservice8.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-allow-all-ingress.yaml              │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-allows-labels.yaml                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cart.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cart1.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice.yaml                    │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice1.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice2.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice3.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice4.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice5.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice6.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice7.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cartservice8.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice.yaml                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice1.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice2.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice3.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice4.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice5.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice6.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice7.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-checkoutservice8.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cidr.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-cidr1.yaml                          │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice.yaml                │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice1.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice2.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice3.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice4.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice5.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice6.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice7.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-currencyservice8.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-default-deny.yaml                   │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-default-deny1.yaml                  │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-definition.yaml                     │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all1.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all2.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all3.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all4.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all5.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all6.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ network-policy-deny-all7.yaml                      │ kubernetes │         2         │
└────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Namespace_Deployment_Service_1.yaml (kubernetes)
================================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'web-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'web-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'web-server' in 'web' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'web-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'web-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'web-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'web-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd' of Deployment 'web-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd' of Deployment 'web-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'web-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'web-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:7-19
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: web
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: web
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:7-19
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: web
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: web
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "web-server" in "web" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment web-server in web namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-server in web namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web-server in web namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Namespace_Deployment_Service_1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: httpd
  17 │         image: httpd:2.4.48-alpine3.14
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



Namespace_Deployment_Service_2.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 Namespace_Deployment_Service_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: web
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 80
  12 │     targetPort: 80
  13 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Namespace_Deployment_Service_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: web
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 80
  12 │     targetPort: 80
  13 └   type: LoadBalancer
────────────────────────────────────────



Namespace_ServiceAccount_ClusterRoleBinding_2.yaml (kubernetes)
===============================================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'dev' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 Namespace_ServiceAccount_ClusterRoleBinding_2.yaml:4
────────────────────────────────────────
   4 [   name: dev
────────────────────────────────────────



Namespaces_12.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 Namespaces_12.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Namespaces_12.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



Nano_server_image.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 Nano_server_image.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     targetPort: 80
  11 │   selector:
  12 │     app: win-webserver
  13 └   type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Nano_server_image.yaml:8-13
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     targetPort: 80
  11 │   selector:
  12 │     app: win-webserver
  13 └   type: NodePort
────────────────────────────────────────



Nano_server_image_1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'windowswebserver' of Deployment 'win-webserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'windowswebserver' of Deployment 'win-webserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'windowswebserver' of 'deployment' 'win-webserver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'windowswebserver' of Deployment 'win-webserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'windowswebserver' of Deployment 'win-webserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'windowswebserver' of Deployment 'win-webserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'windowswebserver' of Deployment 'win-webserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'windowswebserver' of Deployment 'win-webserver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'windowswebserver' of Deployment 'win-webserver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'windowswebserver' of Deployment 'win-webserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'windowswebserver' of Deployment 'win-webserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 Nano_server_image_1.yaml:8-41
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: win-webserver
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: win-webserver
  16 └       name: win-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Nano_server_image_1.yaml:8-41
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: win-webserver
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: win-webserver
  16 └       name: win-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "windowswebserver" of deployment "win-webserver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment win-webserver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Nano_server_image_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: win-webserver
   6 └   name: win-webserver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container win-webserver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment win-webserver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Nano_server_image_1.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 │         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
  25 │           = New-Object System.Net.HttpListener ; $$listener.Prefixes.Add(''http://*:80/'')
  26 └           ; $$listener.Start() ; $$callerCounts = @{} ; Write-Host(''Listening at
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container windowswebserver in deployment win-webserver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Nano_server_image_1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: windowswebserver
  20 │         image: mcr.microsoft.com/windows/servercore:ltsc2019
  21 │         command:
  22 │         - powershell.exe
  23 │         - -command
  24 └         - '<#code used from https://gist.github.com/19WAS85/5424431#> ; $$listener
────────────────────────────────────────



name_with_dot.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx.pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx.pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx.pod' in 'frontend' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx.pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx.pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx.pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx.pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx.pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx.pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 name_with_dot.yaml:7-13
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 name_with_dot.yaml:7-13
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx.pod" in "frontend" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx.pod in frontend namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 name_with_dot.yaml:8-13
────────────────────────────────────────
   8 ┌     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx.pod in frontend namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 name_with_dot.yaml:7-13
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: nginx
   9 │       image: nginx:1.14-alpine
  10 │       resources:
  11 │         limits:
  12 │           memory: 20Mi
  13 └           cpu: 0.2
────────────────────────────────────────



namespace952.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace952.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace952.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



namespace_limitrange.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace_limitrange.yaml:6-15
────────────────────────────────────────
   6 ┌   limits:
   7 │   - default: 
   8 │       cpu: 500m
   9 │     defaultRequest: 
  10 │       cpu: 500m
  11 │     max: 
  12 │       cpu: "1"
  13 │     min:
  14 │       cpu: 100m
  15 └     type: Container
────────────────────────────────────────



namespace_resourcequota.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace_resourcequota.yaml:6-14
────────────────────────────────────────
   6 ┌   hard:
   7 │     cpu: "1000"
   8 │     memory: 200Gi
   9 │     pods: "10"
  10 │   scopeSelector:
  11 │     matchExpressions:
  12 │     - operator : In
  13 │       scopeName: PriorityClass
  14 └       values: ["high"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace_resourcequota.yaml:7-9
────────────────────────────────────────
   7 ┌     cpu: "1000"
   8 │     memory: 200Gi
   9 └     pods: "10"
────────────────────────────────────────



namespace_scoped_2.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 2)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 namespace_scoped_2.yaml:15-21
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - batch
  17 │   resources:
  18 │   - jobs
  19 │   - cronjobs
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'test-account' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 namespace_scoped_2.yaml:15-21
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - batch
  17 │   resources:
  18 │   - jobs
  19 │   - cronjobs
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'test-account' shouldn't manage all resources at the namespace 'acme'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 namespace_scoped_2.yaml:7-14
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   - extensions
  10 │   - apps
  11 │   resources:
  12 │   - '*'
  13 │   verbs:
  14 └   - '*'
────────────────────────────────────────



namespace_with_quota.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace_with_quota.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace_with_quota.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



namespace_with_quota_1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace_with_quota_1.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace_with_quota_1.yaml:5
────────────────────────────────────────
   5 [ spec: {}
────────────────────────────────────────



namespace_with_quota_2.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespace_with_quota_2.yaml:7-9
────────────────────────────────────────
   7 ┌   hard:
   8 │     requests.memory: 1G
   9 └     limits.memory: 1G
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespace_with_quota_2.yaml:8-9
────────────────────────────────────────
   8 ┌     requests.memory: 1G
   9 └     limits.memory: 1G
────────────────────────────────────────



namespaced-resource.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource1.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource1.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource1.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource10.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource10.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource10.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource10.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────



namespaced-resource11.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource11.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource11.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource11.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────



namespaced-resource12.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource12.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource12.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource12.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource13.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource13.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource13.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource13.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource14.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource14.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource14.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource14.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource15.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource15.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource15.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource15.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource16.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource16.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource16.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource16.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────



namespaced-resource17.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource17.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource17.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource17.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource17.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────



namespaced-resource18.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource18.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource18.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource18.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────



namespaced-resource19.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource19.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource19.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource19.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.7
────────────────────────────────────────



namespaced-resource2.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource2.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource2.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource2.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────



namespaced-resource20.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource20.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource20.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource20.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource21.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource21.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource21.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource21.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource22.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource22.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource22.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource22.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource23.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource23.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource23.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource23.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource23.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource26.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource26.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource26.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource26.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource26.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────



namespaced-resource27.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource27.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource27.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource27.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.4.1
────────────────────────────────────────



namespaced-resource28.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource28.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource28.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource28.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource29.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource29.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource29.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource29.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource3.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource3.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource3.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource3.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────



namespaced-resource30.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource30.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource30.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource30.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource30.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource31.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource31.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource31.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource31.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource31.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource32.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource32.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource32.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource32.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource32.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────



namespaced-resource33.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource33.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource33.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource33.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource33.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────



namespaced-resource34.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource34.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource34.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource34.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource34.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────



namespaced-resource35.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource35.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource35.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource35.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource35.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────



namespaced-resource36.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource36.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource36.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource36.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource36.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────



namespaced-resource37.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource37.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource37.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource37.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource37.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.10
────────────────────────────────────────



namespaced-resource4.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource4.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource4.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource4.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource5.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource5.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource5.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource5.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.9
────────────────────────────────────────



namespaced-resource6.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource6.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource6.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource6.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────



namespaced-resource7.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource7.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource7.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource7.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mock-container in replicationcontroller namespaced-rc (namespace: existing-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 namespaced-resource7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: registry.k8s.io/pause:3.8
────────────────────────────────────────



namespaced-resource8.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource8.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource8.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource8.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────



namespaced-resource9.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mock-container' of 'replicationcontroller' 'namespaced-rc' in 'existing-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mock-container' of ReplicationController 'namespaced-rc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaced-resource9.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaced-resource9.yaml:7-17
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     app: mock
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: mock
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mock-container" of replicationcontroller "namespaced-rc" in "existing-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container namespaced-rc in existing-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller namespaced-rc in existing-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 namespaced-resource9.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mock-container
  17 └         image: k8s.gcr.io/pause:3.1
────────────────────────────────────────



namespaces25.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaces25.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaces25.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────



namespaces25_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaces25_1.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaces25_1.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────



namespaces25_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaces25_2.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaces25_2.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────



namespaces25_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaces25_3.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaces25_3.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────



namespaces25_4.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namespaces25_4.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namespaces25_4.yaml:7
────────────────────────────────────────
   7 [ spec: {}
────────────────────────────────────────



namspace.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 namspace.yaml:6
────────────────────────────────────────
   6 [ spec: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 namspace.yaml:6
────────────────────────────────────────
   6 [ spec: {}
────────────────────────────────────────



nao-permitir-nada-externo.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nao-permitir-nada-externo.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 └           kubernetes.io/metadata.name: giropops
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nao-permitir-nada-externo.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 └           kubernetes.io/metadata.name: giropops
────────────────────────────────────────



napix-service_1.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 100, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 8, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'napix-app' of Deployment 'psa-napix-server-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'napix-app' of Deployment 'psa-napix-server-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'napix-app' of 'deployment' 'psa-napix-server-app' in 'cctns-new' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'napix-app' of Deployment 'psa-napix-server-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'napix-app' of Deployment 'psa-napix-server-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'napix-app' of Deployment 'psa-napix-server-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'napix-app' of Deployment 'psa-napix-server-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'napix-app' of Deployment 'psa-napix-server-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'psa-napix-server-app' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 napix-service_1.yaml:9-87
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: napix-app
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: napix-app
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 napix-service_1.yaml:9-87
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: napix-app
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: napix-app
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 napix-service_1.yaml:9-87
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: napix-app
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: napix-app
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "napix-app" of deployment "psa-napix-server-app" in "cctns-new" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container psa-napix-server-app in cctns-new namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment psa-napix-server-app in cctns-new namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 napix-service_1.yaml:18-87
────────────────────────────────────────
  18 ┌       containers:
  19 │       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container napix-app in deployment psa-napix-server-app (namespace: cctns-new) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 napix-service_1.yaml:19-68
────────────────────────────────────────
  19 ┌       - env:
  20 │         - name: CONFIG_SERVER_ADDRESS
  21 │           valueFrom:
  22 │             configMapKeyRef:
  23 │               key: config_server_address
  24 │               name: psa-config-cm
  25 │         - name: NAPIX_SERVER_ADDRESS
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────



napix-service_2.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 napix-service_2.yaml:7-15
────────────────────────────────────────
   7 ┌   ports:
   8 │   - name: http
   9 │     nodePort: 31013
  10 │     port: 8086
  11 │     protocol: TCP
  12 │     targetPort: 8086
  13 │   selector:
  14 │     app: napix-app
  15 └   type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 napix-service_2.yaml:7-15
────────────────────────────────────────
   7 ┌   ports:
   8 │   - name: http
   9 │     nodePort: 31013
  10 │     port: 8086
  11 │     protocol: TCP
  12 │     targetPort: 8086
  13 │   selector:
  14 │     app: napix-app
  15 └   type: NodePort
────────────────────────────────────────



nat-k8s.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nats' of Deployment 'nats-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nat-k8s.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nat-k8s.yaml:6-30
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nat-k8s.yaml:4
────────────────────────────────────────
   4 [   name: nats-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nat-k8s.yaml:16-30
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 │         - 5s
  24 └         - -hbt
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nat-k8s.yaml:15-30
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         imagePullPolicy: IfNotPresent
  18 │         image: nats-streaming:latest
  19 │         args:
  20 │         - -p
  21 │         - '4222'
  22 │         - -hbi
  23 └         - 5s
  ..   
────────────────────────────────────────



nat-k8s_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nat-k8s_1.yaml:6-13
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nat-k8s_1.yaml:6-13
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 └   type: LoadBalancer
────────────────────────────────────────



native-sidecar.yaml (kubernetes)
================================
Tests: 133 (SUCCESSES: 96, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 23, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello' of Pod 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'other-sidecar' of Pod 'hello' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello' of Pod 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'other-sidecar' of Pod 'hello' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello' of 'pod' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'other-sidecar' of 'pod' 'hello' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello' of Pod 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'other-sidecar' of Pod 'hello' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello' of Pod 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'other-sidecar' of Pod 'hello' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello' of Pod 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'other-sidecar' of Pod 'hello' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello' of Pod 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'other-sidecar' of Pod 'hello' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello' of Pod 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'other-sidecar' of Pod 'hello' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello' of Pod 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'other-sidecar' of Pod 'hello' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello' of Pod 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'other-sidecar' of Pod 'hello' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello' of Pod 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'other-sidecar' of Pod 'hello' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 native-sidecar.yaml:6-21
────────────────────────────────────────
   6 ┌   initContainers:
   7 │     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 └         - name: http
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 native-sidecar.yaml:6-21
────────────────────────────────────────
   6 ┌   initContainers:
   7 │     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 └         - name: http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello" of pod "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "other-sidecar" of pod "hello" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 native-sidecar.yaml:4
────────────────────────────────────────
   4 [   name: hello
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hello in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 native-sidecar.yaml:6-21
────────────────────────────────────────
   6 ┌   initContainers:
   7 │     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 └         - name: http
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello in pod hello (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 native-sidecar.yaml:17-21
────────────────────────────────────────
  17 ┌     - name: hello
  18 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  19 │       ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container other-sidecar in pod hello (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 native-sidecar.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: other-sidecar
   8 │       restartPolicy: Always
   9 │       readinessProbe:
  10 │         httpGet:
  11 │           port: 3333
  12 │       image: "fake.docker.io/google-samples/hello-go-gke:1.0"
  13 │       ports:
  14 │         - name: http
  15 └           containerPort: 80
────────────────────────────────────────



nats-cluster.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue' of StatefulSet 'queue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue' of StatefulSet 'queue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue' of 'statefulset' 'queue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'queue' of StatefulSet 'queue' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue' of StatefulSet 'queue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'queue' of StatefulSet 'queue' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue' of StatefulSet 'queue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'queue' of StatefulSet 'queue' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'queue' of StatefulSet 'queue' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'queue' of StatefulSet 'queue' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue' of StatefulSet 'queue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue' of StatefulSet 'queue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'queue' of StatefulSet 'queue' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-cluster.yaml:6-46
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: queue
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: queue
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-cluster.yaml:6-46
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: queue
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: queue
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue" of statefulset "queue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset queue in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-cluster.yaml:4
────────────────────────────────────────
   4 [   name: queue
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset queue in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-cluster.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 └         - name: p8222
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue in statefulset queue (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nats-cluster.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: queue
  17 │         image: docker.io/nats:latest
  18 │         args:
  19 │         - --debug
  20 │         - --http_port=8222
  21 │         - --js
  22 │         ports:
  23 │         - name: p8222
  24 └           containerPort: 8222
  ..   
────────────────────────────────────────



nats-cluster_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-cluster_1.yaml:6-18
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: queue
   8 │   ports:
   9 │   - name: '8222'
  10 │     port: 8222
  11 │     protocol: TCP
  12 │   - name: '6222'
  13 │     port: 6222
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-cluster_1.yaml:6-18
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: queue
   8 │   ports:
   9 │   - name: '8222'
  10 │     port: 8222
  11 │     protocol: TCP
  12 │   - name: '6222'
  13 │     port: 6222
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl1.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl1.yaml:6-29
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl1.yaml:6-29
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl1.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl1.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl1.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl10.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl10.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl10.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl10.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl10.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl10.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl10_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl10_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl10_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl11.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl11.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl11.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl11.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl11.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl11.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl11_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl11_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl11_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl12.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl12.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl12.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl12.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl12.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl12.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl12_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl12_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: nats
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl12_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: nats
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl13.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl13.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl13.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl13.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl13.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl13.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl13_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl13_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: nats
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl13_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: nats
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl14.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl14.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl14.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl14.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl14.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl14.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl14_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl14_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl14_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl15.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl15.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl15.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl15.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl15.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl15.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl15_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl15_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl15_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl16.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl16.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl16.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl16.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl16.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl16.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl16_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl16_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl16_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl17.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl17.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl17.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl17.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl17.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl17.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl17_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl17_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl17_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl18.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl18.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl18.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl18.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl18.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl18.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl18_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl18_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl18_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl19.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl19.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl19.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl19.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl19.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl19.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl19_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl19_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl19_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl1_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl1_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl1_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl2.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl2.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl2.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl2.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl2.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl2.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl20.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl20.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl20.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl20.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl20.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl20.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl20_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl20_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl20_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl21.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl21.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl21.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl21.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl21.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl21.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl21_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl21_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl21_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl22.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl22.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl22.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl22.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl22.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl22.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl22_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl22_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl22_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl23.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl23.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl23.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl23.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl23.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl23.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl23_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl23_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl23_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl2_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl2_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl2_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl3.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl3.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl3.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl3.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl3.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl3.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl3_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl3_1.yaml:6-15
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - name: client
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 │     port: 8222
  15 └     targetPort: 8222
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl3_1.yaml:6-15
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - name: client
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 │     port: 8222
  15 └     targetPort: 8222
────────────────────────────────────────



nats-depl4.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl4.yaml:6-29
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl4.yaml:6-29
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl4.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl4.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl4.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.25.6
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl4_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl4_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl4_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl5.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl5.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl5.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl5.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl5.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl5.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.25
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl5_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl5_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl5_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl6.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl6.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl6.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl6.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl6.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl6.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl6_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl6_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl6_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl7.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl7.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl7.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl7.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl7.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl7.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.22.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl7_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl7_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl7_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl8.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl8.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl8.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl8.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl8.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl8.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl8_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl8_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl8_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl9.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl9.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl9.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-depl9.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-depl9.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats-depl9_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl9_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl9_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats-depl_1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-depl_1.yaml:6-15
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - name: client
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 │     port: 8222
  15 └     targetPort: 8222
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-depl_1.yaml:6-15
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - name: client
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 │     port: 8222
  15 └     targetPort: 8222
────────────────────────────────────────



nats-deployments.yaml (kubernetes)
==================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nats' of Deployment 'nats' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-deployments.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-deployments.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats-deployments.yaml:4
────────────────────────────────────────
   4 [   name: nats
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-deployments.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-deployments.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats:latest
  18 │         ports:
  19 └         - containerPort: 4222
────────────────────────────────────────



nats-deployments_1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-deployments_1.yaml:7-11
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - port: 4222
  11 └     targetPort: 4222
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-deployments_1.yaml:7-11
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - port: 4222
  11 └     targetPort: 4222
────────────────────────────────────────



nats-v1.0.0.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-trigger-controller' of 'deployment' 'nats-trigger-controller' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-v1.0.0.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-v1.0.0.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-trigger-controller" of deployment "nats-trigger-controller" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-trigger-controller in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-trigger-controller in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.0.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 └         - name: KUBELESS_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nats-trigger-controller in deployment nats-trigger-controller (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nats-v1.0.0.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────



nats-v1.0.01.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-trigger-controller' of 'deployment' 'nats-trigger-controller' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-v1.0.01.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-v1.0.01.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-trigger-controller" of deployment "nats-trigger-controller" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-trigger-controller in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-trigger-controller in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.01.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 └         - name: KUBELESS_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nats-trigger-controller in deployment nats-trigger-controller (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nats-v1.0.01.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────



nats-v1.0.02.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-trigger-controller' of 'deployment' 'nats-trigger-controller' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-v1.0.02.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-v1.0.02.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-trigger-controller" of deployment "nats-trigger-controller" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-trigger-controller in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-trigger-controller in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.02.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 └         - name: KUBELESS_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nats-trigger-controller in deployment nats-trigger-controller (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nats-v1.0.02.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────



nats-v1.0.03.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-trigger-controller' of 'deployment' 'nats-trigger-controller' in 'kubeless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-trigger-controller' of Deployment 'nats-trigger-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats-v1.0.03.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats-v1.0.03.yaml:9-30
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       kubeless: nats-trigger-controller
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         kubeless: nats-trigger-controller
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-trigger-controller" of deployment "nats-trigger-controller" in "kubeless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-trigger-controller in kubeless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-trigger-controller in kubeless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats-v1.0.03.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 └         - name: KUBELESS_CONFIG
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nats-trigger-controller in deployment nats-trigger-controller (namespace: kubeless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nats-v1.0.03.yaml:18-29
────────────────────────────────────────
  18 ┌       - env:
  19 │         - name: NATS_URL
  20 │           value: nats://message-queue.default.svc.cluster.local:4222
  21 │         - name: KUBELESS_NAMESPACE
  22 │           valueFrom:
  23 │             fieldRef:
  24 │               fieldPath: metadata.namespace
  25 │         - name: KUBELESS_CONFIG
  26 └           value: kubeless-config
  ..   
────────────────────────────────────────



nats.yaml (kubernetes)
======================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-streaming' of 'deployment' 'nats-streaming-dpl' in 'mymicroservices' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats.yaml:9-35
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nats-streaming
  13 │   template:
  14 │     metadata:
  15 │       name: nats-streaming
  16 │       labels:
  17 └         app: nats-streaming
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats.yaml:9-35
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nats-streaming
  13 │   template:
  14 │     metadata:
  15 │       name: nats-streaming
  16 │       labels:
  17 └         app: nats-streaming
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-streaming" of deployment "nats-streaming-dpl" in "mymicroservices" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-streaming-dpl in mymicroservices namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-streaming-dpl in mymicroservices namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats.yaml:19-35
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 └         - --tlscert=/certs/localhost.crt
  ..   
────────────────────────────────────────



nats1.yaml (kubernetes)
=======================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats-streaming' of 'deployment' 'nats-streaming-dpl' in 'mymicroservices' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats-streaming' of Deployment 'nats-streaming-dpl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats1.yaml:9-35
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nats-streaming
  13 │   template:
  14 │     metadata:
  15 │       name: nats-streaming
  16 │       labels:
  17 └         app: nats-streaming
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats1.yaml:9-35
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: nats-streaming
  13 │   template:
  14 │     metadata:
  15 │       name: nats-streaming
  16 │       labels:
  17 └         app: nats-streaming
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats-streaming" of deployment "nats-streaming-dpl" in "mymicroservices" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-streaming-dpl in mymicroservices namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats1.yaml:20-31
────────────────────────────────────────
  20 ┌       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 │         - --tlscert=/certs/localhost.crt
  28 └         - --tlskey=/certs/localhost.key
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-streaming-dpl in mymicroservices namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats1.yaml:19-35
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: nats-streaming
  21 │         image: nats
  22 │         args:
  23 │         - -m
  24 │         - '8222'
  25 │         - -js
  26 │         - --tls
  27 └         - --tlscert=/certs/localhost.crt
  ..   
────────────────────────────────────────



nats1_1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats1_1.yaml:9-19
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: nats-streaming
  11 │   ports:
  12 │   - name: client
  13 │     protocol: TCP
  14 │     port: 4222
  15 │     targetPort: 4222
  16 │   - name: monitoring
  17 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats1_1.yaml:9-19
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: nats-streaming
  11 │   ports:
  12 │   - name: client
  13 │     protocol: TCP
  14 │     port: 4222
  15 │     targetPort: 4222
  16 │   - name: monitoring
  17 └     protocol: TCP
  ..   
────────────────────────────────────────



nats3.yaml (kubernetes)
=======================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'ticketing-nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'ticketing-nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'ticketing-nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats3.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: ticketing-nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: ticketing-nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats3.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: ticketing-nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: ticketing-nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "ticketing-nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ticketing-nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats3.yaml:4
────────────────────────────────────────
   4 [   name: ticketing-nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ticketing-nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats3.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 │         - '4222'
  24 └         - -DV
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ticketing-nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats3.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats:alpine
  18 │         args:
  19 │         - -js
  20 │         - -m
  21 │         - '8222'
  22 │         - -p
  23 └         - '4222'
  ..   
────────────────────────────────────────



nats3_1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats3_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: ticketing-nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats3_1.yaml:6-16
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: ticketing-nats
   8 │   ports:
   9 │   - name: client
  10 │     protocol: TCP
  11 │     port: 4222
  12 │     targetPort: 4222
  13 │   - name: monitoring
  14 └     protocol: TCP
  ..   
────────────────────────────────────────



nats9.yaml (kubernetes)
=======================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nats' of Deployment 'nats-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nats' of 'deployment' 'nats-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nats' of Deployment 'nats-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats9.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats9.yaml:6-31
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nats
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nats
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nats" of deployment "nats-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nats-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats9.yaml:4
────────────────────────────────────────
   4 [   name: nats-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nats-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats9.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 │         - -hbi
  24 └         - 5s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nats-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nats9.yaml:15-31
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nats
  17 │         image: nats-streaming:0.17.0
  18 │         args:
  19 │         - -p
  20 │         - '4222'
  21 │         - -m
  22 │         - '8222'
  23 └         - -hbi
  ..   
────────────────────────────────────────



nats9_1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats9_1.yaml:6-17
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - name: client
  11 │     protocol: TCP
  12 │     port: 4222
  13 │     targetPort: 4222
  14 └   - name: monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats9_1.yaml:6-17
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nats
   9 │   ports:
  10 │   - name: client
  11 │     protocol: TCP
  12 │     port: 4222
  13 │     targetPort: 4222
  14 └   - name: monitoring
  ..   
────────────────────────────────────────



nats_1.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats_1.yaml:9-19
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: nats-streaming
  11 │   ports:
  12 │   - name: client
  13 │     protocol: TCP
  14 │     port: 4222
  15 │     targetPort: 4222
  16 │   - name: monitoring
  17 └     protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats_1.yaml:9-19
────────────────────────────────────────
   9 ┌   selector:
  10 │     app: nats-streaming
  11 │   ports:
  12 │   - name: client
  13 │     protocol: TCP
  14 │     port: 4222
  15 │     targetPort: 4222
  16 │   - name: monitoring
  17 └     protocol: TCP
  ..   
────────────────────────────────────────



nats_statefulset1_1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats_statefulset1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   ports:
  11 │   - name: client
  12 └     port: 4222
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats_statefulset1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   ports:
  11 │   - name: client
  12 └     port: 4222
────────────────────────────────────────



nats_statefulset1_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats_statefulset1_2.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   clusterIP: None
  11 │   ports:
  12 │   - name: cluster
  13 │     port: 6222
  14 │   - name: monitor
  15 │     port: 8222
  16 └   - name: metrics
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats_statefulset1_2.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   clusterIP: None
  11 │   ports:
  12 │   - name: cluster
  13 │     port: 6222
  14 │   - name: monitor
  15 │     port: 8222
  16 └   - name: metrics
  ..   
────────────────────────────────────────



nats_statefulset1_3.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 108, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats_statefulset1_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats_statefulset1_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats_statefulset1_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats_statefulset1_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats_statefulset1_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats_statefulset1_3.yaml:8-115
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: pl-nats
  11 │   replicas: 1
  12 │   serviceName: pl-nats
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         name: pl-nats
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats_statefulset1_3.yaml:8-115
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: pl-nats
  11 │   replicas: 1
  12 │   serviceName: pl-nats
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         name: pl-nats
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset pl-nats in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats_statefulset1_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pl-nats
   5 │   labels:
   6 └     name: pl-nats
────────────────────────────────────────



nats_statefulset_1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats_statefulset_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   ports:
  11 │   - name: client
  12 └     port: 4222
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats_statefulset_1.yaml:8-12
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   ports:
  11 │   - name: client
  12 └     port: 4222
────────────────────────────────────────



nats_statefulset_2.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats_statefulset_2.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   clusterIP: None
  11 │   ports:
  12 │   - name: cluster
  13 │     port: 6222
  14 │   - name: monitor
  15 │     port: 8222
  16 └   - name: metrics
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats_statefulset_2.yaml:8-21
────────────────────────────────────────
   8 ┌   selector:
   9 │     name: pl-nats
  10 │   clusterIP: None
  11 │   ports:
  12 │   - name: cluster
  13 │     port: 6222
  14 │   - name: monitor
  15 │     port: 8222
  16 └   - name: metrics
  ..   
────────────────────────────────────────



nats_statefulset_3.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 108, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nats_statefulset_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nats_statefulset_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nats_statefulset_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nats_statefulset_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pl-nats' of StatefulSet 'pl-nats' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nats_statefulset_3.yaml:31-91
────────────────────────────────────────
  31 ┌       - name: pl-nats
  32 │         image: gcr.io/pixie-oss/pixie-prod/vizier-deps/nats:2.9.19-scratch@sha256:5de59286eb54ead4d4a9279846098d4097b9c17a3c0588182398a7250cde1af9
  33 │         ports:
  34 │         - containerPort: 4222
  35 │           name: client
  36 │         - containerPort: 7422
  37 │           name: leafnodes
  38 │         - containerPort: 6222
  39 └           name: cluster
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nats_statefulset_3.yaml:8-115
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: pl-nats
  11 │   replicas: 1
  12 │   serviceName: pl-nats
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         name: pl-nats
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nats_statefulset_3.yaml:8-115
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       name: pl-nats
  11 │   replicas: 1
  12 │   serviceName: pl-nats
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 └         name: pl-nats
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset pl-nats in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nats_statefulset_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pl-nats
   5 │   labels:
   6 └     name: pl-nats
────────────────────────────────────────



naveen_role.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'pod-access-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 naveen_role.yaml:9-11
────────────────────────────────────────
   9 ┌ - apiGroups: [""]
  10 │   resources: ["pods"]
  11 └   verbs: ["get", "list", "watch", "create", "update", "delete"]  # Adjust verbs as per your requirements
────────────────────────────────────────



navidrome3.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'navidrome' of Deployment 'navidrome' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'navidrome' of Deployment 'navidrome' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'navidrome' of 'deployment' 'navidrome' in 'navidrome' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'navidrome' of Deployment 'navidrome' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'navidrome' of Deployment 'navidrome' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'navidrome' of Deployment 'navidrome' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'navidrome' of Deployment 'navidrome' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'navidrome' of Deployment 'navidrome' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'navidrome' of Deployment 'navidrome' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'navidrome' of Deployment 'navidrome' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'navidrome' of Deployment 'navidrome' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'navidrome' of Deployment 'navidrome' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 navidrome3.yaml:7-72
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: navidrome
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: navidrome
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 navidrome3.yaml:7-72
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: navidrome
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: navidrome
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "navidrome" of deployment "navidrome" in "navidrome" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment navidrome in navidrome namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 navidrome3.yaml:16-72
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 └         - name: ND_LOGLEVEL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container navidrome in deployment navidrome (namespace: navidrome) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 navidrome3.yaml:17-65
────────────────────────────────────────
  17 ┌       - name: navidrome
  18 │         image: deluan/navidrome:latest
  19 │         ports:
  20 │         - containerPort: 4533
  21 │         env:
  22 │         - name: ND_SCANSCHEDULE
  23 │           value: 1h
  24 │         - name: ND_LOGLEVEL
  25 └           value: info
  ..   
────────────────────────────────────────



navidrome3_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 navidrome3_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: navidrome
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 4533
  12 └     targetPort: 4533
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 navidrome3_1.yaml:7-12
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: navidrome
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 4533
  12 └     targetPort: 4533
────────────────────────────────────────



nbody-pod_1.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cuda-container' of 'pod' 'nbody-gpu-benchmark' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cuda-container' of Pod 'nbody-gpu-benchmark' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nbody-pod_1.yaml:7-23
────────────────────────────────────────
   7 ┌   restartPolicy: OnFailure
   8 │   runtimeClassName: nvidia
   9 │   containers:
  10 │   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 └     - -benchmark
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nbody-pod_1.yaml:7-23
────────────────────────────────────────
   7 ┌   restartPolicy: OnFailure
   8 │   runtimeClassName: nvidia
   9 │   containers:
  10 │   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 └     - -benchmark
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cuda-container" of pod "nbody-gpu-benchmark" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nbody-gpu-benchmark in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nbody-pod_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: nbody-gpu-benchmark
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nbody-gpu-benchmark in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nbody-gpu-benchmark in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nbody-pod_1.yaml:7-23
────────────────────────────────────────
   7 ┌   restartPolicy: OnFailure
   8 │   runtimeClassName: nvidia
   9 │   containers:
  10 │   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 └     - -benchmark
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cuda-container in pod nbody-gpu-benchmark (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nbody-pod_1.yaml:10-23
────────────────────────────────────────
  10 ┌   - name: cuda-container
  11 │     image: nvcr.io/nvidia/k8s/cuda-sample:nbody
  12 │     args:
  13 │     - nbody
  14 │     - -gpu
  15 │     - -benchmark
  16 │     resources:
  17 │       limits:
  18 └         nvidia.com/gpu: 1
  ..   
────────────────────────────────────────



nc-deployment.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 13, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nc' of Deployment 'nc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nc' of Deployment 'nc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nc' of 'deployment' 'nc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nc' of Deployment 'nc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nc' of Deployment 'nc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nc' of Deployment 'nc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nc' of Deployment 'nc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nc' of Deployment 'nc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'nc' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 nc-deployment.yaml:8-58
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   strategy:
  10 │     type: Recreate
  11 │   selector:
  12 │     matchLabels:
  13 │       app: nc
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nc-deployment.yaml:8-58
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   strategy:
  10 │     type: Recreate
  11 │   selector:
  12 │     matchLabels:
  13 │       app: nc
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nc-deployment.yaml:8-58
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   strategy:
  10 │     type: Recreate
  11 │   selector:
  12 │     matchLabels:
  13 │       app: nc
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nc" of deployment "nc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nc-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nc
   6 └   name: nc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nc-deployment.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nc-deployment.yaml:19-58
────────────────────────────────────────
  19 ┌       containers:
  20 │       - env:
  21 │         - name: TZ
  22 │           value: Europe/Berlin
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: https://drive.anpham.me
  27 └         - name: NEXTCLOUD_ADMIN_USER
  ..   
────────────────────────────────────────



nc-deployment1.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 13, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nc' of Deployment 'nc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nc' of Deployment 'nc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nc' of 'deployment' 'nc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nc' of Deployment 'nc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nc' of Deployment 'nc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nc' of Deployment 'nc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nc' of Deployment 'nc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nc' of Deployment 'nc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nc' of Deployment 'nc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'nc' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 nc-deployment1.yaml:8-58
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   strategy:
  10 │     type: Recreate
  11 │   selector:
  12 │     matchLabels:
  13 │       app: nc
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nc-deployment1.yaml:8-58
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   strategy:
  10 │     type: Recreate
  11 │   selector:
  12 │     matchLabels:
  13 │       app: nc
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nc-deployment1.yaml:8-58
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   strategy:
  10 │     type: Recreate
  11 │   selector:
  12 │     matchLabels:
  13 │       app: nc
  14 │   template:
  15 │     metadata:
  16 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nc" of deployment "nc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nc-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nc
   6 └   name: nc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nc-deployment1.yaml:20-53
────────────────────────────────────────
  20 ┌       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 │         - name: NEXTCLOUD_ADMIN_USER
  28 └           value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nc-deployment1.yaml:19-58
────────────────────────────────────────
  19 ┌       containers:
  20 │       - env:
  21 │         - name: TZ
  22 │           value: Europe/Moscow
  23 │         - name: DEBUG
  24 │           value: "false"
  25 │         - name: NEXTCLOUD_URL
  26 │           value: http://cloud.mosrealstroy.ru
  27 └         - name: NEXTCLOUD_ADMIN_USER
  ..   
────────────────────────────────────────



nc-svc.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nc-svc.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │     - name: http
  10 │       port: 80
  11 │       targetPort: 80
  12 │       protocol: TCP
  13 │   selector:
  14 └     app: nc
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nc-svc.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │     - name: http
  10 │       port: 80
  11 │       targetPort: 80
  12 │       protocol: TCP
  13 │   selector:
  14 └     app: nc
────────────────────────────────────────



nc-svc1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nc-svc1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │     - name: http
  10 │       port: 80
  11 │       targetPort: 80
  12 │       protocol: TCP
  13 │   selector:
  14 └     app: nc
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nc-svc1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │     - name: http
  10 │       port: 80
  11 │       targetPort: 80
  12 │       protocol: TCP
  13 │   selector:
  14 └     app: nc
────────────────────────────────────────



ncat-pod.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nc-test-container' of Pod 'nc-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nc-test-container' of Pod 'nc-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nc-test-container' of 'pod' 'nc-test' in 'test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nc-test-container' of Pod 'nc-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nc-test-container' of Pod 'nc-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nc-test-container' of Pod 'nc-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nc-test-container' of Pod 'nc-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nc-test-container' of Pod 'nc-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nc-test-container' of Pod 'nc-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nc-test-container' of Pod 'nc-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nc-test-container' of Pod 'nc-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ncat-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 ncat-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nc-test-container" of pod "nc-test" in "test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nc-test in test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nc-test in test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ncat-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   containers:
   8 │     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nc-test-container in pod nc-test (namespace: test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ncat-pod.yaml:8-10
────────────────────────────────────────
   8 ┌     - name: nc-test-container
   9 │       image: 10.0.2.4:5000/nc-test
  10 └       command: ["sh", "-c", "sleep infinity"]
────────────────────────────────────────



neb-new-job.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'neb-new-job-container' of 'job' 'neb-new-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neb-new-job.yaml:7-23
────────────────────────────────────────
   7 ┌   parallelism: 2
   8 │   completions: 3
   9 │   template:
  10 │     metadata:
  11 │       creationTimestamp: null
  12 │       labels:
  13 │         id: awesome-job
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neb-new-job.yaml:7-23
────────────────────────────────────────
   7 ┌   parallelism: 2
   8 │   completions: 3
   9 │   template:
  10 │     metadata:
  11 │       creationTimestamp: null
  12 │       labels:
  13 │         id: awesome-job
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "neb-new-job-container" of job "neb-new-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): job neb-new-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 neb-new-job.yaml:4-5
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 └   name: neb-new-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container neb-new-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neb-new-job.yaml:16-22
────────────────────────────────────────
  16 ┌       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job neb-new-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neb-new-job.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - command:
  17 │         - sh
  18 │         - -c
  19 │         - sleep 2 && echo done
  20 │         image: busybox:1.31.0
  21 │         name: neb-new-job-container
  22 │         resources: {}
  23 └       restartPolicy: Never
────────────────────────────────────────



needed.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'needed' of Pod 'needed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'needed' of Pod 'needed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'needed' of 'pod' 'needed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'needed' of Pod 'needed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'needed' of Pod 'needed' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'needed' of Pod 'needed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'needed' of Pod 'needed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'needed' of Pod 'needed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'needed' of Pod 'needed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'needed' of Pod 'needed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 needed.yaml:7-15
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 │         cpu: "250m"
  15 └   priorityClassName: essential
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 needed.yaml:7-15
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 │         cpu: "250m"
  15 └   priorityClassName: essential
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "needed" of pod "needed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod needed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 needed.yaml:5
────────────────────────────────────────
   5 [   name: needed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container needed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 needed.yaml:8-14
────────────────────────────────────────
   8 ┌   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 └         cpu: "250m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod needed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 needed.yaml:7-15
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: needed
   9 │     image: busybox
  10 │     command: ["/bin/sleep", "infinity"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "64Mi"
  14 │         cpu: "250m"
  15 └   priorityClassName: essential
────────────────────────────────────────



neel.yaml (kubernetes)
======================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neel.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neel.yaml:6-10
────────────────────────────────────────
   6 ┌   accessModes:
   7 │   - ReadWriteOnce
   8 │   resources:
   9 │     requests:
  10 └       storage: 1Gi
────────────────────────────────────────



neel_1.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container1' of Deployment 'container-1-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container1' of Deployment 'container-1-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'deployment' 'container-1-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Deployment 'container-1-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container1' of Deployment 'container-1-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Deployment 'container-1-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Deployment 'container-1-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Deployment 'container-1-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Deployment 'container-1-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Deployment 'container-1-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Deployment 'container-1-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Deployment 'container-1-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neel_1.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: container-1-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: container-1-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neel_1.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: container-1-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: container-1-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of deployment "container-1-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment container-1-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 neel_1.yaml:4
────────────────────────────────────────
   4 [   name: container-1-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container container-1-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment container-1-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neel_1.yaml:15-26
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: my-volume
  17 │         persistentVolumeClaim:
  18 │           claimName: my-pvc
  19 │       containers:
  20 │       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 └         - containerPort: 6000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container1 in deployment container-1-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 neel_1.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container1
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-repo/container1:latest
  22 │         ports:
  23 │         - containerPort: 6000
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────



neel_2.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container2' of Deployment 'container-2-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container2' of Deployment 'container-2-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container2' of 'deployment' 'container-2-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container2' of Deployment 'container-2-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container2' of Deployment 'container-2-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container2' of Deployment 'container-2-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container2' of Deployment 'container-2-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container2' of Deployment 'container-2-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container2' of Deployment 'container-2-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container2' of Deployment 'container-2-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container2' of Deployment 'container-2-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container2' of Deployment 'container-2-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neel_2.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: container-2-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: container-2-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neel_2.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: container-2-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: container-2-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container2" of deployment "container-2-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment container-2-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 neel_2.yaml:4
────────────────────────────────────────
   4 [   name: container-2-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container container-2-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment container-2-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neel_2.yaml:15-26
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: my-volume
  17 │         persistentVolumeClaim:
  18 │           claimName: my-pvc
  19 │       containers:
  20 │       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 └         - containerPort: 6001
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container2 in deployment container-2-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 neel_2.yaml:20-26
────────────────────────────────────────
  20 ┌       - name: container2
  21 │         image: us-central1-docker.pkg.dev/mycloud5409/my-image-container2/container2:latest
  22 │         ports:
  23 │         - containerPort: 6001
  24 │         volumeMounts:
  25 │         - name: my-volume
  26 └           mountPath: /neel_PV_dir
────────────────────────────────────────



neel_3.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neel_3.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: container-1-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 6000
  12 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neel_3.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: container-1-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 6000
  12 └   type: LoadBalancer
────────────────────────────────────────



neel_4.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neel_4.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: container-2-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 6001
  12 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neel_4.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: container-2-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 6001
  12 └   type: LoadBalancer
────────────────────────────────────────



neg.yaml (kubernetes)
=====================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neg.yaml:7-17
────────────────────────────────────────
   7 ┌   rules:
   8 │   - host: summerseason.com
   9 │     http:
  10 │       paths:
  11 │       - path: /
  12 │         pathType: Prefix
  13 │         backend:
  14 │           service:
  15 └             name: summer-svc
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neg.yaml:7-17
────────────────────────────────────────
   7 ┌   rules:
   8 │   - host: summerseason.com
   9 │     http:
  10 │       paths:
  11 │       - path: /
  12 │         pathType: Prefix
  13 │         backend:
  14 │           service:
  15 └             name: summer-svc
  ..   
────────────────────────────────────────



nemo-deployment.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nemo-container' of Deployment 'nemo-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nemo-container' of Deployment 'nemo-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nemo-container' of 'deployment' 'nemo-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nemo-container' of Deployment 'nemo-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nemo-container' of Deployment 'nemo-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nemo-container' of Deployment 'nemo-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nemo-container' of Deployment 'nemo-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nemo-container' of Deployment 'nemo-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nemo-container' of Deployment 'nemo-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nemo-container' of Deployment 'nemo-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nemo-container' of Deployment 'nemo-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nemo-container' of Deployment 'nemo-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nemo-deployment.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nemo-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nemo-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nemo-deployment.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nemo-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: nemo-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nemo-container" of deployment "nemo-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nemo-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nemo-deployment.yaml:4
────────────────────────────────────────
   4 [   name: nemo-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nemo-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nemo-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nemo-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nemo-container in deployment nemo-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nemo-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌         - name: nemo-container
  17 │           image: callummiles/nemo-app:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 └             - containerPort: 3000
────────────────────────────────────────



nemo-service.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nemo-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nemo-app
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 │       targetPort: 3000
  12 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nemo-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nemo-app
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 │       targetPort: 3000
  12 └   type: LoadBalancer
────────────────────────────────────────



neoncode-patch.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'neoncode' of Deployment 'neoncode' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'neoncode' of Deployment 'neoncode' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'neoncode' of 'deployment' 'neoncode' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'neoncode' of Deployment 'neoncode' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'neoncode' of Deployment 'neoncode' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'neoncode' of Deployment 'neoncode' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'neoncode' of Deployment 'neoncode' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'neoncode' of Deployment 'neoncode' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'neoncode' of Deployment 'neoncode' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'neoncode' of Deployment 'neoncode' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'neoncode' of Deployment 'neoncode' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'neoncode' of Deployment 'neoncode' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neoncode-patch.yaml:6-24
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app.kubernetes.io/name: neoncode
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │         - name: neoncode
  14 └           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neoncode-patch.yaml:6-24
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app.kubernetes.io/name: neoncode
  10 │   template:
  11 │     spec:
  12 │       containers:
  13 │         - name: neoncode
  14 └           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "neoncode" of deployment "neoncode" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment neoncode in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 neoncode-patch.yaml:4
────────────────────────────────────────
   4 [   name: neoncode
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container neoncode in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment neoncode in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neoncode-patch.yaml:12-24
────────────────────────────────────────
  12 ┌       containers:
  13 │         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 └           # Note that the host part gets rewritten by kustomize:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container neoncode in deployment neoncode (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 neoncode-patch.yaml:13-21
────────────────────────────────────────
  13 ┌         - name: neoncode
  14 │           #image: registry.management.svc.cluster.local:5000/scienta/neon:1.0.0-SNAPSHOT
  15 │           #image: kind-registry:5000/scienta/neon:1.0.0-SNAPSHOT
  16 │           #image: kind-registry:5001/scienta/neon:1.0.0-SNAPSHOT
  17 │           #image: neon.local.gd:5001/scienta/neon:1.0.0-SNAPSHOT
  18 │           #For Kind, it turns out that this is the image reference that works
  19 │           # image: localhost:5001/scienta/neon:1.0.3
  20 │           # Note that the host part gets rewritten by kustomize:
  21 └           image: localhost:5001/scienta/neon:1.0.0-SNAPSHOT # {"$imagepolicy": "backend:neoncode"}
────────────────────────────────────────



neptune-10ab.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'neptune-pod-10ab' of 'deployment' 'neptune-10ab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'neptune-pod-10ab' of Deployment 'neptune-10ab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 neptune-10ab.yaml:9-28
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: neptune-10ab
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 neptune-10ab.yaml:9-28
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: neptune-10ab
  13 │   strategy: {}
  14 │   template:
  15 │     metadata:
  16 │       creationTimestamp: null
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "neptune-pod-10ab" of deployment "neptune-10ab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment neptune-10ab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 neptune-10ab.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     app: neptune-10ab
   7 └   name: neptune-10ab
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container neptune-10ab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neptune-10ab.yaml:22-28
────────────────────────────────────────
  22 ┌       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment neptune-10ab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 neptune-10ab.yaml:20-28
────────────────────────────────────────
  20 ┌       serviceAccountName: neptune-sa-v2
  21 │       containers:
  22 │       - image: httpd:2.4-alpine
  23 │         name: neptune-pod-10ab
  24 │         resources:
  25 │           limits:
  26 │             memory: 50Mi
  27 │           request:
  28 └             memory: 20Mi
────────────────────────────────────────



nest-deployment-test.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nest' of Deployment 'nest-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nest' of 'deployment' 'nest-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nest-deployment-test.yaml:8-115
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nest
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: nest
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nest-deployment-test.yaml:8-115
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nest
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: nest
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nest" of deployment "nest-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nest-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nest-deployment-test.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nest-deployment
   5 │   labels:
   6 └     app: nest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nest-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nest-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nest-deployment-test.yaml:17-113
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nest in deployment nest-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nest-deployment-test.yaml:18-113
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest:test
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 3000
  23 │           env:
  24 │             - name: ENV
  25 │               valueFrom:
  26 └                 configMapKeyRef:
  ..   
────────────────────────────────────────



nest-deployment.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nest' of Deployment 'nest-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nest' of 'deployment' 'nest-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nest' of Deployment 'nest-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nest' of Deployment 'nest-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nest-deployment.yaml:8-113
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nest
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: nest
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nest-deployment.yaml:8-113
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nest
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: nest
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nest" of deployment "nest-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nest-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nest-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nest-deployment
   5 │   labels:
   6 └     app: nest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nest-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nest-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nest-deployment.yaml:17-112
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nest in deployment nest-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 nest-deployment.yaml:18-112
────────────────────────────────────────
  18 ┌         - name: nest
  19 │           image: windsnow1025/nest
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: ENV
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: app-configmap
  ..   
────────────────────────────────────────



nest-service.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nest-service.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: nest
  11 │   ports:
  12 │     - protocol: TCP
  13 │       port: 3000
  14 └       targetPort: 3000
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nest-service.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: nest
  11 │   ports:
  12 │     - protocol: TCP
  13 │       port: 3000
  14 └       targetPort: 3000
────────────────────────────────────────



net-networkpolicy.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 net-networkpolicy.yaml:7-14
────────────────────────────────────────
   7 ┌   ingress:
   8 │     - from:
   9 │         - podSelector:
  10 │             matchLabels:
  11 │               io.kompose.network/net: "true"
  12 │   podSelector:
  13 │     matchLabels:
  14 └       io.kompose.network/net: "true"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 net-networkpolicy.yaml:7-14
────────────────────────────────────────
   7 ┌   ingress:
   8 │     - from:
   9 │         - podSelector:
  10 │             matchLabels:
  11 │               io.kompose.network/net: "true"
  12 │   podSelector:
  13 │     matchLabels:
  14 └       io.kompose.network/net: "true"
────────────────────────────────────────



net-policy.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 net-policy.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   policyTypes:
  11 │     - Ingress
  12 │   ingress:
  13 │     - from:
  14 │         - podSelector:
  15 └             matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 net-policy.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: mysql
  10 │   policyTypes:
  11 │     - Ingress
  12 │   ingress:
  13 │     - from:
  14 │         - podSelector:
  15 └             matchLabels:
  ..   
────────────────────────────────────────



netapi-deployment-v1.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netapi-v1' of 'deployment' 'netapi-deployment-v1' in 'proyecto1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netapi-v1' of Deployment 'netapi-deployment-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netapi-deployment-v1.yaml:9-46
────────────────────────────────────────
   9 ┌   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       component: netapi-v1
  13 │   template:
  14 │     metadata:
  15 │       name: proyecto1_Inti_Luna
  16 │       labels:
  17 └         component: netapi-v1
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netapi-deployment-v1.yaml:9-46
────────────────────────────────────────
   9 ┌   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       component: netapi-v1
  13 │   template:
  14 │     metadata:
  15 │       name: proyecto1_Inti_Luna
  16 │       labels:
  17 └         component: netapi-v1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netapi-v1" of deployment "netapi-deployment-v1" in "proyecto1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netapi-deployment-v1 in proyecto1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netapi-deployment-v1 in proyecto1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netapi-deployment-v1.yaml:19-46
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 └             - name: MONGO_INITDB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netapi-v1 in deployment netapi-deployment-v1 (namespace: proyecto1) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netapi-deployment-v1.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi-v1
  21 │           image: lunadocker0198/imagenet:1.0
  22 │           ports:
  23 │             - containerPort: 7007
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────



netapi-deployment-v2.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netapi' of Deployment 'netapi-deployment-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netapi' of 'deployment' 'netapi-deployment-v2' in 'proyecto1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netapi' of Deployment 'netapi-deployment-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netapi-deployment-v2.yaml:9-46
────────────────────────────────────────
   9 ┌   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       component: netapi-v2
  13 │   template:
  14 │     metadata:
  15 │       name: proyecto1_Inti_Luna
  16 │       labels:
  17 └         component: netapi-v2
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netapi-deployment-v2.yaml:9-46
────────────────────────────────────────
   9 ┌   replicas: 2
  10 │   selector:
  11 │     matchLabels:
  12 │       component: netapi-v2
  13 │   template:
  14 │     metadata:
  15 │       name: proyecto1_Inti_Luna
  16 │       labels:
  17 └         component: netapi-v2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netapi" of deployment "netapi-deployment-v2" in "proyecto1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netapi-deployment-v2 in proyecto1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netapi-deployment-v2 in proyecto1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netapi-deployment-v2.yaml:19-46
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 └             - name: MONGO_INITDB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netapi in deployment netapi-deployment-v2 (namespace: proyecto1) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netapi-deployment-v2.yaml:20-43
────────────────────────────────────────
  20 ┌         - name: netapi
  21 │           image: lunadocker0198/imagenet:2.0
  22 │           ports:
  23 │             - containerPort: 7010
  24 │           env:
  25 │             - name: Entorno
  26 │               value: inti_luna
  27 │             - name: MONGO_INITDB_DATABASE
  28 └               value: test
  ..   
────────────────────────────────────────



netapi-service-v1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netapi-service-v1.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 7007
  11 │       targetPort: 7007
  12 │   selector:
  13 └     component: netapi-v1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netapi-service-v1.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 7007
  11 │       targetPort: 7007
  12 │   selector:
  13 └     component: netapi-v1
────────────────────────────────────────



netapi-service-v2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netapi-service-v2.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 7010
  11 │       targetPort: 7010
  12 │   selector:
  13 └     component: netapi-v2
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netapi-service-v2.yaml:7-13
────────────────────────────────────────
   7 ┌   type: LoadBalancer
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 7010
  11 │       targetPort: 7010
  12 │   selector:
  13 └     component: netapi-v2
────────────────────────────────────────



netbox-configmap.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'netbox-configmap' in 'netbox' namespace stores sensitive contents in key(s) or value(s) '{"EMAIL_FROM", "EMAIL_PASSWORD", "EMAIL_PORT", "EMAIL_SERVER", "EMAIL_TIMEOUT", "EMAIL_USERNAME", "REDIS_CACHE_PORT", "REDIS_PORT", "SOCIAL_AUTH_OIDC_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 netbox-configmap.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'netbox-configmap' in 'netbox' namespace stores secrets in key(s) or value(s) '{"EMAIL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 netbox-configmap.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



netbox-configmap1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'netbox-configmap' in 'netbox' namespace stores sensitive contents in key(s) or value(s) '{"EMAIL_FROM", "EMAIL_PASSWORD", "EMAIL_PORT", "EMAIL_SERVER", "EMAIL_TIMEOUT", "EMAIL_USERNAME", "REDIS_CACHE_PORT", "REDIS_PORT", "SOCIAL_AUTH_OIDC_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 netbox-configmap1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'netbox-configmap' in 'netbox' namespace stores secrets in key(s) or value(s) '{"EMAIL_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 netbox-configmap1.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



netbox-configmap2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'netbox-env-config' in 'netbox' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT", "REDIS_CACHE_PORT", "REDIS_PORT", "SECRET_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'netbox-env-config' in 'netbox' namespace stores secrets in key(s) or value(s) '{"REDIS_PASSWORD", "SECRET_KEY"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



netbox-deploy.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netbox' of Deployment 'netbox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netbox' of Deployment 'netbox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netbox' of 'deployment' 'netbox' in 'netbox' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netbox' of Deployment 'netbox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netbox' of Deployment 'netbox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netbox' of Deployment 'netbox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netbox' of Deployment 'netbox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netbox' of Deployment 'netbox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-deploy.yaml:7-49
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: netbox
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: netbox
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-deploy.yaml:7-49
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: netbox
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: netbox
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netbox" of deployment "netbox" in "netbox" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netbox in netbox namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netbox in netbox namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-deploy.yaml:16-49
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netbox in deployment netbox (namespace: netbox) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netbox-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: netbox
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         envFrom:
  20 │         - configMapRef:
  21 │             name: netbox-env-config
  22 │         - secretRef:
  23 │             name: netbox-env-secrets
  24 │         ports:
  25 └         - containerPort: 8080
  ..   
────────────────────────────────────────



netbox-deploy_1.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netbox-worker' of Deployment 'netbox-worker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netbox-worker' of Deployment 'netbox-worker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netbox-worker' of 'deployment' 'netbox-worker' in 'netbox' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netbox-worker' of Deployment 'netbox-worker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netbox-worker' of Deployment 'netbox-worker' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netbox-worker' of Deployment 'netbox-worker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netbox-worker' of Deployment 'netbox-worker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netbox-worker' of Deployment 'netbox-worker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-deploy_1.yaml:7-34
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: netbox-worker
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: netbox-worker
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-deploy_1.yaml:7-34
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: netbox-worker
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: netbox-worker
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netbox-worker" of deployment "netbox-worker" in "netbox" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netbox-worker in netbox namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netbox-worker in netbox namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-deploy_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netbox-worker in deployment netbox-worker (namespace: netbox) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netbox-deploy_1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: netbox-worker
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/venv/bin/python
  21 │         - /opt/netbox/netbox/manage.py
  22 │         - rqworker
  23 │         resources:
  24 │           requests:
  25 └             memory: 250Mi
  ..   
────────────────────────────────────────



netbox-deploy_2.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netbox-housekeeping' of Deployment 'netbox-housekeeping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netbox-housekeeping' of Deployment 'netbox-housekeeping' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netbox-housekeeping' of 'deployment' 'netbox-housekeeping' in 'netbox' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netbox-housekeeping' of Deployment 'netbox-housekeeping' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netbox-housekeeping' of Deployment 'netbox-housekeeping' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netbox-housekeeping' of Deployment 'netbox-housekeeping' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netbox-housekeeping' of Deployment 'netbox-housekeeping' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netbox-housekeeping' of Deployment 'netbox-housekeeping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-deploy_2.yaml:7-32
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: netbox-housekeeping
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: netbox-housekeeping
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-deploy_2.yaml:7-32
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: netbox-housekeeping
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: netbox-housekeeping
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netbox-housekeeping" of deployment "netbox-housekeeping" in "netbox" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netbox-housekeeping in netbox namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netbox-housekeeping in netbox namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-deploy_2.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 └             cpu: 125m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netbox-housekeeping in deployment netbox-housekeeping (namespace: netbox) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netbox-deploy_2.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: netbox-housekeeping
  18 │         image: docker.io/netboxcommunity/netbox:latest
  19 │         command:
  20 │         - /opt/netbox/housekeeping.sh
  21 │         resources:
  22 │           requests:
  23 │             memory: 250Mi
  24 │             cpu: 125m
  25 └           limits:
  ..   
────────────────────────────────────────



netbox-ingress.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-ingress.yaml:7-17
────────────────────────────────────────
   7 ┌   rules:
   8 │   - host: netbox.ing.k3s.brickyard.whitestar.systems
   9 │     http:
  10 │       paths:
  11 │       - backend:
  12 │           service:
  13 │             name: netbox
  14 │             port:
  15 └               number: 80
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-ingress.yaml:7-17
────────────────────────────────────────
   7 ┌   rules:
   8 │   - host: netbox.ing.k3s.brickyard.whitestar.systems
   9 │     http:
  10 │       paths:
  11 │       - backend:
  12 │           service:
  13 │             name: netbox
  14 │             port:
  15 └               number: 80
  ..   
────────────────────────────────────────



netbox-ingress1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-ingress1.yaml:7-17
────────────────────────────────────────
   7 ┌   rules:
   8 │   - host: netbox.ing.k3s.brickyard.whitestar.systems
   9 │     http:
  10 │       paths:
  11 │       - backend:
  12 │           service:
  13 │             name: netbox
  14 │             port:
  15 └               number: 80
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-ingress1.yaml:7-17
────────────────────────────────────────
   7 ┌   rules:
   8 │   - host: netbox.ing.k3s.brickyard.whitestar.systems
   9 │     http:
  10 │       paths:
  11 │       - backend:
  12 │           service:
  13 │             name: netbox
  14 │             port:
  15 └               number: 80
  ..   
────────────────────────────────────────



netbox-ingress1_3.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-ingress1_3.yaml:10-21
────────────────────────────────────────
  10 ┌   rules:
  11 │   - host: netbox.auth-ing.k3s.brickyard.whitestar.systems
  12 │     http: &id001
  13 │       paths:
  14 │       - backend:
  15 │           service:
  16 │             name: netbox
  17 │             port:
  18 └               number: 80
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-ingress1_3.yaml:10-21
────────────────────────────────────────
  10 ┌   rules:
  11 │   - host: netbox.auth-ing.k3s.brickyard.whitestar.systems
  12 │     http: &id001
  13 │       paths:
  14 │       - backend:
  15 │           service:
  16 │             name: netbox
  17 │             port:
  18 └               number: 80
  ..   
────────────────────────────────────────



netbox-ingress2.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-ingress2.yaml:11-25
────────────────────────────────────────
  11 ┌   tls:
  12 │   - hosts:
  13 │     - netbox.danber.casa
  14 │     secretName: netbox-tls
  15 │   rules:
  16 │   - host: netbox.danber.casa
  17 │     http:
  18 │       paths:
  19 └       - path: /
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-ingress2.yaml:11-25
────────────────────────────────────────
  11 ┌   tls:
  12 │   - hosts:
  13 │     - netbox.danber.casa
  14 │     secretName: netbox-tls
  15 │   rules:
  16 │   - host: netbox.danber.casa
  17 │     http:
  18 │       paths:
  19 └       - path: /
  ..   
────────────────────────────────────────



netbox-ingress_3.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-ingress_3.yaml:10-21
────────────────────────────────────────
  10 ┌   rules:
  11 │   - host: netbox.auth-ing.k3s.brickyard.whitestar.systems
  12 │     http: &id001
  13 │       paths:
  14 │       - backend:
  15 │           service:
  16 │             name: netbox
  17 │             port:
  18 └               number: 80
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-ingress_3.yaml:10-21
────────────────────────────────────────
  10 ┌   rules:
  11 │   - host: netbox.auth-ing.k3s.brickyard.whitestar.systems
  12 │     http: &id001
  13 │       paths:
  14 │       - backend:
  15 │           service:
  16 │             name: netbox
  17 │             port:
  18 └               number: 80
  ..   
────────────────────────────────────────



netbox-media-pvc.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-media-pvc.yaml:10-13
────────────────────────────────────────
  10 ┌   accessModes: [ReadWriteMany]
  11 │   resources:
  12 │     requests:
  13 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-media-pvc.yaml:10-13
────────────────────────────────────────
  10 ┌   accessModes: [ReadWriteMany]
  11 │   resources:
  12 │     requests:
  13 └       storage: 1Gi
────────────────────────────────────────



netbox-media-pvc1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-media-pvc1.yaml:10-13
────────────────────────────────────────
  10 ┌   accessModes: [ReadWriteMany]
  11 │   resources:
  12 │     requests:
  13 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-media-pvc1.yaml:10-13
────────────────────────────────────────
  10 ┌   accessModes: [ReadWriteMany]
  11 │   resources:
  12 │     requests:
  13 └       storage: 1Gi
────────────────────────────────────────



netbox-postgres-deploy.yaml (kubernetes)
========================================
Tests: 117 (SUCCESSES: 103, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'netbox' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-postgres-deploy.yaml:7-39
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: postgres
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: postgres
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-postgres-deploy.yaml:7-39
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: postgres
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: postgres
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "netbox" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in netbox namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-postgres-deploy.yaml:17-35
────────────────────────────────────────
  17 ┌         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 │           ports:
  25 └             - containerPort: 5432
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in netbox namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-postgres-deploy.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: postgres
  18 │           image: postgres:16-alpine
  19 │           envFrom:
  20 │             - configMapRef:
  21 │                 name: netbox-env-config
  22 │             - secretRef:
  23 │                 name: netbox-env-secrets
  24 └           ports:
  ..   
────────────────────────────────────────



netbox-pvc.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-pvc.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 5Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-pvc.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 5Gi
────────────────────────────────────────



netbox-pvc_1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-pvc_1.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 5Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-pvc_1.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 5Gi
────────────────────────────────────────



netbox-pvc_2.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-pvc_2.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 2Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-pvc_2.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 2Gi
────────────────────────────────────────



netbox-pvc_3.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-pvc_3.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 2Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-pvc_3.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 2Gi
────────────────────────────────────────



netbox-pvc_4.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-pvc_4.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-pvc_4.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



netbox-pvc_5.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-pvc_5.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-pvc_5.yaml:7-11
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



netbox-redis-deploy.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 102, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis' in 'netbox' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-redis-deploy.yaml:7-43
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: redis
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: redis
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-redis-deploy.yaml:7-43
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: redis
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: redis
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis" in "netbox" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in netbox namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis in netbox namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-redis-deploy.yaml:16-43
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis in deployment redis (namespace: netbox) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netbox-redis-deploy.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --appendonly yes --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────



netbox-redis-deploy_1.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 102, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis-cache' of Deployment 'redis-cache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis-cache' of Deployment 'redis-cache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis-cache' of 'deployment' 'redis-cache' in 'netbox' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis-cache' of Deployment 'redis-cache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis-cache' of Deployment 'redis-cache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis-cache' of Deployment 'redis-cache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis-cache' of Deployment 'redis-cache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:7-43
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: redis-cache
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: redis-cache
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:7-43
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: redis-cache
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: redis-cache
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis-cache" of deployment "redis-cache" in "netbox" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cache in netbox namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cache in netbox namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:16-43
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 └         - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis-cache in deployment redis-cache (namespace: netbox) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netbox-redis-deploy_1.yaml:17-39
────────────────────────────────────────
  17 ┌       - name: redis-cache
  18 │         image: valkey/valkey:8.0-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - valkey-server --requirepass $$REDIS_PASSWORD
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: netbox-env-config
  ..   
────────────────────────────────────────



netbox-service.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-service.yaml:13-17
────────────────────────────────────────
  13 ┌   ports:
  14 │     - port: 80
  15 │       targetPort: http
  16 │   selector:
  17 └     k8s-app: netbox
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-service.yaml:13-17
────────────────────────────────────────
  13 ┌   ports:
  14 │     - port: 80
  15 │       targetPort: http
  16 │   selector:
  17 └     k8s-app: netbox
────────────────────────────────────────



netbox-service1.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-service1.yaml:13-17
────────────────────────────────────────
  13 ┌   ports:
  14 │     - port: 80
  15 │       targetPort: http
  16 │   selector:
  17 └     k8s-app: netbox
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-service1.yaml:13-17
────────────────────────────────────────
  13 ┌   ports:
  14 │     - port: 80
  15 │       targetPort: http
  16 │   selector:
  17 └     k8s-app: netbox
────────────────────────────────────────



netbox-service2.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-service2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: netbox
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 80
  12 │     targetPort: 8080
  13 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-service2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: netbox
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 80
  12 │     targetPort: 8080
  13 └   type: ClusterIP
────────────────────────────────────────



netbox-service2_1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-service2_1.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: postgres
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5432
  12 │     targetPort: 5432
  13 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-service2_1.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: postgres
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5432
  12 │     targetPort: 5432
  13 └   type: ClusterIP
────────────────────────────────────────



netbox-service2_2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-service2_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: redis
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 6379
  12 │     targetPort: 6379
  13 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-service2_2.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: redis
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 6379
  12 │     targetPort: 6379
  13 └   type: ClusterIP
────────────────────────────────────────



netbox-service2_3.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netbox-service2_3.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: redis-cache
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 6379
  12 │     targetPort: 6379
  13 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netbox-service2_3.yaml:7-13
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: redis-cache
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 6379
  12 │     targetPort: 6379
  13 └   type: ClusterIP
────────────────────────────────────────



netcat-deployment-nomaster.yaml (kubernetes)
============================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dnsutils' of Deployment 'netcat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dnsutils' of 'deployment' 'netcat' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:8-32
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: netcat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netcat
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:8-32
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: netcat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netcat
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dnsutils" of deployment "netcat" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment netcat in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:4-6
────────────────────────────────────────
   4 ┌   name: netcat
   5 │   labels:
   6 └     app: netcat
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netcat in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netcat in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:17-32
────────────────────────────────────────
  17 ┌       containers:
  18 │         # dnsutils is easier to debug DNS issues with than the standard busybox image
  19 │         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 │             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
  24 │       affinity:
  25 └         nodeAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dnsutils in deployment netcat (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netcat-deployment-nomaster.yaml:19-23
────────────────────────────────────────
  19 ┌         - name: dnsutils
  20 │           # https://github.com/kubernetes/kubernetes/blob/master/test/images/agnhost/README.md
  21 │           image: registry.k8s.io/e2e-test-images/agnhost:2.40
  22 │           command:
  23 └             ["/bin/sh", "-c", "while true; do echo hello | nc -l -p 8080; done"]
────────────────────────────────────────



netcat-deployment.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dnsutils' of Deployment 'netcat' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dnsutils' of 'deployment' 'netcat' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dnsutils' of Deployment 'netcat' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netcat-deployment.yaml:8-24
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: netcat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netcat
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netcat-deployment.yaml:8-24
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: netcat
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netcat
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dnsutils" of deployment "netcat" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment netcat in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netcat-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: netcat
   5 │   labels:
   6 └     app: netcat
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netcat in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netcat in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netcat-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dnsutils in deployment netcat (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netcat-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: dnsutils
  19 │         image: registry.k8s.io/e2e-test-images/agnhost:2.40
  20 │         imagePullPolicy: IfNotPresent
  21 │         command:
  22 │         - /bin/sh
  23 │         - -c
  24 └         - while true; do echo hello | nc -l -p 8080; done
────────────────────────────────────────



netcat-deployment_1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netcat-deployment_1.yaml:6-9
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 8080
   8 │   selector:
   9 └     app: netcat
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netcat-deployment_1.yaml:6-9
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 8080
   8 │   selector:
   9 └     app: netcat
────────────────────────────────────────



netexecrc.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc1.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc1.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc1.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc1.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc1.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc1.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc10.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc10.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc10.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc10.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc10.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc10.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc11.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc11.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc11.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc11.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc11.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc11.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc13.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc13.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc13.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc13.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc13.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc13.yaml:13-20
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────



netexecrc14.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc14.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc14.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc14.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc14.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc14.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc15.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc15.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc15.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc15.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc15.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc15.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc16.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc16.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc16.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc16.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc16.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc16.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc17.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc17.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc17.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc17.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc17.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc17.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc18.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc18.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc18.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc18.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc18.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc18.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc2.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc2.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc2.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc2.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc2.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc2.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc3.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc3.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc3.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc3.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc3.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc3.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc4.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc4.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc4.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc4.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc4.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc4.yaml:13-20
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────



netexecrc5.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc5.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc5.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc5.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc5.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc5.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc6.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc6.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc6.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc6.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc6.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc6.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc7.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc7.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc7.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc7.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc7.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netexec in replicationcontroller netexec (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netexecrc7.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: registry.k8s.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecrc8.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc8.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc8.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc8.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc8.yaml:14-20
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc8.yaml:13-20
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: gcr.io/kubernetes-e2e-test-images/netexec:1.0
  16 │         ports:
  17 │         - containerPort: 8080
  18 │           # This is to force these pods to land on different hosts.
  19 │           # TODO: use the downward api and get podname instead.
  20 └           hostPort: 81
────────────────────────────────────────



netexecrc9.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netexec' of ReplicationController 'netexec' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netexec' of 'replicationcontroller' 'netexec' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netexec' of ReplicationController 'netexec' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'netexec' of ReplicationController 'netexec' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecrc9.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecrc9.yaml:7-21
────────────────────────────────────────
   7 ┌   replicas: 3
   8 │   template:
   9 │     metadata:
  10 │       labels:
  11 │         app: netexec
  12 │     spec:
  13 │       containers:
  14 │       - name: netexec
  15 └         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netexec" of replicationcontroller "netexec" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller netexec in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netexecrc9.yaml:4
────────────────────────────────────────
   4 [   name: netexec
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netexec in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc9.yaml:14-21
────────────────────────────────────────
  14 ┌       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller netexec in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netexecrc9.yaml:13-21
────────────────────────────────────────
  13 ┌       containers:
  14 │       - name: netexec
  15 │         image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  16 │         command: ["/agnhost", "netexec"]
  17 │         ports:
  18 │         - containerPort: 8080
  19 │           # This is to force these pods to land on different hosts.
  20 │           # TODO: use the downward api and get podname instead.
  21 └           hostPort: 81
────────────────────────────────────────



netexecsvc.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc1.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc1.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc10.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc10.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc10.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc11.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc11.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc11.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc13.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc13.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc13.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc14.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc14.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc14.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc15.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc15.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc15.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc16.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc16.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc16.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc17.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc17.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc17.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc18.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc18.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc18.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc2.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc2.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc2.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc3.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc3.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc3.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc4.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc4.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc5.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc5.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc6.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc6.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc6.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc7.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc7.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc7.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc8.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc8.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc8.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netexecsvc9.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netexecsvc9.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netexecsvc9.yaml:8-15
────────────────────────────────────────
   8 ┌   Type: NodePort
   9 │   ports:
  10 │   - port: 80
  11 │     targetPort: 8080
  12 │     protocol: TCP
  13 │     name: http
  14 │   selector:
  15 └     app: netexec
────────────────────────────────────────



netflix-deployment.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netflix' of Deployment 'netflix-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netflix' of Deployment 'netflix-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netflix' of 'deployment' 'netflix-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netflix' of Deployment 'netflix-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netflix' of Deployment 'netflix-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netflix' of Deployment 'netflix-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netflix' of Deployment 'netflix-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netflix' of Deployment 'netflix-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netflix' of Deployment 'netflix-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netflix' of Deployment 'netflix-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netflix' of Deployment 'netflix-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netflix' of Deployment 'netflix-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netflix-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: netflix
   9 │   replicas: 3
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: netflix
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netflix-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: netflix
   9 │   replicas: 3
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: netflix
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netflix" of deployment "netflix-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment netflix-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netflix-deployment.yaml:4
────────────────────────────────────────
   4 [   name: netflix-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netflix-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netflix-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netflix-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netflix in deployment netflix-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netflix-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: netflix
  17 │         image: netflix/eureka-server:latest
  18 │         ports:
  19 └         - containerPort: 8761
────────────────────────────────────────



netflix-deployment_1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netflix-deployment_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: netflix
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 8761
  11 │     targetPort: 8761
  12 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netflix-deployment_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: netflix
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 8761
  11 │     targetPort: 8761
  12 └   type: LoadBalancer
────────────────────────────────────────



netflix_service.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netflix_service.yaml:6-11
────────────────────────────────────────
   6 ┌   ports : 
   7 │   - port : 80
   8 │     targetPort : 80
   9 │   selector :
  10 │     task : clone
  11 └   type : LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netflix_service.yaml:6-11
────────────────────────────────────────
   6 ┌   ports : 
   7 │   - port : 80
   8 │     targetPort : 80
   9 │   selector :
  10 │     task : clone
  11 └   type : LoadBalancer
────────────────────────────────────────



netns-volume.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 92, FAILURES: 24)
Failures: 24 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 6, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sh' of Pod 'test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sh' of Pod 'test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sh' of 'pod' 'test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0008 (HIGH): Pod 'test' should not set 'spec.template.spec.hostIPC' to true
════════════════════════════════════════
Sharing the host’s IPC namespace allows container processes to communicate with processes on the host.

See https://avd.aquasec.com/misconfig/ksv008
────────────────────────────────────────
 netns-volume.yaml:7-28
────────────────────────────────────────
   7 ┌   containers:
   8 │   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 └       privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Pod 'test' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 netns-volume.yaml:7-28
────────────────────────────────────────
   7 ┌   containers:
   8 │   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 └       privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): Pod 'test' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 netns-volume.yaml:7-28
────────────────────────────────────────
   7 ┌   containers:
   8 │   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 └       privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sh' of Pod 'test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sh' of Pod 'test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sh' of Pod 'test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sh' of Pod 'test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sh' of Pod 'test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sh' of Pod 'test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'sh' of Pod 'test' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sh' of Pod 'test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sh' of Pod 'test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sh' of Pod 'test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'test' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 netns-volume.yaml:7-28
────────────────────────────────────────
   7 ┌   containers:
   8 │   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 └       privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netns-volume.yaml:7-28
────────────────────────────────────────
   7 ┌   containers:
   8 │   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 └       privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netns-volume.yaml:7-28
────────────────────────────────────────
   7 ┌   containers:
   8 │   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 └       privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sh" of pod "test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netns-volume.yaml:8-19
────────────────────────────────────────
   8 ┌   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 │       privileged: true
  16 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netns-volume.yaml:4-5
────────────────────────────────────────
   4 ┌   name: test
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netns-volume.yaml:7-28
────────────────────────────────────────
   7 ┌   containers:
   8 │   - args:
   9 │     - bash
  10 │     image: centos
  11 │     name: sh
  12 │     stdin: true
  13 │     tty: true
  14 │     securityContext:
  15 └       privileged: true
  ..   
────────────────────────────────────────



netperf-deployment.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netperf' of Pod 'netperf-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netperf' of 'pod' 'netperf-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netperf-deployment.yaml:9-21
────────────────────────────────────────
   9 ┌   terminationGracePeriodSeconds: 0
  10 │   containers:
  11 │   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 └         - -H
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netperf-deployment.yaml:9-21
────────────────────────────────────────
   9 ┌   terminationGracePeriodSeconds: 0
  10 │   containers:
  11 │   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 └         - -H
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netperf" of pod "netperf-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod netperf-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netperf-deployment.yaml:4-7
────────────────────────────────────────
   4 ┌   name: netperf-server
   5 │   labels:
   6 │     id: netperf-server
   7 └     zgroup: testapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netperf-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod netperf-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf-deployment.yaml:9-21
────────────────────────────────────────
   9 ┌   terminationGracePeriodSeconds: 0
  10 │   containers:
  11 │   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 └         - -H
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netperf in pod netperf-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netperf-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   - name: netperf
  12 │     image: docker.io/tgraf/netperf:v1.0
  13 │     readinessProbe:
  14 │       exec:
  15 │         command:
  16 │         - netperf
  17 │         - -H
  18 │         - 127.0.0.1
  19 └         - -l
  ..   
────────────────────────────────────────



netperf-deployment_1.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netperf' of Pod 'netperf-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netperf' of 'pod' 'netperf-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netperf-deployment_1.yaml:9-12
────────────────────────────────────────
   9 ┌   terminationGracePeriodSeconds: 0
  10 │   containers:
  11 │   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netperf-deployment_1.yaml:9-12
────────────────────────────────────────
   9 ┌   terminationGracePeriodSeconds: 0
  10 │   containers:
  11 │   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netperf" of pod "netperf-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod netperf-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netperf-deployment_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: netperf-client
   5 │   labels:
   6 │     id: netperf-client
   7 └     zgroup: testapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netperf-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod netperf-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf-deployment_1.yaml:9-12
────────────────────────────────────────
   9 ┌   terminationGracePeriodSeconds: 0
  10 │   containers:
  11 │   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netperf in pod netperf-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netperf-deployment_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: netperf
  12 └     image: docker.io/tgraf/netperf:v1.0
────────────────────────────────────────



netperf-deployment_2.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netperf-deployment_2.yaml:6-9
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 12865
   8 │   selector:
   9 └     id: netperf-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netperf-deployment_2.yaml:6-9
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 12865
   8 │   selector:
   9 └     id: netperf-server
────────────────────────────────────────



netperf.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netperf' of Pod 'netperf-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netperf' of 'pod' 'netperf-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netperf' of Pod 'netperf-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netperf' of Pod 'netperf-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netperf.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netperf.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netperf" of pod "netperf-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod netperf-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netperf.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/name: netperf-server
   6 └   name: netperf-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netperf-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod netperf-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netperf in pod netperf-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netperf.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: netperf
  10 │     image: cilium/netperf
  11 │     ports:
  12 └     - containerPort: 12865
────────────────────────────────────────



netperf_1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netperf' of Pod 'netperf-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netperf' of 'pod' 'netperf-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netperf' of Pod 'netperf-client' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netperf' of Pod 'netperf-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netperf_1.yaml:8-23
────────────────────────────────────────
   8 ┌   affinity:
   9 │     podAntiAffinity:
  10 │       requiredDuringSchedulingIgnoredDuringExecution:
  11 │       - labelSelector:
  12 │           matchExpressions:
  13 │           - key: app.kubernetes.io/name
  14 │             operator: In
  15 │             values:
  16 └             - netperf-server
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netperf_1.yaml:8-23
────────────────────────────────────────
   8 ┌   affinity:
   9 │     podAntiAffinity:
  10 │       requiredDuringSchedulingIgnoredDuringExecution:
  11 │       - labelSelector:
  12 │           matchExpressions:
  13 │           - key: app.kubernetes.io/name
  14 │             operator: In
  15 │             values:
  16 └             - netperf-server
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netperf" of pod "netperf-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod netperf-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netperf_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/name: netperf-client
   6 └   name: netperf-client
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netperf-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod netperf-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netperf_1.yaml:8-23
────────────────────────────────────────
   8 ┌   affinity:
   9 │     podAntiAffinity:
  10 │       requiredDuringSchedulingIgnoredDuringExecution:
  11 │       - labelSelector:
  12 │           matchExpressions:
  13 │           - key: app.kubernetes.io/name
  14 │             operator: In
  15 │             values:
  16 └             - netperf-server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netperf in pod netperf-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netperf_1.yaml:19-23
────────────────────────────────────────
  19 ┌   - name: netperf
  20 │     args:
  21 │     - sleep
  22 │     - infinity
  23 └     image: cilium/netperf
────────────────────────────────────────



netpol-1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-1.yaml:6-9
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       run: myblog
   9 └   ingress: []
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-1.yaml:6-9
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       run: myblog
   9 └   ingress: []
────────────────────────────────────────



netpol-11.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-11.yaml:6-9
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       run: myblog
   9 └   ingress: []
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-11.yaml:6-9
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       run: myblog
   9 └   ingress: []
────────────────────────────────────────



netpol-2.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-2.yaml:6-13
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       role: app
   9 │   ingress:
  10 │   - from:
  11 │       - podSelector:
  12 │           matchLabels:
  13 └             run: myblog
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-2.yaml:6-13
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       role: app
   9 │   ingress:
  10 │   - from:
  11 │       - podSelector:
  12 │           matchLabels:
  13 └             run: myblog
────────────────────────────────────────



netpol-21.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-21.yaml:6-13
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       role: app
   9 │   ingress:
  10 │   - from:
  11 │       - podSelector: 
  12 │           matchLabels:
  13 └             run: myblog
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-21.yaml:6-13
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       role: app
   9 │   ingress:
  10 │   - from:
  11 │       - podSelector: 
  12 │           matchLabels:
  13 └             run: myblog
────────────────────────────────────────



netpol-3.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-3.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels: 
  10 │       run: myblog
  11 │   ingress: 
  12 └   - {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-3.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels: 
  10 │       run: myblog
  11 │   ingress: 
  12 └   - {}
────────────────────────────────────────



netpol-4.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-4.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │   ingress:
  11 │   - from:
  12 └     - podSelector: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-4.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │   ingress:
  11 │   - from:
  12 └     - podSelector: {}
────────────────────────────────────────



netpol-5.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-5.yaml:6-13
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       run: myblog
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 └           stage: product
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-5.yaml:6-13
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       run: myblog
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 └           stage: product
────────────────────────────────────────



netpol-6.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-6.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       run: myblog
   9 │   ingress:
  10 │   - ports:
  11 │     - port: 5000
  12 │     from:
  13 │     - podSelector: 
  14 │         matchLabels:
  15 └           role: watch
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-6.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector: 
   7 │     matchLabels:
   8 │       run: myblog
   9 │   ingress:
  10 │   - ports:
  11 │     - port: 5000
  12 │     from:
  13 │     - podSelector: 
  14 │         matchLabels:
  15 └           role: watch
────────────────────────────────────────



netpol-bad.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-bad.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-bad.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────



netpol-bad1.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-bad1.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-bad1.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────



netpol-bad2.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-bad2.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-bad2.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────



netpol-bad3.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-bad3.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-bad3.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────



netpol-bad4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-bad4.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-bad4.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 │         cidr: 172.17.0.0/16
  13 │         except:
  14 └           - 172.17.1.0/24
  ..   
────────────────────────────────────────



netpol-cart-access.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-cart-access.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: cart
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-cart-access.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: cart
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────



netpol-cart-access1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-cart-access1.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: cart
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-cart-access1.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: cart
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────



netpol-cart-db-access.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-cart-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: carts-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: cart
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-cart-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: carts-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: cart
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-cart-db-access1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-cart-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: carts-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: cart
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-cart-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: carts-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: cart
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-catalogue-access.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-catalogue-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-catalogue-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-catalogue-access1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-catalogue-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-catalogue-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-catalogue-db-access.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-catalogue-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: catalogue
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-catalogue-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: catalogue
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-catalogue-db-access1.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-catalogue-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: catalogue
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-catalogue-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: catalogue-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: catalogue
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-cortex-access.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-cortex-access.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │   ingress:
  11 │     - from:
  12 │         - podSelector:
  13 │             matchLabels:
  14 └               name: cortex
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-cortex-access.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │   ingress:
  11 │     - from:
  12 │         - podSelector:
  13 │             matchLabels:
  14 └               name: cortex
────────────────────────────────────────



netpol-cortex-access1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-cortex-access1.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │   ingress:
  11 │     - from:
  12 │         - podSelector:
  13 │             matchLabels:
  14 └               name: cortex
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-cortex-access1.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │   ingress:
  11 │     - from:
  12 │         - podSelector:
  13 │             matchLabels:
  14 └               name: cortex
────────────────────────────────────────



netpol-default.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-default.yaml:8-11
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   policyTypes:
  10 │   - Ingress
  11 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-default.yaml:8-11
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   policyTypes:
  10 │   - Ingress
  11 └   - Egress
────────────────────────────────────────



netpol-default_1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-default_1.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   ingress:
  10 │   - {}
  11 │   policyTypes:
  12 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-default_1.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   ingress:
  10 │   - {}
  11 │   policyTypes:
  12 └   - Ingress
────────────────────────────────────────



netpol-default_2.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-default_2.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   egress:
  10 │   - {}
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-default_2.yaml:8-12
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   egress:
  10 │   - {}
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-default_3.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-default_3.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: infra-ingress
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-default_3.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: infra-ingress
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────



netpol-default_4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-default_4.yaml:8-23
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   egress:
  10 │   - to:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: kube-system
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           k8s-app: kube-dns
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-default_4.yaml:8-23
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   egress:
  10 │   - to:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: kube-system
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           k8s-app: kube-dns
  ..   
────────────────────────────────────────



netpol-default_5.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-default_5.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   egress:
  10 │   - to:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: infra-istio-system
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           k8s-app: istiod
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-default_5.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector: {}
   9 │   egress:
  10 │   - to:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: infra-istio-system
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           k8s-app: istiod
  ..   
────────────────────────────────────────



netpol-deny-all-ingress-and-egress.yaml (kubernetes)
====================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-deny-all-ingress-and-egress.yaml:7-10
────────────────────────────────────────
   7 ┌   podSelector: {}  # Namespaceに含まれる全てのPodを指定 
   8 │   policyTypes:  # 制限を行う通信の種類としてIngress/Egressを指定
   9 │   - Ingress
  10 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-deny-all-ingress-and-egress.yaml:7-10
────────────────────────────────────────
   7 ┌   podSelector: {}  # Namespaceに含まれる全てのPodを指定 
   8 │   policyTypes:  # 制限を行う通信の種類としてIngress/Egressを指定
   9 │   - Ingress
  10 └   - Egress
────────────────────────────────────────



netpol-egr.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-egr.yaml:7-21
────────────────────────────────────────
   7 ┌   policyTypes:
   8 │   - Egress
   9 │   egress:
  10 │   - to:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: default
  14 │     ports:
  15 └     - protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-egr.yaml:7-21
────────────────────────────────────────
   7 ┌   policyTypes:
   8 │   - Egress
   9 │   egress:
  10 │   - to:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           kubernetes.io/metadata.name: default
  14 │     ports:
  15 └     - protocol: TCP
  ..   
────────────────────────────────────────



netpol-egress.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-egress.yaml:9-37
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 │     - Egress
  12 │   egress:
  13 │     - ports:
  14 │         - protocol: TCP
  15 │           port: 443
  16 │       to:
  17 └         - ipBlock:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-egress.yaml:9-37
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 │     - Egress
  12 │   egress:
  13 │     - ports:
  14 │         - protocol: TCP
  15 │           port: 443
  16 │       to:
  17 └         - ipBlock:
  ..   
────────────────────────────────────────



netpol-fail.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-fail.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       k8s-app: nginx-app-clusterip
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-fail.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       k8s-app: nginx-app-clusterip
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────



netpol-frontend-access.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-frontend-access.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: front-end
  11 │   ingress:
  12 │     - ports:
  13 │         - protocol: TCP
  14 └           port: 8079
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-frontend-access.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: front-end
  11 │   ingress:
  12 │     - ports:
  13 │         - protocol: TCP
  14 └           port: 8079
────────────────────────────────────────



netpol-frontend-access1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-frontend-access1.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: front-end
  11 │   ingress:
  12 │     - ports:
  13 │         - protocol: TCP
  14 └           port: 8079
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-frontend-access1.yaml:8-14
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: front-end
  11 │   ingress:
  12 │     - ports:
  13 │         - protocol: TCP
  14 └           port: 8079
────────────────────────────────────────



netpol-good.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────



netpol-good1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good1.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good1.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────



netpol-good1_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good1_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good1_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good1_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good2.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good2.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good2.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────



netpol-good2_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good2_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good2_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good2_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good2_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good2_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good3.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good3.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good3.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────



netpol-good3_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good3_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good3_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good3_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good3_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good3_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good4.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good4.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good4.yaml:6-8
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 └   - Ingress
────────────────────────────────────────



netpol-good4_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good4_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good4_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good4_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good4_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good4_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good_1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good_1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       foo: bar
   9 │       app: busybox
  10 │       see: saw
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-good_2.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-good_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-good_2.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       bar: foo
   9 │       saw: see
  10 │       app: nginbox
  11 │   policyTypes:
  12 └   - Egress
────────────────────────────────────────



netpol-ing.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-ing.yaml:7-13
────────────────────────────────────────
   7 ┌   policyTypes:
   8 │   - Ingress
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 └           kubernetes.io/metadata.name: ckad-practice
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-ing.yaml:7-13
────────────────────────────────────────
   7 ┌   policyTypes:
   8 │   - Ingress
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 └           kubernetes.io/metadata.name: ckad-practice
────────────────────────────────────────



netpol-namespace-selector.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-namespace-selector.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector:
   9 │         matchLabels:
  10 │           nslabel: second
  11 │   podSelector:
  12 │     matchLabels:
  13 │       id: app1
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-namespace-selector.yaml:6-15
────────────────────────────────────────
   6 ┌   ingress:
   7 │   - from:
   8 │     - namespaceSelector:
   9 │         matchLabels:
  10 │           nslabel: second
  11 │   podSelector:
  12 │     matchLabels:
  13 │       id: app1
  14 │   policyTypes:
  15 └   - Ingress
────────────────────────────────────────



netpol-orders-access.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-orders-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-orders-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-orders-access1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-orders-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-orders-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-orders-db-access.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-orders-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-orders-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-orders-db-access1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-orders-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-orders-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: orders-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-payment-access.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-payment-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: payment
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-payment-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: payment
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-payment-access1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-payment-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: payment
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-payment-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: payment
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-rabbitmq-access.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-rabbitmq-access.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: rabbitmq
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: shipping
  16 └         - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-rabbitmq-access.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: rabbitmq
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: shipping
  16 └         - podSelector:
  ..   
────────────────────────────────────────



netpol-rabbitmq-access1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-rabbitmq-access1.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: rabbitmq
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: shipping
  16 └         - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-rabbitmq-access1.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: rabbitmq
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: shipping
  16 └         - podSelector:
  ..   
────────────────────────────────────────



netpol-shipping-access.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-shipping-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: shipping
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-shipping-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: shipping
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-shipping-access1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-shipping-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: shipping
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-shipping-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: shipping
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: orders
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-user-access.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-user-access.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-user-access.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────



netpol-user-access1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-user-access1.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-user-access1.yaml:8-21
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: front-end
  16 └         - podSelector:
  ..   
────────────────────────────────────────



netpol-user-db-access.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-user-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: user
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-user-db-access.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: user
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-user-db-access1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-user-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: user
  16 └       ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-user-db-access1.yaml:8-18
────────────────────────────────────────
   8 ┌   podSelector:
   9 │     matchLabels:
  10 │       name: user-db
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 │             matchLabels:
  15 │               name: user
  16 └       ports:
  ..   
────────────────────────────────────────



netpol-work.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol-work.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       k8s-app: nginx-app-clusterip
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol-work.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       k8s-app: nginx-app-clusterip
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────



netpol.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol.yaml:7-17
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: app
  10 │   policyTypes:
  11 │   - Egress
  12 │   egress:
  13 │   - to:
  14 │     - ipBlock:
  15 └         cidr: 0.0.0.0/0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol.yaml:7-17
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: app
  10 │   policyTypes:
  11 │   - Egress
  12 │   egress:
  13 │   - to:
  14 │     - ipBlock:
  15 └         cidr: 0.0.0.0/0
  ..   
────────────────────────────────────────



netpol1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol1.yaml:7-17
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: app
  10 │   policyTypes:
  11 │   - Egress
  12 │   egress:
  13 │   - to:
  14 │     - ipBlock:
  15 └         cidr: 0.0.0.0/0
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol1.yaml:7-17
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: app
  10 │   policyTypes:
  11 │   - Egress
  12 │   egress:
  13 │   - to:
  14 │     - ipBlock:
  15 └         cidr: 0.0.0.0/0
  ..   
────────────────────────────────────────



netpol10_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol10_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol10_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol10_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol10_3.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol10_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol10_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol11.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol11.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol11.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────



netpol12_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol12_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol12_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol12_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol12_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol12_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol12_3.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol12_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol12_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol13.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol13.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol13.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────



netpol14_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol14_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol14_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol14_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol14_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol14_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol14_3.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol14_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol14_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol15.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol15.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol15.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────



netpol16_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol16_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol16_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol16_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol16_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol16_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol16_3.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol16_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol16_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol1_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol1_1.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Egress
  10 │   egress:
  11 │   - to:
  12 │     - namespaceSelector: {}
  13 └       podSelector: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol1_1.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Egress
  10 │   egress:
  11 │   - to:
  12 │     - namespaceSelector: {}
  13 └       podSelector: {}
────────────────────────────────────────



netpol1_2.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol1_2.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 └           namespace: namespace-web
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol1_2.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 └           namespace: namespace-web
────────────────────────────────────────



netpol2.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol2.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: database
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │   - from:
  13 │     - podSelector:
  14 │         matchLabels:
  15 └           app: api
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol2.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: database
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │   - from:
  13 │     - podSelector:
  14 │         matchLabels:
  15 └           app: api
────────────────────────────────────────



netpol25.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol25.yaml:7-21
────────────────────────────────────────
   7 ┌   podSelector: {}                 #It Means all pods of dev namespace
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 │           name: test             #Must gave this label to "test" namesapce first
  15 └     ports:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol25.yaml:7-21
────────────────────────────────────────
   7 ┌   podSelector: {}                 #It Means all pods of dev namespace
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 │           name: test             #Must gave this label to "test" namesapce first
  15 └     ports:
  ..   
────────────────────────────────────────



netpol2_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol2_1.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       name: seaweedfs
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │   - from:
  13 │     - podSelector:
  14 │         matchLabels:
  15 └           app: seaweed-proxy
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol2_1.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       name: seaweedfs
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │   - from:
  13 │     - podSelector:
  14 │         matchLabels:
  15 └           app: seaweed-proxy
────────────────────────────────────────



netpol2_2.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol2_2.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: seaweed-proxy
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │   - from:
  13 │     - podSelector:
  14 │         matchLabels:
  15 └           app: api
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol2_2.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: seaweed-proxy
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │   - from:
  13 │     - podSelector:
  14 │         matchLabels:
  15 └           app: api
────────────────────────────────────────



netpol3.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol3.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       run: source-app
  10 │   policyTypes:
  11 │     - Ingress
  12 │   ingress:
  13 │     - from:
  14 │         - namespaceSelector:
  15 └             matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol3.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       run: source-app
  10 │   policyTypes:
  11 │     - Ingress
  12 │   ingress:
  13 │     - from:
  14 │         - namespaceSelector:
  15 └             matchLabels:
  ..   
────────────────────────────────────────



netpol7.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol7.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol7.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────



netpol8_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol8_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol8_1.yaml:9-13
────────────────────────────────────────
   9 ┌   podSelector:
  10 │     matchLabels:
  11 │       app: nginx
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol8_2.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol8_2.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       foo: bar
  10 │       app: busybox
  11 │       see: saw
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol8_3.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol8_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol8_3.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       bar: foo
  10 │       saw: see
  11 │       app: nginbox
  12 │   policyTypes:
  13 └   - Egress
────────────────────────────────────────



netpol9.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol9.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol9.yaml:9-11
────────────────────────────────────────
   9 ┌   podSelector: {}
  10 │   policyTypes:
  11 └   - Egress
────────────────────────────────────────



netpol_1.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol_1.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Egress
  10 │   egress:
  11 │   - to:
  12 │     - namespaceSelector: {}
  13 └       podSelector: {}
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol_1.yaml:7-13
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Egress
  10 │   egress:
  11 │   - to:
  12 │     - namespaceSelector: {}
  13 └       podSelector: {}
────────────────────────────────────────



netpol_2.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpol_2.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 └           namespace: namespace-web
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpol_2.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 │   - Ingress
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 └           namespace: namespace-web
────────────────────────────────────────



netpolicy.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────



netpolicy1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy1.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy1.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────



netpolicy1_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netpolicy1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netpolicy1_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netpolicy1_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



netpolicy1_2.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy1_2.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 └     targetPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy1_2.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 └     targetPort: 80
────────────────────────────────────────



netpolicy1_3.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy1_3.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy1_3.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────



netpolicy_1.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netpolicy_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netpolicy_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netpolicy_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



netpolicy_2.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy_2.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 └     targetPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy_2.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 └     targetPort: 80
────────────────────────────────────────



netpolicy_3.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpolicy_3.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpolicy_3.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - ipBlock:
  ..   
────────────────────────────────────────



netpols.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpols.yaml:7-25
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpols.yaml:7-25
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   policyTypes:
  11 │   - Ingress
  12 │   - Egress
  13 │   ingress:
  14 │   - from:
  15 └     - podSelector:
  ..   
────────────────────────────────────────



netpols_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpols_1.yaml:7-16
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       ingress: block
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           app: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpols_1.yaml:7-16
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       ingress: block
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 │         matchLabels:
  16 └           app: nginx
────────────────────────────────────────



netpols_2.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpols_2.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       pod: '2'
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpols_2.yaml:7-19
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       pod: '2'
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────



netpols_3.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netpols_3.yaml:7-24
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       pod: '3'
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netpols_3.yaml:7-24
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       pod: '3'
  10 │   policyTypes:
  11 │   - Ingress
  12 │   ingress:
  13 │   - from:
  14 │     - podSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────



netshoot-deployment.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netshoot-container' of Deployment 'netshoot' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netshoot-container' of Deployment 'netshoot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netshoot-container' of 'deployment' 'netshoot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netshoot-container' of Deployment 'netshoot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netshoot-container' of Deployment 'netshoot' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netshoot-container' of Deployment 'netshoot' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netshoot-container' of Deployment 'netshoot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netshoot-container' of Deployment 'netshoot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netshoot-container' of Deployment 'netshoot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netshoot-container' of Deployment 'netshoot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netshoot-deployment.yaml:6-28
────────────────────────────────────────
   6 ┌   strategy:
   7 │     type: RollingUpdate
   8 │     rollingUpdate:
   9 │       maxUnavailable: 1
  10 │       maxSurge: 1
  11 │   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 └       app: netshoot
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netshoot-deployment.yaml:6-28
────────────────────────────────────────
   6 ┌   strategy:
   7 │     type: RollingUpdate
   8 │     rollingUpdate:
   9 │       maxUnavailable: 1
  10 │       maxSurge: 1
  11 │   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 └       app: netshoot
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netshoot-container" of deployment "netshoot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment netshoot in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netshoot-deployment.yaml:4
────────────────────────────────────────
   4 [   name: netshoot
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netshoot in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netshoot in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot-deployment.yaml:20-28
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netshoot-container in deployment netshoot (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netshoot-deployment.yaml:21-28
────────────────────────────────────────
  21 ┌       - name: netshoot-container
  22 │         image: nicolaka/netshoot
  23 │         command: ["/bin/bash"]
  24 │         args: ["-c", "while true; do ping localhost; sleep 60;done"]
  25 │         resources:
  26 │           limits:
  27 │             memory: "128Mi"
  28 └             cpu: "500m"
────────────────────────────────────────



netshoot.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'edc-netshoot' of Pod 'edc-netshoot' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'edc-netshoot' of Pod 'edc-netshoot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'edc-netshoot' of 'pod' 'edc-netshoot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'edc-netshoot' of Pod 'edc-netshoot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'edc-netshoot' of Pod 'edc-netshoot' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'edc-netshoot' of Pod 'edc-netshoot' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'edc-netshoot' of Pod 'edc-netshoot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'edc-netshoot' of Pod 'edc-netshoot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'edc-netshoot' of Pod 'edc-netshoot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'edc-netshoot' of Pod 'edc-netshoot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netshoot.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netshoot.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "edc-netshoot" of pod "edc-netshoot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod edc-netshoot in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netshoot.yaml:6
────────────────────────────────────────
   6 [   name: edc-netshoot
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container edc-netshoot in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod edc-netshoot in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container edc-netshoot in pod edc-netshoot (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netshoot.yaml:9-16
────────────────────────────────────────
   9 ┌     - name: edc-netshoot
  10 │       image: nicolaka/netshoot
  11 │       command: ["/bin/bash", "-c", "--"]
  12 │       args: ["while true; do sleep 30; done;"]
  13 │       resources:
  14 │         limits:
  15 │           memory: "128Mi"
  16 └           cpu: "50m"
────────────────────────────────────────



netshoot1.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netshoot' of Pod 'netshoot' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netshoot' of Pod 'netshoot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netshoot' of 'pod' 'netshoot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netshoot' of Pod 'netshoot' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netshoot' of Pod 'netshoot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netshoot' of Pod 'netshoot' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netshoot' of Pod 'netshoot' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netshoot' of Pod 'netshoot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netshoot' of Pod 'netshoot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netshoot' of Pod 'netshoot' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netshoot' of Pod 'netshoot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netshoot' of Pod 'netshoot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netshoot1.yaml:9-16
────────────────────────────────────────
   9 ┌   restartPolicy: Always
  10 │   containers:
  11 │     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netshoot1.yaml:9-16
────────────────────────────────────────
   9 ┌   restartPolicy: Always
  10 │   containers:
  11 │     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netshoot" of pod "netshoot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod netshoot in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netshoot1.yaml:5-7
────────────────────────────────────────
   5 ┌   name: netshoot
   6 │   labels:
   7 └     app: netshoot
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netshoot in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod netshoot in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot1.yaml:9-16
────────────────────────────────────────
   9 ┌   restartPolicy: Always
  10 │   containers:
  11 │     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netshoot in pod netshoot (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netshoot1.yaml:11-16
────────────────────────────────────────
  11 ┌     - name: netshoot
  12 │       image: nicolaka/netshoot
  13 │       imagePullPolicy: IfNotPresent
  14 │       command:
  15 │         - sleep
  16 └         - infinity
────────────────────────────────────────



netshoot2.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'netshoot' of DaemonSet 'netshoot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netshoot' of 'daemonset' 'netshoot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netshoot' of DaemonSet 'netshoot' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netshoot' of DaemonSet 'netshoot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netshoot' of DaemonSet 'netshoot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netshoot' of DaemonSet 'netshoot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netshoot' of DaemonSet 'netshoot' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netshoot' of DaemonSet 'netshoot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netshoot' of DaemonSet 'netshoot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netshoot2.yaml:9-25
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: netshoot
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netshoot
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netshoot2.yaml:9-25
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: netshoot
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netshoot
  16 │     spec:
  17 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netshoot" of daemonset "netshoot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset netshoot in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netshoot2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: netshoot
   5 │   namespace: default
   6 │   labels:
   7 └     app: netshoot
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset netshoot in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot2.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netshoot in daemonset netshoot (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netshoot2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: "docker.io/nicolaka/netshoot:v0.12"
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           allowPrivilegeEscalation: false
  23 │           readOnlyRootFilesystem: true
  24 │         command: ["/bin/bash"]
  25 └         args: ["-c", "while true; do ping localhost; sleep 60;done"]
────────────────────────────────────────



netshoot3.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netshoot' of Deployment 'netshoot' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netshoot' of Deployment 'netshoot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netshoot' of 'deployment' 'netshoot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netshoot' of Deployment 'netshoot' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netshoot' of Deployment 'netshoot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netshoot' of Deployment 'netshoot' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netshoot' of Deployment 'netshoot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netshoot' of Deployment 'netshoot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netshoot' of Deployment 'netshoot' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netshoot' of Deployment 'netshoot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netshoot' of Deployment 'netshoot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netshoot3.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: netshoot
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netshoot
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netshoot3.yaml:8-20
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: netshoot
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: netshoot
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netshoot" of deployment "netshoot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment netshoot in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netshoot3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: netshoot
   5 │   labels:
   6 └     app: netshoot
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netshoot in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netshoot in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot3.yaml:17-20
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netshoot in deployment netshoot (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netshoot3.yaml:18-20
────────────────────────────────────────
  18 ┌       - name: netshoot
  19 │         image: nicolaka/netshoot:v0.9
  20 └         command: ["sleep", "infinite"]
────────────────────────────────────────



netshoot4.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 14, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'netshoot-3' of Pod 'netshoot-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'netshoot-3' of Pod 'netshoot-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'netshoot-3' of 'pod' 'netshoot-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'netshoot-3' of Pod 'netshoot-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'netshoot-3' of Pod 'netshoot-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'netshoot-3' of Pod 'netshoot-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'netshoot-3' of Pod 'netshoot-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'netshoot-3' of Pod 'netshoot-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'netshoot-3' of Pod 'netshoot-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'netshoot-3' of Pod 'netshoot-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'netshoot-3' of Pod 'netshoot-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'netshoot-3' of Pod 'netshoot-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0028 (LOW): Pod 'netshoot-3' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 netshoot4.yaml:19-34
────────────────────────────────────────
  19 ┌   nodeSelector:
  20 │     openebs.io/nodeid: control-3
  21 │   volumes:
  22 │     - name: data
  23 │       nfs:
  24 │         server: 192.168.1.27
  25 │         path: /mnt/user/home-cluster-nfs
  26 │   containers:
  27 └     - name: *name
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 netshoot4.yaml:19-34
────────────────────────────────────────
  19 ┌   nodeSelector:
  20 │     openebs.io/nodeid: control-3
  21 │   volumes:
  22 │     - name: data
  23 │       nfs:
  24 │         server: 192.168.1.27
  25 │         path: /mnt/user/home-cluster-nfs
  26 │   containers:
  27 └     - name: *name
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 netshoot4.yaml:19-34
────────────────────────────────────────
  19 ┌   nodeSelector:
  20 │     openebs.io/nodeid: control-3
  21 │   volumes:
  22 │     - name: data
  23 │       nfs:
  24 │         server: 192.168.1.27
  25 │         path: /mnt/user/home-cluster-nfs
  26 │   containers:
  27 └     - name: *name
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "netshoot-3" of pod "netshoot-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod netshoot-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 netshoot4.yaml:17
────────────────────────────────────────
  17 [   name: &name netshoot-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netshoot-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod netshoot-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 netshoot4.yaml:19-34
────────────────────────────────────────
  19 ┌   nodeSelector:
  20 │     openebs.io/nodeid: control-3
  21 │   volumes:
  22 │     - name: data
  23 │       nfs:
  24 │         server: 192.168.1.27
  25 │         path: /mnt/user/home-cluster-nfs
  26 │   containers:
  27 └     - name: *name
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container netshoot-3 in pod netshoot-3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 netshoot4.yaml:27-34
────────────────────────────────────────
  27 ┌     - name: *name
  28 │       image: nicolaka/netshoot
  29 │       args:
  30 │         - sleep
  31 │         - "1000000"
  32 │       volumeMounts:
  33 │         - mountPath: "/data"
  34 └           name: data
────────────────────────────────────────



nettool.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu' of Pod 'ubuntu' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu' of 'pod' 'ubuntu' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ubuntu' of Pod 'ubuntu' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nettool.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nettool.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu" of pod "ubuntu" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ubuntu in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nettool.yaml:4
────────────────────────────────────────
   4 [   name: ubuntu
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ubuntu in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nettool.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ubuntu in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nettool.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────



nettool1.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu' of Pod 'ubuntu' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu' of 'pod' 'ubuntu' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ubuntu' of Pod 'ubuntu' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu' of Pod 'ubuntu' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 nettool1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 nettool1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu" of pod "ubuntu" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ubuntu in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 nettool1.yaml:4
────────────────────────────────────────
   4 [   name: ubuntu
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ubuntu in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nettool1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ubuntu in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 nettool1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ubuntu
   8 │     image: ubuntu:latest
   9 │     command: [ "sleep" ]
  10 └     args: [ "infinity" ]
────────────────────────────────────────



network-jsplayground.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-jsplayground.yaml:7-29
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: jsplayground
  10 │       component: runner
  11 │   policyTypes:
  12 │   - Egress
  13 │   egress:
  14 │   - to:
  15 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-jsplayground.yaml:7-29
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: jsplayground
  10 │       component: runner
  11 │   policyTypes:
  12 │   - Egress
  13 │   egress:
  14 │   - to:
  15 └     - podSelector:
  ..   
────────────────────────────────────────



network-jsplayground_1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-jsplayground_1.yaml:7-21
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: jsplayground
  10 │       component: runner
  11 │   policyTypes:
  12 │   - Ingress
  13 │   ingress:
  14 │   - from:
  15 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-jsplayground_1.yaml:7-21
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: jsplayground
  10 │       component: runner
  11 │   policyTypes:
  12 │   - Ingress
  13 │   ingress:
  14 │   - from:
  15 └     - podSelector:
  ..   
────────────────────────────────────────



network-multitool.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-multitool.yaml:8-20
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app.kubernetes.io/name: network-multitool
  11 │   ports:
  12 │   - name: http
  13 │     port: 80
  14 │     targetPort: http
  15 │   - name: https
  16 └     port: 443
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-multitool.yaml:8-20
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app.kubernetes.io/name: network-multitool
  11 │   ports:
  12 │   - name: http
  13 │     port: 80
  14 │     targetPort: http
  15 │   - name: https
  16 └     port: 443
  ..   
────────────────────────────────────────



network-multitool1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-multitool1.yaml:8-20
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app.kubernetes.io/name: network-multitool
  11 │   ports:
  12 │   - name: http
  13 │     port: 80
  14 │     targetPort: http
  15 │   - name: https
  16 └     port: 443
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-multitool1.yaml:8-20
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app.kubernetes.io/name: network-multitool
  11 │   ports:
  12 │   - name: http
  13 │     port: 80
  14 │     targetPort: http
  15 │   - name: https
  16 └     port: 443
  ..   
────────────────────────────────────────



network-multitool1_1.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'network-multitool' of 'daemonset' 'network-multitool' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-multitool1_1.yaml:8-34
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: network-multitool
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app.kubernetes.io/name: network-multitool
  15 │     spec:
  16 └       tolerations:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-multitool1_1.yaml:8-34
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: network-multitool
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app.kubernetes.io/name: network-multitool
  15 │     spec:
  16 └       tolerations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "network-multitool" of daemonset "network-multitool" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset network-multitool in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 network-multitool1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: network-multitool
   5 │   labels:
   6 └     app.kubernetes.io/name: network-multitool
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): daemonset network-multitool in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container network-multitool in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset network-multitool in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-multitool1_1.yaml:16-34
────────────────────────────────────────
  16 ┌       tolerations:
  17 │       - key: node-role.kubernetes.io/control-plane
  18 │         operator: Exists
  19 │         effect: NoSchedule
  20 │       - key: node-role.kubernetes.io/master
  21 │         operator: Exists
  22 │         effect: NoSchedule
  23 │       containers:
  24 └       - name: network-multitool
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container network-multitool in daemonset network-multitool (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 network-multitool1_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────



network-multitool_1.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'network-multitool' of 'daemonset' 'network-multitool' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'network-multitool' of DaemonSet 'network-multitool' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-multitool_1.yaml:8-34
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: network-multitool
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app.kubernetes.io/name: network-multitool
  15 │     spec:
  16 └       tolerations:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-multitool_1.yaml:8-34
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: network-multitool
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app.kubernetes.io/name: network-multitool
  15 │     spec:
  16 └       tolerations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "network-multitool" of daemonset "network-multitool" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset network-multitool in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 network-multitool_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: network-multitool
   5 │   labels:
   6 └     app.kubernetes.io/name: network-multitool
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): daemonset network-multitool in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container network-multitool in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset network-multitool in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 network-multitool_1.yaml:16-34
────────────────────────────────────────
  16 ┌       tolerations:
  17 │       - key: node-role.kubernetes.io/control-plane
  18 │         operator: Exists
  19 │         effect: NoSchedule
  20 │       - key: node-role.kubernetes.io/master
  21 │         operator: Exists
  22 │         effect: NoSchedule
  23 │       containers:
  24 └       - name: network-multitool
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container network-multitool in daemonset network-multitool (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 network-multitool_1.yaml:24-34
────────────────────────────────────────
  24 ┌       - name: network-multitool
  25 │         image: wbitt/network-multitool:extra
  26 │         imagePullPolicy: Always
  27 │         ports:
  28 │         - name: http
  29 │           containerPort: 80
  30 │         - name: https
  31 │           containerPort: 443
  32 └         - name: iperf
  ..   
────────────────────────────────────────



network-observability-svc.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-observability-svc.yaml:6-15
────────────────────────────────────────
   6 ┌   ports:
   7 │     # control which ports we enable via which ports we define here
   8 │     - name: hubble
   9 │       protocol: TCP
  10 │       port: 9965
  11 │       targetPort: 9965
  12 │     - name: retina
  13 │       protocol: TCP
  14 │       port: 10093
  15 └       targetPort: 10093
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-observability-svc.yaml:6-15
────────────────────────────────────────
   6 ┌   ports:
   7 │     # control which ports we enable via which ports we define here
   8 │     - name: hubble
   9 │       protocol: TCP
  10 │       port: 9965
  11 │       targetPort: 9965
  12 │     - name: retina
  13 │       protocol: TCP
  14 │       port: 10093
  15 └       targetPort: 10093
────────────────────────────────────────



network-observability-svc1.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-observability-svc1.yaml:6-15
────────────────────────────────────────
   6 ┌   ports:
   7 │     # control which ports we enable via which ports we define here
   8 │     - name: hubble
   9 │       protocol: TCP
  10 │       port: 9965
  11 │       targetPort: 9965
  12 │     - name: retina
  13 │       protocol: TCP
  14 │       port: 10093
  15 └       targetPort: 10093
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-observability-svc1.yaml:6-15
────────────────────────────────────────
   6 ┌   ports:
   7 │     # control which ports we enable via which ports we define here
   8 │     - name: hubble
   9 │       protocol: TCP
  10 │       port: 9965
  11 │       targetPort: 9965
  12 │     - name: retina
  13 │       protocol: TCP
  14 │       port: 10093
  15 └       targetPort: 10093
────────────────────────────────────────



network-policies.deployment.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies.deployment.yaml:6-9
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Ingress
   9 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies.deployment.yaml:6-9
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Ingress
   9 └   - Egress
────────────────────────────────────────



network-policies.deployment_1.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies.deployment_1.yaml:6-20
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchExpressions:
   8 │     - key: app
   9 │       operator: In
  10 │       values:
  11 │       - crypto-wrapper
  12 │       - simple-server
  13 │   ingress:
  14 └   - from:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies.deployment_1.yaml:6-20
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchExpressions:
   8 │     - key: app
   9 │       operator: In
  10 │       values:
  11 │       - crypto-wrapper
  12 │       - simple-server
  13 │   ingress:
  14 └   - from:
  ..   
────────────────────────────────────────



network-policies.deployment_2.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies.deployment_2.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   egress:
  10 │   - to:
  11 │     - ipBlock:
  12 │         cidr: 0.0.0.0/0
  13 │         except:
  14 └         - 10.0.0.0/8
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies.deployment_2.yaml:6-23
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   policyTypes:
   8 │   - Egress
   9 │   egress:
  10 │   - to:
  11 │     - ipBlock:
  12 │         cidr: 0.0.0.0/0
  13 │         except:
  14 └         - 10.0.0.0/8
  ..   
────────────────────────────────────────



network-policies.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies.yaml:8-15
────────────────────────────────────────
   8 ┌   policyTypes:
   9 │     - Ingress
  10 │   ingress:
  11 │     - from:
  12 │         - namespaceSelector: {}
  13 │   podSelector:
  14 │     matchLabels:
  15 └       app.kubernetes.io/name: weave-gitops
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies.yaml:8-15
────────────────────────────────────────
   8 ┌   policyTypes:
   9 │     - Ingress
  10 │   ingress:
  11 │     - from:
  12 │         - namespaceSelector: {}
  13 │   podSelector:
  14 │     matchLabels:
  15 └       app.kubernetes.io/name: weave-gitops
────────────────────────────────────────



network-policies1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies1.yaml:8-15
────────────────────────────────────────
   8 ┌   policyTypes:
   9 │     - Ingress
  10 │   ingress:
  11 │     - from:
  12 │         - namespaceSelector: {}
  13 │   podSelector:
  14 │     matchLabels:
  15 └       app.kubernetes.io/name: weave-gitops
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies1.yaml:8-15
────────────────────────────────────────
   8 ┌   policyTypes:
   9 │     - Ingress
  10 │   ingress:
  11 │     - from:
  12 │         - namespaceSelector: {}
  13 │   podSelector:
  14 │     matchLabels:
  15 └       app.kubernetes.io/name: weave-gitops
────────────────────────────────────────



network-policies2.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies2.yaml:7-39
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: apod-web
  10 │   ingress:
  11 │   - {}
  12 │   egress:
  13 │   - to:
  14 │     - namespaceSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies2.yaml:7-39
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: apod-web
  10 │   ingress:
  11 │   - {}
  12 │   egress:
  13 │   - to:
  14 │     - namespaceSelector:
  15 └         matchLabels:
  ..   
────────────────────────────────────────



network-policies2_1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies2_1.yaml:7-40
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: apod-api
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 │           kubernetes.io/metadata.name: apod
  15 └       podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies2_1.yaml:7-40
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: apod-api
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 │           kubernetes.io/metadata.name: apod
  15 └       podSelector:
  ..   
────────────────────────────────────────



network-policies2_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies2_2.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: apod-log
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 │           kubernetes.io/metadata.name: apod
  15 └       podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies2_2.yaml:7-20
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: apod-log
  10 │   ingress:
  11 │   - from:
  12 │     - namespaceSelector:
  13 │         matchLabels:
  14 │           kubernetes.io/metadata.name: apod
  15 └       podSelector:
  ..   
────────────────────────────────────────



network-policies3.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policies3.yaml:7-22
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: ping-me
  10 │   ingress:
  11 │     - from:
  12 │         - namespaceSelector: {}
  13 │           podSelector:
  14 │             matchLabels:
  15 └               app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policies3.yaml:7-22
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: ping-me
  10 │   ingress:
  11 │     - from:
  12 │         - namespaceSelector: {}
  13 │           podSelector:
  14 │             matchLabels:
  15 └               app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────



network-policy-adservice.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice1.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice1.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice1.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice2.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice2.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice2.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice3.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice3.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice3.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice4.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice4.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice4.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice5.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice5.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice5.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice6.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice6.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice6.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice7.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice7.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice7.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-adservice8.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-adservice8.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-adservice8.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: adservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-allow-all-ingress.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-allow-all-ingress.yaml:6-10
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   ingress:
   8 │   - {}
   9 │   policyTypes:
  10 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-allow-all-ingress.yaml:6-10
────────────────────────────────────────
   6 ┌   podSelector: {}
   7 │   ingress:
   8 │   - {}
   9 │   policyTypes:
  10 └   - Ingress
────────────────────────────────────────



network-policy-allows-labels.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-allows-labels.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   ingress:
  11 │   - from:
  12 │     - podSelector:
  13 │         matchLabels:
  14 └           app: test
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-allows-labels.yaml:7-14
────────────────────────────────────────
   7 ┌   podSelector:
   8 │     matchLabels:
   9 │       app: nginx
  10 │   ingress:
  11 │   - from:
  12 │     - podSelector:
  13 │         matchLabels:
  14 └           app: test
────────────────────────────────────────



network-policy-cart.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cart.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart 
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           tenant: manning
  14 │     ports:
  15 └     - port: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cart.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart 
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           tenant: manning
  14 │     ports:
  15 └     - port: 80
────────────────────────────────────────



network-policy-cart1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cart1.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart 
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           tenant: manning
  14 │     ports:
  15 └     - port: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cart1.yaml:6-15
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart 
   9 │   ingress:
  10 │   - from:
  11 │     - namespaceSelector:
  12 │         matchLabels:
  13 │           tenant: manning
  14 │     ports:
  15 └     - port: 80
────────────────────────────────────────



network-policy-cartservice.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice1.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice1.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice1.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice2.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice2.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice2.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice3.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice3.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice3.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice4.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice4.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice4.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice5.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice5.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice5.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice6.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice6.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice6.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice7.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice7.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice7.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cartservice8.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cartservice8.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cartservice8.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: cartservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice1.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice1.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice1.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice2.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice2.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice2.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice3.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice3.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice3.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice4.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice4.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice4.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice5.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice5.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice5.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice6.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice6.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice6.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice7.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice7.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice7.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-checkoutservice8.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-checkoutservice8.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-checkoutservice8.yaml:20-35
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: checkoutservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-cidr.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cidr.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 └         cidr: 192.168.1.0/24
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cidr.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 └         cidr: 192.168.1.0/24
────────────────────────────────────────



network-policy-cidr1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-cidr1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 └         cidr: 192.168.1.0/24
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-cidr1.yaml:6-12
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       app: shopping-cart
   9 │   ingress:
  10 │   - from:
  11 │     - ipBlock:
  12 └         cidr: 192.168.1.0/24
────────────────────────────────────────



network-policy-currencyservice.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice1.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice1.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice1.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice2.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice2.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice2.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice3.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice3.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice3.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice4.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice4.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice4.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice5.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice5.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice5.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice6.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice6.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice6.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice7.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice7.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice7.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-currencyservice8.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-currencyservice8.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-currencyservice8.yaml:20-38
────────────────────────────────────────
  20 ┌   podSelector:
  21 │     matchLabels:
  22 │       app: currencyservice
  23 │   policyTypes:
  24 │   - Ingress
  25 │   - Egress
  26 │   ingress:
  27 │   - from:
  28 └     - podSelector:
  ..   
────────────────────────────────────────



network-policy-default-deny.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-default-deny.yaml:6
────────────────────────────────────────
   6 [   podSelector:
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-default-deny.yaml:6
────────────────────────────────────────
   6 [   podSelector:
────────────────────────────────────────



network-policy-default-deny1.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-default-deny1.yaml:6
────────────────────────────────────────
   6 [   podSelector:
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-default-deny1.yaml:6
────────────────────────────────────────
   6 [   podSelector:
────────────────────────────────────────



network-policy-definition.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-definition.yaml:6-20
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       role: db
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 └             matchLabels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-definition.yaml:6-20
────────────────────────────────────────
   6 ┌   podSelector:
   7 │     matchLabels:
   8 │       role: db
   9 │   policyTypes:
  10 │   - Ingress
  11 │   ingress:
  12 │     - from:
  13 │         - podSelector:
  14 └             matchLabels:
  ..   
────────────────────────────────────────



network-policy-deny-all.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────



network-policy-deny-all1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all1.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all1.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────



network-policy-deny-all2.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all2.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all2.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────



network-policy-deny-all3.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all3.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all3.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────



network-policy-deny-all4.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all4.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all4.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────



network-policy-deny-all5.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all5.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all5.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────



network-policy-deny-all6.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all6.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all6.yaml:20-23
────────────────────────────────────────
  20 ┌   podSelector: {}
  21 │   policyTypes:
  22 │   - Ingress
  23 └   - Egress
────────────────────────────────────────



network-policy-deny-all7.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 network-policy-deny-all7.yaml:7-9
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 └   - Ingress
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 network-policy-deny-all7.yaml:7-9
────────────────────────────────────────
   7 ┌   podSelector: {}
   8 │   policyTypes:
   9 └   - Ingress
────────────────────────────────────────


