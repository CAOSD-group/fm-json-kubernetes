
Report Summary

┌─────────────────────────────────────┬────────────┬───────────────────┐
│               Target                │    Type    │ Misconfigurations │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ Comments1.yaml                      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ Common59.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ Common59_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ Common59_2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ Common59_3.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ Common59_4.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coffee.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coffee1.yaml                        │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coffee1_1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coffee_1.yaml                       │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coffee_2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coffeeshop-deployment.yaml          │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coffeeshop-service.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-deployment.yaml               │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-deployment1.yaml              │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-11.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-eks-com-classe.yaml   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-eks-com-classe1.yaml  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-flask-redis.yaml      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-flask-redis1.yaml     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-workaround.yaml       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-ingress-workaround1.yaml      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-service.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ cofre-service1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend-ingress-ssl.yaml       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-cm-files.yaml         │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-cm-files1.yaml        │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-cm.yaml               │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-cm1.yaml              │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-deployment.yaml       │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-deployment1.yaml      │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-deployment2.yaml      │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-deployment3.yaml      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-deployment4.yaml      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-ingress.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-ingress1.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-ingress2.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-pvc-staticfiles.yaml  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-pvc-staticfiles1.yaml │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-pvc.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-pvc1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-secrets.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend1-secrets1.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend2-deployment.yaml       │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend2-deployment1.yaml      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-backend2-deployment2.yaml      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-deployment.yaml       │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-deployment1.yaml      │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-deployment2.yaml      │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-deployment3.yaml      │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-deployment4.yaml      │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-deployment5.yaml      │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-deployment6.yaml      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-hpa.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-ingress-ssl.yaml      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-ingress.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-ingress1.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-ingress2.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-ingress3.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-patch.yaml            │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-patch1.yaml           │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-role-binding.yaml     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ coit-frontend-sa.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collabora-secrets.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collaboration.yaml                  │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collaboration_2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collaboration_3.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collect-headless-service.yaml       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collect-service.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collection.yaml                     │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collection_1.yaml                   │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collection_2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collection_4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collection_5.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collection_6.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collections-service.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collections.yaml                    │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collector-daemonset.yaml            │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collector-deployment.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collector-deployment_1.yaml         │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collector-deployment_2.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collectord-cr.yaml                  │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collectord-crb.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collectord-deploy-addon.yaml        │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collectord-ds-master.yaml           │ kubernetes │        22         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collectord-ds.yaml                  │ kubernetes │        22         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collectord-pc.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ collectord-sa.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ color-app.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ colors-ingress-development.yaml     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ colors-ingress-development1.yaml    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ colors-ingress-staging.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ colors-ingress-staging1.yaml        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ colors-ingress.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ colors-ingress1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ colors-ingress2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ com-volume.yaml                     │ kubernetes │        35         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ com-volume1.yaml                    │ kubernetes │        35         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ com-volume2.yaml                    │ kubernetes │        35         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ com.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined1_1.yaml                    │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_1.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_10.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_11.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_12.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_2.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_3.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_4.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_5.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_6.yaml          │ kubernetes │        16         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_7.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_8.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ combined_deployment_9.yaml          │ kubernetes │        13         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ command-and-args.yaml               │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ command-cont.yaml                   │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ command-demo.yaml                   │ kubernetes │        16         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ command.yaml                        │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commandArgument.yaml                │ kubernetes │        16         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-clusterIP.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-clusterip-service.yaml     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl.yaml                  │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl1.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl10.yaml                │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl10_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl11.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl11_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl12.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl12_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl13.yaml                │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl13_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl14.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl14_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl1_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl2.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl2_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl3.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl3_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl4.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl4_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl5.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl5_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl6.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl6_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl7.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl8.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl8_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl9.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl9_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-depl_1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-deployment.yaml            │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-service.yaml               │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands-service_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commands1.yaml                      │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comment-mongo-deployment.yaml       │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comment-mongo-deployment_1.yaml     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comment-mongo-deployment_2.yaml     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comment-service-deploy.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comment-service-deploy_1.yaml       │ kubernetes │        16         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comment-service-deployment.yaml     │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comment-service-deployment_1.yaml   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-db-depl.yaml               │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-db-depl_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-db-depl_2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl.yaml                  │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl1.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl10.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl10_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl11.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl11_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl12.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl12_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl13.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl13_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl14.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl14_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl15.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl15_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl16.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl16_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl17.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl17_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl18.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl18_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl19.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl19_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl1_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl2.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl20.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl20_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl21.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl21_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl22.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl22_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl23.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl23_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl24.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl24_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl25.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl25_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl26.yaml                │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl26_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl26_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl27.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl27_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl28.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl28_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl29.yaml                │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl29_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl2_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl3.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl3_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl4.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl4_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl5.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl5_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl6.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl6_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl7.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl7_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl8.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl8_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl9.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl9_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-depl_1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-deployment.yaml            │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-deployment1.yaml           │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-deployment1_1.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments-deployment_1.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments.k8s.yaml                   │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments.k8s_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments.yaml                       │ kubernetes │        53         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments_delp.yaml                  │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ comments_delp_1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commitstatus_editor_role.yaml       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ commitstatus_viewer_role.yaml       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ committer-role.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-app.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-app_1.yaml                   │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-app_2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-config.yaml                  │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-config_1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-configmap.yaml               │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-external.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-external_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-external_2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-external_3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-external_4.yaml              │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-scripts-cm2.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-scripts-cm3.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-scripts-cm4.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-scripts-cm5.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common-service-maps.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_10.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_11.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_12.yaml                    │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_13.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_14.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_15.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_16.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_17.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_18.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_19.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_2.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_20.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_21.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_22.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_23.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_24.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_25.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_26.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_27.yaml                    │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_28.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_29.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_3.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_30.yaml                    │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_31.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_32.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_33.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_34.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_35.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_36.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_37.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_38.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_39.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_4.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_40.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_41.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_42.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_43.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_44.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_45.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_46.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_47.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_48.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_49.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_5.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_50.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_51.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_52.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_6.yaml                     │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_7.yaml                     │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_8.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common61_9.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common67.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_10.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_11.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_12.yaml                    │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_13.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_14.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_15.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_16.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_17.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_18.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_19.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_2.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_20.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_21.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_22.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_23.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_24.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_25.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_26.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_27.yaml                    │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_28.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_29.yaml                    │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_3.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_30.yaml                    │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_31.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_32.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_33.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_34.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_35.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_36.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_37.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_38.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_39.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_4.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_40.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_41.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_42.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_43.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_44.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_45.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_46.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_47.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_48.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_49.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_5.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_50.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_51.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_52.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_6.yaml                     │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_7.yaml                     │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_8.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common68_9.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_10.yaml                     │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_11.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_12.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_13.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_14.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_15.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_16.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_17.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_18.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_19.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_2.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_20.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_21.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_22.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_23.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_24.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_25.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_26.yaml                     │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_27.yaml                     │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_28.yaml                     │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_29.yaml                     │ kubernetes │         2         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_3.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_30.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_31.yaml                     │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_32.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_33.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_34.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_35.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_36.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_37.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_38.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_39.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_4.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_40.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_41.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_42.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_43.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_44.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_45.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_46.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_47.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_48.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_49.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_5.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_50.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_51.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_52.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_53.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_54.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_6.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_7.yaml                      │ kubernetes │         5         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_8.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ common6_9.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ communication-pods.yaml             │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ communication-pods_1.yaml           │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-deployment.yaml             │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-deployment1.yaml            │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-deployment2.yaml            │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-service.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-service1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-service2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-svc1_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-svc2_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ company-svc_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compiler.yaml                       │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compiler1.yaml                      │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_1.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_10.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_11.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_12.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_13.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_14.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_15.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_16.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_17.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_18.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_19.yaml              │ kubernetes │        30         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_20.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_21.yaml              │ kubernetes │        13         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_22.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_23.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_24.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_25.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_26.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_27.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_28.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_3.yaml               │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_4.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_5.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_6.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_7.yaml               │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_8.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo1_9.yaml               │ kubernetes │         6         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_1.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_10.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_11.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_12.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_13.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_14.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_15.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_16.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_17.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_18.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_19.yaml              │ kubernetes │        30         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_20.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_21.yaml              │ kubernetes │        13         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_22.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_23.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_24.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_25.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_26.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_27.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_28.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_3.yaml               │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_4.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_5.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_6.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_7.yaml               │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_8.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo2_9.yaml               │ kubernetes │         6         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_1.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_10.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_11.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_12.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_13.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_14.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_15.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_16.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_17.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_18.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_19.yaml              │ kubernetes │        30         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_20.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_21.yaml              │ kubernetes │        13         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_22.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_23.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_24.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_25.yaml              │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_26.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_27.yaml              │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_28.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_3.yaml               │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_4.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_5.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_6.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_7.yaml               │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_8.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo3_9.yaml               │ kubernetes │         6         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_1.yaml                │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_10.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_11.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_12.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_13.yaml               │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_14.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_15.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_16.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_17.yaml               │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_18.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_19.yaml               │ kubernetes │        30         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_20.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_21.yaml               │ kubernetes │        13         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_22.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_23.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_24.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_25.yaml               │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_26.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_27.yaml               │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_28.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_3.yaml                │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_4.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_5.yaml                │ kubernetes │         8         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_6.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_7.yaml                │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_8.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-demo_9.yaml                │ kubernetes │         6         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment_1.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment_2.yaml          │ kubernetes │        17         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment_3.yaml          │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment_4.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment_6.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment_7.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete-deployment_8.yaml          │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete1_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complete1_2.yaml                    │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo.yaml                       │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo1.yaml                      │ kubernetes │        20         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo1_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo2_1.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo3.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo3_1.yaml                    │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ completo_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-policy.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-dep.yaml                │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-dep1.yaml               │ kubernetes │        15         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-hpa.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-hpa1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-hpa2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-hpa21.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-load.yaml               │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-load1.yaml              │ kubernetes │        18         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-svc.yaml                │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ complex-web-svc1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod.yaml        │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod1.yaml       │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod1_1.yaml     │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod1_2.yaml     │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod1_3.yaml     │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod_1.yaml      │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod_2.yaml      │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ compliance-reporter-pod_3.yaml      │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1).yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_3.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_4.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_5.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_6.yaml               │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_7.yaml               │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components (1)_8.yaml               │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61_1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61_2.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61_4.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61_5.yaml           │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61_6.yaml           │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61_7.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.61_8.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62_1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62_2.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62_4.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62_5.yaml           │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62_6.yaml           │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62_7.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.62_8.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63_1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63_2.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63_4.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63_5.yaml           │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63_6.yaml           │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63_7.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.63_8.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64.yaml             │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64_1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64_2.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64_4.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64_5.yaml           │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64_6.yaml           │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64_7.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.64_8.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6_1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6_2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6_4.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6_5.yaml            │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6_6.yaml            │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6_7.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.3.6_8.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_3.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_4.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_5.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_6.yaml            │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_7.yaml            │ kubernetes │        11         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.6.1_8.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_3.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_4.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_5.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_6.yaml            │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_7.yaml            │ kubernetes │         7         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-v0.7.1_8.yaml            │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-with-crds.yaml           │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-with-crds_3.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-with-crds_4.yaml         │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-without-crds.yaml        │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-without-crds_1.yaml      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components-without-crds_2.yaml      │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components10_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components11_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_7.yaml                 │ kubernetes │        13         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components12_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_7.yaml                 │ kubernetes │        13         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components13_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components14_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components15_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components16_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_7.yaml                 │ kubernetes │        14         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components17_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components18_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components19_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_3.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_4.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_5.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_6.yaml                  │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_7.yaml                  │ kubernetes │         7         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components1_8.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components2.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components20_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components21_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components22_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_6.yaml                 │ kubernetes │         1         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_7.yaml                 │ kubernetes │        12         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components23_8.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components24.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components24_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────┼────────────┼───────────────────┤
│ components24_2.yaml                 │ kubernetes │         0         │
└─────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Comments1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'haalsamachar-comments' of 'deployment' 'comments-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'haalsamachar-comments' of Deployment 'comments-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "haalsamachar-comments" of deployment "comments-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Comments1.yaml:4
────────────────────────────────────────
   4 [   name: comments-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Comments1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container haalsamachar-comments in deployment comments-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Comments1.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: haalsamachar-comments
  17 │           image: akashsingh04/haalsamachar-graph:5e386bb1438e58cb923f10276e419f64fc46ff74
  18 │           ports:
  19 └             - containerPort: 8083
────────────────────────────────────────



Common59_3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'validator-container' of Deployment 'validator-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'validator-container' of Deployment 'validator-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'validator-container' of 'deployment' 'validator-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'validator-container' of Deployment 'validator-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'validator-container' of Deployment 'validator-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'validator-container' of Deployment 'validator-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'validator-container' of Deployment 'validator-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'validator-container' of Deployment 'validator-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'validator-container' of Deployment 'validator-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'validator-container' of Deployment 'validator-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'validator-container' of Deployment 'validator-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'validator-container' of Deployment 'validator-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "validator-container" of deployment "validator-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment validator-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Common59_3.yaml:4
────────────────────────────────────────
   4 [   name: validator-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container validator-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment validator-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Common59_3.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container validator-container in deployment validator-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Common59_3.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: validator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/validator-img:latest
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └         imagePullPolicy: Always
────────────────────────────────────────



Common59_4.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'calculator-container' of Deployment 'calculator-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'calculator-container' of 'deployment' 'calculator-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'calculator-container' of Deployment 'calculator-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'calculator-container' of Deployment 'calculator-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "calculator-container" of deployment "calculator-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment calculator-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Common59_4.yaml:4
────────────────────────────────────────
   4 [   name: calculator-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container calculator-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment calculator-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Common59_4.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 │           mountPath: /Raj_PV_dir/
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container calculator-container in deployment calculator-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Common59_4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: calculator-container
  17 │         image: us-central1-docker.pkg.dev/k8s-project-id-1/cloud-repository/calculator-img:latest
  18 │         ports:
  19 │         - containerPort: 8081
  20 │         volumeMounts:
  21 │         - name: data
  22 └           mountPath: /Raj_PV_dir/
────────────────────────────────────────



coffee1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coffee' of Deployment 'coffee' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coffee' of Deployment 'coffee' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coffee' of 'deployment' 'coffee' in 'coffee' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coffee' of Deployment 'coffee' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coffee' of Deployment 'coffee' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coffee' of Deployment 'coffee' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coffee' of Deployment 'coffee' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coffee" of deployment "coffee" in "coffee" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coffee in coffee namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coffee in coffee namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coffee in deployment coffee (namespace: coffee) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coffee1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: coffee
  18 │         image: nginxdemos/nginx-hello:plain-text
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────



coffee_1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coffee' of Deployment 'coffee' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coffee' of Deployment 'coffee' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coffee' of 'deployment' 'coffee' in 'gateway-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coffee' of Deployment 'coffee' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coffee' of Deployment 'coffee' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coffee' of Deployment 'coffee' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coffee' of Deployment 'coffee' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coffee' of Deployment 'coffee' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coffee" of deployment "coffee" in "gateway-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coffee in gateway-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coffee in gateway-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffee_1.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 └         terminationMessagePolicy: File
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coffee in deployment coffee (namespace: gateway-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coffee_1.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: coffee
  19 │         image: nginxdemos/nginx-hello:plain-text
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           protocol: TCP
  23 │         resources: {}
  24 │         terminationMessagePath: /dev/termination-log
  25 │         terminationMessagePolicy: File
  26 └         imagePullPolicy: IfNotPresent
────────────────────────────────────────



coffeeshop-deployment.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coffeeshop' of 'deployment' 'coffeeshop-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coffeeshop' of Deployment 'coffeeshop-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coffeeshop" of deployment "coffeeshop-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coffeeshop-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coffeeshop-deployment.yaml:4
────────────────────────────────────────
   4 [   name: coffeeshop-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coffeeshop-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coffeeshop-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coffeeshop-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coffeeshop in deployment coffeeshop-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coffeeshop-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: coffeeshop
  17 │           image: medtest2013/coffeeshop:latest
  18 │           ports:
  19 └             - containerPort: 8080
────────────────────────────────────────



cofre-deployment.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cofre-senhas' of 'deployment' 'cofre-senhas' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cofre-senhas" of deployment "cofre-senhas" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cofre-senhas in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cofre-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: cofre-senhas
   6 └   name: cofre-senhas
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cofre-senhas in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cofre-senhas in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cofre-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cofre-senhas in deployment cofre-senhas (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cofre-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────



cofre-deployment1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cofre-senhas' of 'deployment' 'cofre-senhas' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cofre-senhas' of Deployment 'cofre-senhas' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cofre-senhas" of deployment "cofre-senhas" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cofre-senhas in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cofre-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: cofre-senhas
   6 └   name: cofre-senhas
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cofre-senhas in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cofre-senhas in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cofre-deployment1.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cofre-senhas in deployment cofre-senhas (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cofre-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌       - image: linuxtips/giropops-senhas:1.0
  19 │         name: cofre-senhas
  20 │         env:
  21 │         - name: REDIS_HOST
  22 │           value: redis-service
  23 │         ports:
  24 │         - containerPort: 5000
  25 └         imagePullPolicy: Always
────────────────────────────────────────



coit-backend1-cm-files.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'coit-backend1-cm-files' in 'default' namespace stores secrets in key(s) or value(s) '{"secret.code.passphrase"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



coit-backend1-cm-files1.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'coit-backend1-cm-files' in 'default' namespace stores secrets in key(s) or value(s) '{"secret.code.passphrase"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



coit-backend1-cm.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'coit-backend1-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"api-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



coit-backend1-cm1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'coit-backend1-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"api-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



coit-backend1-deployment.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend1' of 'deployment' 'coit-backend1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend1" of deployment "coit-backend1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend1-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend1
   5 │   labels:
   6 └     app: coit-backend1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment.yaml:23-34
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend1 in deployment coit-backend1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend1-deployment.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────



coit-backend1-deployment1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend1' of 'deployment' 'coit-backend1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend1" of deployment "coit-backend1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend1-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend1
   5 │   labels:
   6 └     app: coit-backend1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment1.yaml:23-40
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 └             name: config-files
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend1 in deployment coit-backend1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend1-deployment1.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────



coit-backend1-deployment2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend1' of 'deployment' 'coit-backend1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend1" of deployment "coit-backend1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend1-deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend1
   5 │   labels:
   6 └     app: coit-backend1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment2.yaml:23-40
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 └             name: config-files
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend1 in deployment coit-backend1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend1-deployment2.yaml:24-33
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         volumeMounts:
  30 │           - mountPath: /mnt
  31 │             name: config-files
  32 │           - mountPath: /var/lib/mysql
  33 └             name: myappdata
────────────────────────────────────────



coit-backend1-deployment3.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend1' of 'deployment' 'coit-backend1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend1" of deployment "coit-backend1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend1-deployment3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend1
   5 │   labels:
   6 └     app: coit-backend1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment3.yaml:23-31
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend1 in deployment coit-backend1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend1-deployment3.yaml:24-31
────────────────────────────────────────
  24 ┌       - image: basilvarghese/myapp-java:1.2.0
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             value: http://coit-backend2
────────────────────────────────────────



coit-backend1-deployment4.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend1' of 'deployment' 'coit-backend1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend1' of Deployment 'coit-backend1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend1" of deployment "coit-backend1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend1-deployment4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend1
   5 │   labels:
   6 └     app: coit-backend1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend1-deployment4.yaml:23-34
────────────────────────────────────────
  23 ┌       containers:
  24 │       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 └             valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend1 in deployment coit-backend1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend1-deployment4.yaml:24-34
────────────────────────────────────────
  24 ┌       - image: coitlearning/coit-backend1:v1
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: coit-backend1
  27 │         ports:
  28 │           - containerPort: 8080
  29 │         env:
  30 │           - name: SA_LOGIC_API_URL
  31 │             valueFrom:
  32 └               configMapKeyRef:
  ..   
────────────────────────────────────────



coit-backend2-deployment.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend2' of 'deployment' 'coit-backend2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend2" of deployment "coit-backend2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend2-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend2
   5 │   labels:
   6 └     app: coit-backend2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend2-deployment.yaml:23-28
────────────────────────────────────────
  23 ┌       containers:
  24 │         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend2 in deployment coit-backend2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend2-deployment.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────



coit-backend2-deployment1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend2' of 'deployment' 'coit-backend2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend2" of deployment "coit-backend2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend2-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend2
   5 │   labels:
   6 └     app: coit-backend2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend2-deployment1.yaml:23-28
────────────────────────────────────────
  23 ┌       containers:
  24 │         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend2 in deployment coit-backend2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend2-deployment1.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: basilvarghese/myapp-python:1.2.0
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────



coit-backend2-deployment2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-backend2' of 'deployment' 'coit-backend2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-backend2' of Deployment 'coit-backend2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-backend2" of deployment "coit-backend2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-backend2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-backend2-deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-backend2
   5 │   labels:
   6 └     app: coit-backend2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-backend2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-backend2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-backend2-deployment2.yaml:23-28
────────────────────────────────────────
  23 ┌       containers:
  24 │         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-backend2 in deployment coit-backend2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-backend2-deployment2.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-backend2:v1
  25 │           imagePullPolicy: IfNotPresent
  26 │           name: coit-backend2
  27 │           ports:
  28 └             - containerPort: 5000
────────────────────────────────────────



coit-frontend-deployment.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-frontend
   5 │   labels:
   6 └     app: coit-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coit-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment.yaml:24-29
────────────────────────────────────────
  24 ┌       containers:
  25 │         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-frontend in deployment coit-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-frontend-deployment.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────



coit-frontend-deployment1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-frontend
   5 │   labels:
   6 └     app: coit-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coit-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment1.yaml:23-39
────────────────────────────────────────
  23 ┌       containers:
  24 │         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-frontend in deployment coit-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-frontend-deployment1.yaml:24-39
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 │             - containerPort: 80
  29 │           env:
  30 │             - name: JAVA_APP_URL
  31 │               valueFrom:
  32 └                 configMapKeyRef:
  ..   
────────────────────────────────────────



coit-frontend-deployment2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-frontend
   5 │   labels:
   6 └     app: coit-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coit-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment2.yaml:23-59
────────────────────────────────────────
  23 ┌       serviceAccountName: coit-frontend
  24 │       containers:
  25 │         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 └               - ls
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-frontend in deployment coit-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-frontend-deployment2.yaml:25-59
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:v1
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           livenessProbe:
  29 │             exec:
  30 │               command:
  31 │               - ls
  32 │               - /
  33 └             initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coit-frontend-deployment3.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-deployment3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-frontend
   5 │   labels:
   6 └     app: coit-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coit-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment3.yaml:24-29
────────────────────────────────────────
  24 ┌       containers:
  25 │         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-frontend in deployment coit-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-frontend-deployment3.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: basilvarghese/myapp-frontend:1.2.0
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────



coit-frontend-deployment4.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-deployment4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-frontend
   5 │   labels:
   6 └     app: coit-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coit-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       containers:
  25 │         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-frontend in deployment coit-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-frontend-deployment4.yaml:25-29
────────────────────────────────────────
  25 ┌         - image: coitlearning/coit-frontend:latest
  26 │           imagePullPolicy: IfNotPresent                         # 7
  27 │           name: coit-frontend
  28 │           ports:
  29 └             - containerPort: 80
────────────────────────────────────────



coit-frontend-deployment5.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-deployment5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-frontend
   5 │   labels:
   6 └     app: coit-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coit-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment5.yaml:23-28
────────────────────────────────────────
  23 ┌       containers:
  24 │         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-frontend in deployment coit-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-frontend-deployment5.yaml:24-28
────────────────────────────────────────
  24 ┌         - image: coitlearning/coit-frontend:latest
  25 │           imagePullPolicy: IfNotPresent                         # 7
  26 │           name: coit-frontend
  27 │           ports:
  28 └             - containerPort: 80
────────────────────────────────────────



coit-frontend-deployment6.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-deployment6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coit-frontend
   5 │   labels:
   6 └     app: coit-frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coit-frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment6.yaml:31-40
────────────────────────────────────────
  31 ┌         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  32 │           imagePullPolicy: IfNotPresent                         # 7
  33 │           name: coit-frontend
  34 │           ports:
  35 │             - containerPort: 80
  36 │           volumeMounts:
  37 │             - mountPath: /usr/share/nginx/html
  38 │               name: nginx-root
  39 │             - mountPath: /var/lib/sql
  40 └               name: datastore
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-deployment6.yaml:23-40
────────────────────────────────────────
  23 ┌       volumes:
  24 │         - name: nginx-root
  25 │           persistentVolumeClaim:
  26 │             claimName: coit-frontend
  27 │         - name: datastore
  28 │           persistentVolumeClaim:
  29 │             claimName: coit-frontend-fast
  30 │       containers:
  31 └         - image: asia.gcr.io/devops-learning-347802/coit-frontend:1.0.0
  ..   
────────────────────────────────────────



coit-frontend-patch.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-patch.yaml:4
────────────────────────────────────────
   4 [   name: coit-frontend
────────────────────────────────────────



coit-frontend-patch1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coit-frontend' of 'deployment' 'coit-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coit-frontend' of Deployment 'coit-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coit-frontend" of deployment "coit-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coit-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coit-frontend-patch1.yaml:4
────────────────────────────────────────
   4 [   name: coit-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coit-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coit-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coit-frontend-patch1.yaml:8-13
────────────────────────────────────────
   8 ┌       containers:
   9 │         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coit-frontend in deployment coit-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coit-frontend-patch1.yaml:9-13
────────────────────────────────────────
   9 ┌         - image: coitlearning/coit-frontend:v3
  10 │           imagePullPolicy: Always                         # 7
  11 │           name: coit-frontend
  12 │           ports:
  13 └             - containerPort: 8080
────────────────────────────────────────



collaboration.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collaboration' of Deployment 'akademia-collaboration' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collaboration' of 'deployment' 'akademia-collaboration' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'collaboration' of Deployment 'akademia-collaboration' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collaboration' of Deployment 'akademia-collaboration' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collaboration" of deployment "akademia-collaboration" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment akademia-collaboration in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 collaboration.yaml:4-7
────────────────────────────────────────
   4 ┌   name: akademia-collaboration
   5 │   namespace: default
   6 │   labels:
   7 └     app: collaboration
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container akademia-collaboration in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment akademia-collaboration in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collaboration.yaml:18-28
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container collaboration in deployment akademia-collaboration (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 collaboration.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: collaboration
  20 │         image: arctixdev/collaboration:latest
  21 │         ports:
  22 │         - containerPort: 8090
  23 │         env:
  24 │         - name: DATABASE_URL
  25 │           valueFrom:
  26 │             secretKeyRef:
  27 │               name: akademia-db
  28 └               key: DATABASE_URL
────────────────────────────────────────



collection.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collection' of Deployment 'collection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collection' of Deployment 'collection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collection' of 'deployment' 'collection' in 'collection' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collection' of Deployment 'collection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collection' of Deployment 'collection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collection' of Deployment 'collection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collection' of Deployment 'collection' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collection' of Deployment 'collection' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collection' of Deployment 'collection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collection' of Deployment 'collection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collection' of Deployment 'collection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collection" of deployment "collection" in "collection" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container collection in collection namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment collection in collection namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collection.yaml:18-27
────────────────────────────────────────
  18 ┌       containers:
  19 │       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container collection in deployment collection (namespace: collection) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 collection.yaml:19-27
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-cm
  22 │         image: monroeshindelar/collection:main-05b18cb
  23 │         imagePullPolicy: IfNotPresent
  24 │         name: collection
  25 │         ports:
  26 │         - containerPort: 8080
  27 └           protocol: TCP
────────────────────────────────────────



collection_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collection-psql' of Deployment 'collection-psql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collection-psql' of Deployment 'collection-psql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collection-psql' of 'deployment' 'collection-psql' in 'collection' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collection-psql' of Deployment 'collection-psql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collection-psql' of Deployment 'collection-psql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'collection-psql' of Deployment 'collection-psql' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collection-psql' of Deployment 'collection-psql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collection-psql' of Deployment 'collection-psql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collection-psql' of Deployment 'collection-psql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collection-psql' of Deployment 'collection-psql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collection-psql' of Deployment 'collection-psql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collection-psql' of Deployment 'collection-psql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collection-psql" of deployment "collection-psql" in "collection" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container collection-psql in collection namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collection_1.yaml:19-32
────────────────────────────────────────
  19 ┌       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 │         name: collection-psql
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment collection-psql in collection namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collection_1.yaml:18-36
────────────────────────────────────────
  18 ┌       containers:
  19 │       - envFrom:
  20 │         - configMapRef:
  21 │             name: collection-psql-cm
  22 │         - secretRef:
  23 │             name: collection-psql-secret
  24 │         image: postgres:latest
  25 │         imagePullPolicy: IfNotPresent
  26 └         name: collection-psql
  ..   
────────────────────────────────────────



collections.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collections' of Deployment 'collections' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collections' of Deployment 'collections' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collections' of 'deployment' 'collections' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collections' of Deployment 'collections' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collections' of Deployment 'collections' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collections' of Deployment 'collections' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collections' of Deployment 'collections' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collections' of Deployment 'collections' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collections" of deployment "collections" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment collections in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 collections.yaml:4-6
────────────────────────────────────────
   4 ┌   name: collections
   5 │   labels:
   6 └     app: collections
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container collections in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collections.yaml:18-56
────────────────────────────────────────
  18 ┌       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 │           mountPath: /etc/grid
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment collections in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collections.yaml:17-63
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: collections
  19 │         image: eu.gcr.io/grid-301122/collections:containerised
  20 │         imagePullPolicy: Always
  21 │         volumeMounts:
  22 │         - name: gu-config
  23 │           mountPath: /etc/gu
  24 │         - name: grid-config
  25 └           mountPath: /etc/grid
  ..   
────────────────────────────────────────



collector-daemonset.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'scrutiny-collector' of 'daemonset' 'scrutiny-collector-daemonset' in 'scrutiny' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'scrutiny-collector' of DaemonSet 'scrutiny-collector-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'scrutiny-collector-daemonset' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 collector-daemonset.yaml:16-51
────────────────────────────────────────
  16 ┌   selector:
  17 │     matchLabels:
  18 │       app: scrutiny-collector
  19 │   template:
  20 │     metadata:
  21 │       labels:
  22 │         app: scrutiny-collector
  23 │     spec:
  24 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "scrutiny-collector" of daemonset "scrutiny-collector-daemonset" in "scrutiny" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 collector-daemonset.yaml:43-44
────────────────────────────────────────
  43 ┌             runAsUser: 0
  44 └             privileged: true # only way to get this to work
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset scrutiny-collector-daemonset in scrutiny namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collector-daemonset.yaml:24-51
────────────────────────────────────────
  24 ┌       containers:
  25 │         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container scrutiny-collector in daemonset scrutiny-collector-daemonset (namespace: scrutiny) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 collector-daemonset.yaml:25-44
────────────────────────────────────────
  25 ┌         - name: scrutiny-collector
  26 │           # registry-proxy image-prefix
  27 │           image: cr.nathanv.app/ghcr.io/analogj/scrutiny:v0.8.1-collector
  28 │           env:
  29 │             - name: COLLECTOR_API_ENDPOINT
  30 │               value: http://scrutiny-web-service.scrutiny.svc.cluster.local:8080
  31 │             - name: COLLECTOR_HOST_ID
  32 │               valueFrom:
  33 └                 fieldRef:
  ..   
────────────────────────────────────────



collector-deployment_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wlsm-collector-service' of 'deployment' 'wlsm-collector' in 'wlsm-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wlsm-collector-service' of Deployment 'wlsm-collector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wlsm-collector-service" of deployment "wlsm-collector" in "wlsm-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wlsm-collector in wlsm-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wlsm-collector in wlsm-namespace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collector-deployment_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wlsm-collector-service in deployment wlsm-collector (namespace: wlsm-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 collector-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-collector-service
  18 │         image: localhost:5001/wlsm-collector-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8081
────────────────────────────────────────



collectord-cr.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 collectord-cr.yaml:13-45
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ""
  15 │   - apps
  16 │   - batch
  17 │   - extensions
  18 │   - collectord.io
  19 │   - rbac.authorization.k8s.io
  20 │   resources:
  21 └   - alertmanagers
  ..   
────────────────────────────────────────



collectord-deploy-addon.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collectorforkubernetes' of 'deployment' 'collectorforkubernetes-addon' in 'collectorforkubernetes' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collectorforkubernetes' of Deployment 'collectorforkubernetes-addon' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'collectorforkubernetes-addon' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 collectord-deploy-addon.yaml:9-62
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       daemon: collectorforkubernetes
  13 │   template:
  14 │     metadata:
  15 │       name: collectorforkubernetes-addon
  16 │       labels:
  17 └         daemon: collectorforkubernetes
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collectorforkubernetes" of deployment "collectorforkubernetes-addon" in "collectorforkubernetes" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 collectord-deploy-addon.yaml:26-27
────────────────────────────────────────
  26 ┌           runAsUser: 0
  27 └           privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment collectorforkubernetes-addon in collectorforkubernetes namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collectord-deploy-addon.yaml:19-62
────────────────────────────────────────
  19 ┌       priorityClassName: collectorforkubernetes-critical
  20 │       serviceAccountName: collectorforkubernetes
  21 │       containers:
  22 │       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container collectorforkubernetes in deployment collectorforkubernetes-addon (namespace: collectorforkubernetes) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 collectord-deploy-addon.yaml:22-49
────────────────────────────────────────
  22 ┌       - name: collectorforkubernetes
  23 │         image: outcoldsolutions/collectorforkubernetes:latest
  24 │         imagePullPolicy: Always
  25 │         securityContext:
  26 │           runAsUser: 0
  27 │           privileged: true
  28 │         resources:
  29 │           limits: {}
  30 └ #            cpu: 500m
  ..   
────────────────────────────────────────



collectord-ds-master.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 92, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collectorforkubernetes' of 'daemonset' 'collectorforkubernetes-master' in 'collectorforkubernetes' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'collectorforkubernetes-master' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 collectord-ds-master.yaml:9-93
────────────────────────────────────────
   9 ┌   updateStrategy:
  10 │     type: RollingUpdate
  11 │   selector:
  12 │     matchLabels:
  13 │       daemon: collectorforkubernetes
  14 │   template:
  15 │     metadata:
  16 │       name: collectorforkubernetes-master
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'collectorforkubernetes-master' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 collectord-ds-master.yaml:9-93
────────────────────────────────────────
   9 ┌   updateStrategy:
  10 │     type: RollingUpdate
  11 │   selector:
  12 │     matchLabels:
  13 │       daemon: collectorforkubernetes
  14 │   template:
  15 │     metadata:
  16 │       name: collectorforkubernetes-master
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collectorforkubernetes" of daemonset "collectorforkubernetes-master" in "collectorforkubernetes" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 collectord-ds-master.yaml:42-43
────────────────────────────────────────
  42 ┌           runAsUser: 0
  43 └           privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset collectorforkubernetes-master in collectorforkubernetes namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collectord-ds-master.yaml:20-93
────────────────────────────────────────
  20 ┌       priorityClassName: collectorforkubernetes-critical
  21 │       dnsPolicy: ClusterFirstWithHostNet
  22 │       imagePullSecrets: []
  23 │       hostNetwork: true
  24 │       serviceAccountName: collectorforkubernetes
  25 │       affinity:
  26 │         nodeAffinity:
  27 │           requiredDuringSchedulingIgnoredDuringExecution:
  28 └             nodeSelectorTerms:
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset collectorforkubernetes-master in collectorforkubernetes namespace shouldn't have volumes set to {"/"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 collectord-ds-master.yaml:9-93
────────────────────────────────────────
   9 ┌   updateStrategy:
  10 │     type: RollingUpdate
  11 │   selector:
  12 │     matchLabels:
  13 │       daemon: collectorforkubernetes
  14 │   template:
  15 │     metadata:
  16 │       name: collectorforkubernetes-master
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container collectorforkubernetes in daemonset collectorforkubernetes-master (namespace: collectorforkubernetes) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 collectord-ds-master.yaml:38-72
────────────────────────────────────────
  38 ┌       - name: collectorforkubernetes
  39 │         image: outcoldsolutions/collectorforkubernetes:latest
  40 │         imagePullPolicy: Always
  41 │         securityContext:
  42 │           runAsUser: 0
  43 │           privileged: true
  44 │         resources:
  45 │           limits: {}
  46 └ #            cpu: 2
  ..   
────────────────────────────────────────



collectord-ds.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 92, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collectorforkubernetes' of 'daemonset' 'collectorforkubernetes' in 'collectorforkubernetes' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): DaemonSet 'collectorforkubernetes' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 collectord-ds.yaml:11-108
────────────────────────────────────────
  11 ┌   updateStrategy:
  12 │     type: RollingUpdate
  13 │   selector:
  14 │     matchLabels:
  15 │       daemon: collectorforkubernetes
  16 │   template:
  17 │     metadata:
  18 │       name: collectorforkubernetes
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collectorforkubernetes' of DaemonSet 'collectorforkubernetes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'collectorforkubernetes' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 collectord-ds.yaml:11-108
────────────────────────────────────────
  11 ┌   updateStrategy:
  12 │     type: RollingUpdate
  13 │   selector:
  14 │     matchLabels:
  15 │       daemon: collectorforkubernetes
  16 │   template:
  17 │     metadata:
  18 │       name: collectorforkubernetes
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collectorforkubernetes" of daemonset "collectorforkubernetes" in "collectorforkubernetes" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 collectord-ds.yaml:48-49
────────────────────────────────────────
  48 ┌           runAsUser: 0
  49 └           privileged: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset collectorforkubernetes in collectorforkubernetes namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 collectord-ds.yaml:22-108
────────────────────────────────────────
  22 ┌       priorityClassName: collectorforkubernetes-critical
  23 │       dnsPolicy: ClusterFirstWithHostNet
  24 │       imagePullSecrets: []
  25 │       hostNetwork: true
  26 │       serviceAccountName: collectorforkubernetes
  27 │       # We run this DaemonSet only for Non-Masters
  28 │       affinity:
  29 │         nodeAffinity:
  30 └           requiredDuringSchedulingIgnoredDuringExecution:
  ..   
────────────────────────────────────────


AVD-KSV-0121 (HIGH): daemonset collectorforkubernetes in collectorforkubernetes namespace shouldn't have volumes set to {"/"}
════════════════════════════════════════
HostPath present many security risks and as a security practice it is better to avoid critical host paths mounts.

See https://avd.aquasec.com/misconfig/ksv121
────────────────────────────────────────
 collectord-ds.yaml:11-108
────────────────────────────────────────
  11 ┌   updateStrategy:
  12 │     type: RollingUpdate
  13 │   selector:
  14 │     matchLabels:
  15 │       daemon: collectorforkubernetes
  16 │   template:
  17 │     metadata:
  18 │       name: collectorforkubernetes
  19 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container collectorforkubernetes in daemonset collectorforkubernetes (namespace: collectorforkubernetes) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 collectord-ds.yaml:41-84
────────────────────────────────────────
  41 ┌       - name: collectorforkubernetes
  42 │         # Collector version
  43 │         # ARM images are available with suffix -arm64
  44 │         # image: docker.io/outcoldsolutions/collectorforkubernetes:5.19.391-arm64
  45 │         image: outcoldsolutions/collectorforkubernetes:latest
  46 │         imagePullPolicy: Always
  47 │         securityContext:
  48 │           runAsUser: 0
  49 └           privileged: true
  ..   
────────────────────────────────────────



color-app.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'simple-webapp' of Pod 'webapp-green' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'simple-webapp' of Pod 'webapp-green' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'simple-webapp' of 'pod' 'webapp-green' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'simple-webapp' of Pod 'webapp-green' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'simple-webapp' of Pod 'webapp-green' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'simple-webapp' of Pod 'webapp-green' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'simple-webapp' of Pod 'webapp-green' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'simple-webapp' of Pod 'webapp-green' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'simple-webapp' of Pod 'webapp-green' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'simple-webapp' of Pod 'webapp-green' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'simple-webapp' of Pod 'webapp-green' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'simple-webapp' of Pod 'webapp-green' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "simple-webapp" of pod "webapp-green" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod webapp-green in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 color-app.yaml:4-6
────────────────────────────────────────
   4 ┌   name: webapp-green
   5 │   labels:
   6 └       name: webapp-green 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-green in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod webapp-green in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 color-app.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container simple-webapp in pod webapp-green (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 color-app.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: simple-webapp
  10 │     image: kodekloud/webapp-color
  11 │     command: ["python", "app.py"]
  12 └     args: ["--color", "green"]
────────────────────────────────────────



com-volume.yaml (kubernetes)
============================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'read' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'write' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'read' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'write' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'read' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'write' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "read" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "write" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 com-volume.yaml:4
────────────────────────────────────────
   4 [   name: volume-demo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod volume-demo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume.yaml:6-29
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container read in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 com-volume.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container write in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 com-volume.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────



com-volume1.yaml (kubernetes)
=============================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'read' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'write' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'read' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'write' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'read' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'write' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "read" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "write" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 com-volume1.yaml:4
────────────────────────────────────────
   4 [   name: volume-demo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod volume-demo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume1.yaml:6-29
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container read in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 com-volume1.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container write in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 com-volume1.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────



com-volume2.yaml (kubernetes)
=============================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'read' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'write' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'read' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'write' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'read' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'write' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "read" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "write" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 com-volume2.yaml:4
────────────────────────────────────────
   4 [   name: volume-demo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod volume-demo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com-volume2.yaml:6-29
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container read in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 com-volume2.yaml:15-26
────────────────────────────────────────
  15 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  16 │     name: read
  17 │     ports:
  18 │     - containerPort: 8080
  19 │       protocol: TCP
  20 │     env:
  21 │     - name: ASPNETCORE_URLS
  22 │       value: http://*:8080
  23 └     volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container write in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 com-volume2.yaml:7-14
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     ports:
  10 │     - containerPort: 80
  11 │       protocol: TCP
  12 │     volumeMounts:
  13 │     - name: arquivos
  14 └       mountPath: /data
────────────────────────────────────────



com.yaml (kubernetes)
=====================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'command-demo-container' of Pod 'command-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'command-demo-container' of 'pod' 'command-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'command-demo-container' of Pod 'command-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "command-demo-container" of pod "command-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod command-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 com.yaml:4-6
────────────────────────────────────────
   4 ┌   name: command-demo
   5 │   labels:
   6 └     purpose: demonstrate-command
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container command-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod command-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 com.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 │     args: ["HOSTNAME", "KUBERNETES_PORT"]
  13 └   restartPolicy: OnFailure
────────────────────────────────────────



combined1_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'app-nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'app-nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'app-nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "app-nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app-nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 combined1_1.yaml:4
────────────────────────────────────────
   4 [   name: app-nginx-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment app-nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app-nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 combined1_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app-nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 combined1_1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx:1.17.3
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



combined_deployment_6.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of StatefulSet 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'statefulset' 'postgres' in 'development' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of StatefulSet 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of statefulset "postgres" in "development" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in development namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 combined_deployment_6.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: postgres-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset postgres in development namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 combined_deployment_6.yaml:17-40
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: postgres
  19 │         image: postgres:13
  20 │         ports:
  21 │         - containerPort: 5432
  22 │         env:
  23 │         - name: POSTGRES_DB
  24 │           valueFrom:
  25 └             configMapKeyRef:
  ..   
────────────────────────────────────────



combined_deployment_9.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-api-container' of Deployment 'go-api-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-api-container' of Deployment 'go-api-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-api-container' of 'deployment' 'go-api-deployment' in 'development' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-api-container' of Deployment 'go-api-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-api-container' of Deployment 'go-api-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-api-container' of Deployment 'go-api-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-api-container' of Deployment 'go-api-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-api-container" of deployment "go-api-deployment" in "development" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container go-api-deployment in development namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment go-api-deployment in development namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 combined_deployment_9.yaml:16-88
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 └             cpu: 250m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-api-container in deployment go-api-deployment (namespace: development) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 combined_deployment_9.yaml:17-88
────────────────────────────────────────
  17 ┌       - name: go-api-container
  18 │         image: satyamvatstyagi/user-management-service:1.0.1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             memory: 64Mi
  24 │             cpu: 250m
  25 └           limits:
  ..   
────────────────────────────────────────



command-and-args.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu-sleeper' of 'pod' 'ubuntu-sleeper-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu-sleeper' of Pod 'ubuntu-sleeper-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu-sleeper" of pod "ubuntu-sleeper-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ubuntu-sleeper-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 command-and-args.yaml:4
────────────────────────────────────────
   4 [   name: ubuntu-sleeper-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ubuntu-sleeper-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command-and-args.yaml:7-10
────────────────────────────────────────
   7 ┌     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ubuntu-sleeper-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command-and-args.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: ubuntu-sleeper
   8 │       image: ubuntu-sleeper
   9 │       command: [ "sleep2.0" ]
  10 └       args: [ "10" ]
────────────────────────────────────────



command-cont.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'centos-container' of Pod 'centos-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'centos-container' of 'pod' 'centos-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "centos-container" of pod "centos-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod centos-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 command-cont.yaml:4
────────────────────────────────────────
   4 [   name: centos-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container centos-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command-cont.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod centos-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command-cont.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: centos-container
   8 │     image: centos:7
   9 └     command: ["sleep", "10000"]
────────────────────────────────────────



command-demo.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'command-demo' of Pod 'command-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'command-demo' of Pod 'command-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'command-demo' of 'pod' 'command-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'command-demo' of Pod 'command-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'command-demo' of Pod 'command-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'command-demo' of Pod 'command-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'command-demo' of Pod 'command-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'command-demo' of Pod 'command-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'command-demo' of Pod 'command-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'command-demo' of Pod 'command-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "command-demo" of pod "command-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod command-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 command-demo.yaml:4-6
────────────────────────────────────────
   4 ┌   name: command-demo
   5 │   labels:
   6 └     name: command-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container command-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command-demo.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 │       - name: MESSAGE
  17 └         value: Hello World
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod command-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command-demo.yaml:8-20
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: command-demo
  10 │     image: debian
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "500m"
  15 │     env:
  16 └       - name: MESSAGE
  ..   
────────────────────────────────────────



command.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'command1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'command1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'command1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'command1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'command1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'command1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'command1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'command1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'command1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'command1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'command1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'command1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "command1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod command1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 command.yaml:4
────────────────────────────────────────
   4 [   name: command1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container command1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod command1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 command.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count 
   8 │     image: busybox 
   9 └     command: ["sleep","3600"]
────────────────────────────────────────



commandArgument.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandtest' of Pod 'commandtest' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandtest' of Pod 'commandtest' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandtest' of 'pod' 'commandtest' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandtest' of Pod 'commandtest' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandtest' of Pod 'commandtest' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandtest' of Pod 'commandtest' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandtest' of Pod 'commandtest' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandtest' of Pod 'commandtest' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandtest' of Pod 'commandtest' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandtest' of Pod 'commandtest' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandtest" of pod "commandtest" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod commandtest in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commandArgument.yaml:4
────────────────────────────────────────
   4 [   name: commandtest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commandtest in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commandArgument.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod commandtest in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commandArgument.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: commandtest
   8 │     image:  busybox
   9 │     command: ["/bin/sh"]
  10 │     args: ["-c", "while true; do date >> ~/dates.txt; sleep 10; done"]
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 └         cpu: "500m"
────────────────────────────────────────



commands-depl.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: kifle23/commandservice:latest
  18 │         env:
  19 │         - name: RabbitMQHost
  20 │           value: rabbitmq-clusterip-srv
  21 │         - name: RabbitMQPort
  22 │           value: '5672'
  23 │         - name: GrpcPlatform
  24 └           value: http://platforms-clusterip-srv:777
────────────────────────────────────────



commands-depl1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl1.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: karthickselvamdev/commandservice:latest
────────────────────────────────────────



commands-depl10.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl10.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment commands-depl in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl10.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl10.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 │         image: itunbridge/commandservice:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



commands-depl11.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl11.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl11.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: samcard1999/commandservice:latest
────────────────────────────────────────



commands-depl12.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl12.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl12.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: mohdsalmanirfan/commandservice
────────────────────────────────────────



commands-depl13.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: commands-depl
   5 │   labels:
   6 └     app: commands-depl
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment commands-depl in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl13.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 │           protocol: TCP
  25 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl13.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: commandservice
  20 │         image: aumprakashdehury/commandservice:latest
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 80
  24 └           protocol: TCP
────────────────────────────────────────



commands-depl14.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl14.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl14.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: giuka/commandservice:latest
────────────────────────────────────────



commands-depl2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl2.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl2.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: adribailador/commandservice:latest
────────────────────────────────────────



commands-depl3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl3.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl3.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: binarythistle/commandservice:latest
────────────────────────────────────────



commands-depl4.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'command-service' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'command-service' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'command-service' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'command-service' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'command-service' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'command-service' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'command-service' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'command-service' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'command-service' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'command-service' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'command-service' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'command-service' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "command-service" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl4.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl4.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container command-service in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: command-service
  17 └         image: selimsahindev/command-service:latest
────────────────────────────────────────



commands-depl5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl5.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl5.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: yogipuji/commandservice:latest
────────────────────────────────────────



commands-depl6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl6.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl6.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: f136pix/commandservice:latest
────────────────────────────────────────



commands-depl7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl7.yaml:5
────────────────────────────────────────
   5 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl7.yaml:21-23
────────────────────────────────────────
  21 ┌       containers:
  22 │         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl7.yaml:22-23
────────────────────────────────────────
  22 ┌         - name: commandservice
  23 └           image: chapinsmith/commandservice:latest
────────────────────────────────────────



commands-depl8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl8.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl8.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: nishanthsuraj/commandservice:latest
────────────────────────────────────────



commands-depl9.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-depl9.yaml:4
────────────────────────────────────────
   4 [   name: commands-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-depl9.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: szymszello/commandservice:latest
────────────────────────────────────────



commands-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-deployment.yaml:4
────────────────────────────────────────
   4 [   name: commands-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-deployment.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌         - name: commandservice
  17 └           image: asandell/commandservice:latest
────────────────────────────────────────



commands-service.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commandservice' of 'deployment' 'commands-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commandservice' of Deployment 'commands-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commandservice' of Deployment 'commands-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commandservice" of deployment "commands-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commands-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands-service.yaml:4
────────────────────────────────────────
   4 [   name: commands-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commands-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commands-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands-service.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container commandservice in deployment commands-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 commands-service.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: commandservice
  17 └         image: jaugustodev/commandsservice:latest
────────────────────────────────────────



commands1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'command-demo-container' of Pod 'command-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'command-demo-container' of 'pod' 'command-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'command-demo-container' of Pod 'command-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'command-demo-container' of Pod 'command-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "command-demo-container" of pod "command-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod command-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 commands1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: command-demo
   5 │   labels:
   6 └     purpose: demonstrate-command
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container command-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 └     args: ["HOSTNAME", "KUBERNETES_PORT"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod command-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 commands1.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: command-demo-container
  10 │     image: debian
  11 │     command: ["printenv"]
  12 │     args: ["HOSTNAME", "KUBERNETES_PORT"]
  13 └   restartPolicy: OnFailure
────────────────────────────────────────



comment-mongo-deployment.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comment-mongo' of Deployment 'comment-mongo-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comment-mongo' of Deployment 'comment-mongo-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comment-mongo' of 'deployment' 'comment-mongo-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comment-mongo' of Deployment 'comment-mongo-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comment-mongo' of Deployment 'comment-mongo-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comment-mongo' of Deployment 'comment-mongo-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comment-mongo' of Deployment 'comment-mongo-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comment-mongo' of Deployment 'comment-mongo-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comment-mongo" of deployment "comment-mongo-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comment-mongo-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comment-mongo-deployment.yaml:4
────────────────────────────────────────
   4 [   name: comment-mongo-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comment-mongo-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comment-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comment-mongo-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comment-mongo-deployment.yaml:15-36
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comment-mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: comment-service
  23 └         resources:
  ..   
────────────────────────────────────────



comment-service-deploy_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comment-microservice-c' of 'deployment' 'comment-microservice-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comment-microservice-c' of Deployment 'comment-microservice-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comment-microservice-c" of deployment "comment-microservice-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comment-microservice-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comment-service-deploy_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: comment-microservice-deployment
   5 │   labels:
   6 └     app: comment-microservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comment-microservice-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comment-microservice-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comment-service-deploy_1.yaml:16-32
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comment-microservice-c in deployment comment-microservice-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comment-service-deploy_1.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: comment-microservice-c
  18 │         image: tonyq2k3/comment-microservice:dev
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8002'
  22 │         - name: MONGO_URI
  23 │           valueFrom:
  24 │             secretKeyRef:
  25 └               name: mongodb-secret
  ..   
────────────────────────────────────────



comment-service-deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comment-service' of Deployment 'comment-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comment-service' of 'deployment' 'comment-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comment-service' of Deployment 'comment-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comment-service" of deployment "comment-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comment-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comment-service-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: comment-service
   5 │   labels:
   6 └     app: comment-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comment-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comment-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comment-service-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 └             cpu: '0.2'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comment-service in deployment comment-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comment-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: comment-service
  19 │         image: datuits/devops-comment-service:latest
  20 │         ports:
  21 │         - containerPort: 8082
  22 │         resources:
  23 │           requests:
  24 │             memory: 125Mi
  25 │             cpu: '0.2'
  26 └           limits:
  ..   
────────────────────────────────────────



comments-db-depl.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commentsdb' of Deployment 'commentsdb-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commentsdb' of 'deployment' 'commentsdb-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commentsdb' of Deployment 'commentsdb-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commentsdb' of Deployment 'commentsdb-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commentsdb" of deployment "commentsdb-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment commentsdb-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-db-depl.yaml:4
────────────────────────────────────────
   4 [   name: commentsdb-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container commentsdb-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-db-depl.yaml:16-31
────────────────────────────────────────
  16 ┌       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 │         - name: MYSQL_USER
  24 └           value: newuser
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment commentsdb-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-db-depl.yaml:15-35
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commentsdb
  17 │         image: mysql
  18 │         ports:
  19 │         - containerPort: 3306
  20 │         env:
  21 │         - name: MYSQL_ROOT_PASSWORD
  22 │           value: root_P4ssword!
  23 └         - name: MYSQL_USER
  ..   
────────────────────────────────────────



comments-depl.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────



comments-depl1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl1.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────



comments-depl10.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl10.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl10.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────



comments-depl11.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl11.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl11.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────



comments-depl12.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl12.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl12.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────



comments-depl13.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl13.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl13.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────



comments-depl14.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl14.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl14.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: samtwin2020/comments
────────────────────────────────────────



comments-depl15.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl15.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl15.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: isuruk1/comments
────────────────────────────────────────



comments-depl16.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl16.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl16.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: ksobitov/comments
────────────────────────────────────────



comments-depl17.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl17.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl17.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: kliao36/comments:latest
  18 │         ports:
  19 └         - containerPort: 4001
────────────────────────────────────────



comments-depl18.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl18.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl18.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: bheshraj13/comments
────────────────────────────────────────



comments-depl19.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl19.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl19.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jcmontgomery/comments
────────────────────────────────────────



comments-depl2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl2.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl2.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────



comments-depl20.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl20.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl20.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: dilippm92/comments
────────────────────────────────────────



comments-depl21.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl21.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl21.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl21.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mikuadam/comments
────────────────────────────────────────



comments-depl22.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl22.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl22.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl22.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rvanappeldorn/comments-service
────────────────────────────────────────



comments-depl23.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl23.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl23.yaml:15-18
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl23.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comments
  17 │         image: imranalikm/comments
  18 └         imagePullPolicy: Never
────────────────────────────────────────



comments-depl24.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl24.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl24.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl24.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: jahidhiron/comments
────────────────────────────────────────



comments-depl25.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl25.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl25.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl25.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: tenaw/comments
────────────────────────────────────────



comments-depl26.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'commentsservice' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'commentsservice' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'commentsservice' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'commentsservice' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'commentsservice' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'commentsservice' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'commentsservice' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'commentsservice' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'commentsservice' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'commentsservice' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'commentsservice' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'commentsservice' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "commentsservice" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl26.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl26.yaml:16-41
────────────────────────────────────────
  16 ┌       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 │           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  24 └         - name: DATABASE_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl26.yaml:15-41
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: commentsservice
  17 │         image: commentsservice
  18 │         imagePullPolicy: Never
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: JDBC_DATABASE_URL
  23 └           value: jdbc:mysql://commentsdb-clusterip-srv:3306/CommentsDb?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
  ..   
────────────────────────────────────────



comments-depl27.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl27.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl27.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl27.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mathiasso/comments
────────────────────────────────────────



comments-depl28.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl28.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl28.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl28.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: vanessavmk/comments
────────────────────────────────────────



comments-depl29.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl29.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl29.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl29.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: daemonwolfdev/comments
────────────────────────────────────────



comments-depl3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl3.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl3.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl3.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: rallycoding/comments-84
────────────────────────────────────────



comments-depl4.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl4.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl4.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl4.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: devmatheuus/blog-comments-service
────────────────────────────────────────



comments-depl5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl5.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl5.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl5.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: lokeam/comments
────────────────────────────────────────



comments-depl6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl6.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl6.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl6.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: mabroukdev/blog-comments
────────────────────────────────────────



comments-depl7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl7.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl7.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl7.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: boilingsoup/comments
────────────────────────────────────────



comments-depl8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl8.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl8.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl8.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: khalil1009/comments
────────────────────────────────────────



comments-depl9.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-depl9.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-depl9.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-depl9.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: manuelextra/comments
────────────────────────────────────────



comments-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-deployment.yaml:4
────────────────────────────────────────
   4 [   name: comments-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-deployment.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-deployment.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────



comments-deployment1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comments' of Deployment 'comments-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comments' of 'deployment' 'comments-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comments' of Deployment 'comments-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comments' of Deployment 'comments-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comments" of deployment "comments-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: comments-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments-deployment1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comments in deployment comments-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments-deployment1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: comments
  17 └         image: nirgluzman/comments
────────────────────────────────────────



comments.k8s.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'comment-container' of Deployment 'comments-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comment-container' of Deployment 'comments-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comment-container' of 'deployment' 'comments-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comment-container' of Deployment 'comments-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comment-container' of Deployment 'comments-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comment-container' of Deployment 'comments-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comment-container' of Deployment 'comments-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comment-container' of Deployment 'comments-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comment-container' of Deployment 'comments-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comment-container' of Deployment 'comments-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comment-container' of Deployment 'comments-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comment-container' of Deployment 'comments-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comment-container" of deployment "comments-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments.k8s.yaml:4
────────────────────────────────────────
   4 [   name: comments-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments.k8s.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments.k8s.yaml:15-18
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: comment-container
  17 │         image: comment-image
  18 └         imagePullPolicy: Never
────────────────────────────────────────



comments.yaml (kubernetes)
==========================
Tests: 149 (SUCCESSES: 96, FAILURES: 53)
Failures: 53 (UNKNOWN: 0, LOW: 31, MEDIUM: 15, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'collectstatic' of Deployment 'comment-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'consumer' of Deployment 'comment-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'collectstatic' of Deployment 'comment-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'comment-service' of Deployment 'comment-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'consumer' of Deployment 'comment-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'collectstatic' of 'deployment' 'comment-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'comment-service' of 'deployment' 'comment-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'consumer' of 'deployment' 'comment-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'collectstatic' of Deployment 'comment-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'consumer' of Deployment 'comment-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'collectstatic' of Deployment 'comment-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'consumer' of Deployment 'comment-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'collectstatic' of Deployment 'comment-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'comment-service' of Deployment 'comment-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'consumer' of Deployment 'comment-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'collectstatic' of Deployment 'comment-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'consumer' of Deployment 'comment-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'collectstatic' of Deployment 'comment-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'consumer' of Deployment 'comment-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'collectstatic' of Deployment 'comment-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'consumer' of Deployment 'comment-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'collectstatic' of Deployment 'comment-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'consumer' of Deployment 'comment-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'collectstatic' of Deployment 'comment-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'consumer' of Deployment 'comment-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'collectstatic' of Deployment 'comment-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'comment-service' of Deployment 'comment-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'consumer' of Deployment 'comment-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "collectstatic" of deployment "comment-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "comment-service" of deployment "comment-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "consumer" of deployment "comment-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comment-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments.yaml:4
────────────────────────────────────────
   4 [   name: comment-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comment-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comment-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comment-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comment-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments.yaml:15-93
────────────────────────────────────────
  15 ┌       volumes:
  16 │       - name: comments-static-volume
  17 │         emptyDir: {}
  18 │       initContainers:
  19 │       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 └         - manage.py
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container collectstatic in deployment comment-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: collectstatic
  20 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  21 │         command:
  22 │         - python
  23 │         - manage.py
  24 │         - collectstatic
  25 │         - --noinput
  26 │         imagePullPolicy: IfNotPresent
  27 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container comment-service in deployment comment-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments.yaml:45-73
────────────────────────────────────────
  45 ┌       - name: comment-service
  46 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  47 │         ports:
  48 │         - containerPort: 8002
  49 │         command:
  50 │         - python
  51 │         - manage.py
  52 │         - runserver
  53 └         - 0.0.0.0:8002
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container consumer in deployment comment-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments.yaml:74-93
────────────────────────────────────────
  74 ┌       - name: consumer
  75 │         image: ghcr.io/tomdieu/wikiculture/comment_service:latest
  76 │         command:
  77 │         - python
  78 │         - consumer.py
  79 │         imagePullPolicy: IfNotPresent
  80 │         env:
  81 │         - name: RABBITMQ_USERNAME
  82 └           valueFrom:
  ..   
────────────────────────────────────────



comments_delp.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cicd-comment-container' of Deployment 'comments-srv' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cicd-comment-container' of 'deployment' 'comments-srv' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cicd-comment-container' of Deployment 'comments-srv' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cicd-comment-container" of deployment "comments-srv" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment comments-srv in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 comments_delp.yaml:4-6
────────────────────────────────────────
   4 ┌   name: comments-srv
   5 │   labels:
   6 └     app: comments-srv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container comments-srv in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment comments-srv in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 comments_delp.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 │         - containerPort: 4001
  24 │       imagePullSecrets:
  25 └       - name: app-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cicd-comment-container in deployment comments-srv (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 comments_delp.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: cicd-comment-container
  20 │         image: registry.gitlab.com/manos972/tp_fil_rouge/comments:v1.4
  21 │         imagePullPolicy: IfNotPresent
  22 │         ports:
  23 └         - containerPort: 4001
────────────────────────────────────────



committer-role.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'committer' shouldn't manage all resources at the namespace 'jx'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 committer-role.yaml:15-41
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ""
  17 │   - jenkins.io
  18 │   - lighthouse.jenkins.io
  19 │   - extensions
  20 │   - apps
  21 │   - apiextensions.k8s.io
  22 │   - rbac.authorization.k8s.io
  23 └   - batch
  ..   
────────────────────────────────────────



common-app_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-resty' of Deployment 'echo-resty' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-resty' of Deployment 'echo-resty' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-resty' of 'deployment' 'echo-resty' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-resty' of Deployment 'echo-resty' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'echo-resty' of Deployment 'echo-resty' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-resty' of Deployment 'echo-resty' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-resty' of Deployment 'echo-resty' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-resty' of Deployment 'echo-resty' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-resty" of deployment "echo-resty" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment echo-resty in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 common-app_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: echo-resty
   5 │   labels:
   6 └     k8s-app: echo-resty
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-resty in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-resty in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 common-app_1.yaml:17-48
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 60
  18 │       containers:
  19 │       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 └               apiVersion: v1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-resty in deployment echo-resty (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 common-app_1.yaml:19-40
────────────────────────────────────────
  19 ┌       - name: echo-resty
  20 │         image: registry.alauda.cn:60080/acp/alb-nginx:v3.12.2
  21 │         env:
  22 │         - name: POD_NAME
  23 │           valueFrom:
  24 │             fieldRef:
  25 │               apiVersion: v1
  26 │               fieldPath: metadata.name
  27 └         resources:
  ..   
────────────────────────────────────────



common-config.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'common' in 'dev-kube' namespace stores sensitive contents in key(s) or value(s) '{"      uri"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



common-configmap.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'common-config' in 'default' namespace stores secrets in key(s) or value(s) '{"SERVICE_FEIGN_OAUTH_TOKEN_URL"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



common-external_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common-external_4.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common-external_4.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────



common61_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-object-bucket' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common61_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-object-bucket' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common61_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────



common61_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0053 (HIGH): ClusterRole 'rook-ceph-system' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 common61_12.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - pods/exec
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



common61_2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cephfs-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common61_2.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 └   - list
────────────────────────────────────────



common61_26.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common61_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────



common61_27.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 common61_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_27.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 │   - watch
  28 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_27.yaml:59-66
────────────────────────────────────────
  59 ┌ - apiGroups:
  60 │   - apps
  61 │   resources:
  62 │   - deployments/scale
  63 │   - deployments
  64 │   verbs:
  65 │   - patch
  66 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-mgr' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common61_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────



common61_28.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-osd' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common61_28.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'rook-ceph-osd' shouldn't have access to manage secrets in namespace 'rook-ceph'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 common61_28.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 └   - update
────────────────────────────────────────



common61_29.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_29.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - apps
  15 │   resources:
  16 │   - deployments
  17 │   verbs:
  18 │   - get
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_29.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - delete
────────────────────────────────────────



common61_3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'objectstorage-provisioner-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common61_3.yaml:39-48
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - secrets
  43 │   - events
  44 │   verbs:
  45 │   - get
  46 │   - delete
  47 │   - update
  48 └   - create
────────────────────────────────────────



common61_30.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_30.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_30.yaml:25-39
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - apps
  27 │   - extensions
  28 │   resources:
  29 │   - daemonsets
  30 │   - statefulsets
  31 │   - deployments
  32 │   verbs:
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_30.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - cronjobs
  44 │   verbs:
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common61_30.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-system' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common61_30.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────



common61_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-csi-nodeplugin' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common61_4.yaml:10-16
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   verbs:
  15 │   - get
  16 └   - list
────────────────────────────────────────



common61_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common61_5.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 └   - watch
────────────────────────────────────────



common61_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-cluster-mgmt' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common61_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 common61_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common61_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common61_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────



common61_7.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-global' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common61_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 common61_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_7.yaml:46-58
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - batch
  48 │   resources:
  49 │   - jobs
  50 │   - cronjobs
  51 │   verbs:
  52 │   - get
  53 │   - list
  54 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common61_7.yaml:126-141
────────────────────────────────────────
 126 ┌ - apiGroups:
 127 │   - policy
 128 │   - apps
 129 │   - extensions
 130 │   resources:
 131 │   - poddisruptionbudgets
 132 │   - deployments
 133 │   - replicasets
 134 └   verbs:
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-global' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common61_7.yaml:22-37
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - events
  26 │   - persistentvolumes
  27 │   - persistentvolumeclaims
  28 │   - endpoints
  29 │   - services
  30 └   verbs:
  ..   
────────────────────────────────────────



common61_8.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 common61_8.yaml:10-20
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - persistentvolumes
  17 │   verbs:
  18 └   - get
  ..   
────────────────────────────────────────



common68_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-object-bucket' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common68_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-object-bucket' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common68_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────



common68_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0053 (HIGH): ClusterRole 'rook-ceph-system' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 common68_12.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - pods/exec
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



common68_2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cephfs-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common68_2.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 └   - list
────────────────────────────────────────



common68_26.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common68_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────



common68_27.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 common68_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_27.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 │   - watch
  28 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_27.yaml:59-66
────────────────────────────────────────
  59 ┌ - apiGroups:
  60 │   - apps
  61 │   resources:
  62 │   - deployments/scale
  63 │   - deployments
  64 │   verbs:
  65 │   - patch
  66 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-mgr' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common68_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────



common68_28.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-osd' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common68_28.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'rook-ceph-osd' shouldn't have access to manage secrets in namespace 'rook-ceph'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 common68_28.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 └   - update
────────────────────────────────────────



common68_29.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_29.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - apps
  15 │   resources:
  16 │   - deployments
  17 │   verbs:
  18 │   - get
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_29.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - delete
────────────────────────────────────────



common68_3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'objectstorage-provisioner-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common68_3.yaml:39-48
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - secrets
  43 │   - events
  44 │   verbs:
  45 │   - get
  46 │   - delete
  47 │   - update
  48 └   - create
────────────────────────────────────────



common68_30.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_30.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_30.yaml:25-39
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - apps
  27 │   - extensions
  28 │   resources:
  29 │   - daemonsets
  30 │   - statefulsets
  31 │   - deployments
  32 │   verbs:
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_30.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - cronjobs
  44 │   verbs:
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common68_30.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-system' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common68_30.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────



common68_4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-csi-nodeplugin' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common68_4.yaml:10-16
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   verbs:
  15 │   - get
  16 └   - list
────────────────────────────────────────



common68_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common68_5.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 └   - watch
────────────────────────────────────────



common68_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-cluster-mgmt' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common68_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 common68_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common68_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common68_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────



common68_7.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-global' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common68_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 common68_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_7.yaml:46-58
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - batch
  48 │   resources:
  49 │   - jobs
  50 │   - cronjobs
  51 │   verbs:
  52 │   - get
  53 │   - list
  54 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common68_7.yaml:126-141
────────────────────────────────────────
 126 ┌ - apiGroups:
 127 │   - policy
 128 │   - apps
 129 │   - extensions
 130 │   resources:
 131 │   - poddisruptionbudgets
 132 │   - deployments
 133 │   - replicasets
 134 └   verbs:
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-global' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common68_7.yaml:22-37
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - events
  26 │   - persistentvolumes
  27 │   - persistentvolumeclaims
  28 │   - endpoints
  29 │   - services
  30 └   verbs:
  ..   
────────────────────────────────────────



common68_8.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 common68_8.yaml:10-20
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - persistentvolumes
  17 │   verbs:
  18 └   - get
  ..   
────────────────────────────────────────



common6_10.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-object-bucket' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common6_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-object-bucket' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common6_10.yaml:10-19
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - create
  18 │   - update
  19 └   - delete
────────────────────────────────────────



common6_12.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0053 (HIGH): ClusterRole 'rook-ceph-system' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 common6_12.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - pods/exec
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



common6_2.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cephfs-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common6_2.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 └   - list
────────────────────────────────────────



common6_26.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-cmd-reporter' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common6_26.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────



common6_27.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 common6_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_27.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 │   - watch
  28 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-mgr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_27.yaml:59-66
────────────────────────────────────────
  59 ┌ - apiGroups:
  60 │   - apps
  61 │   resources:
  62 │   - deployments/scale
  63 │   - deployments
  64 │   verbs:
  65 │   - patch
  66 └   - delete
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-mgr' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common6_27.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - services
  12 │   - pods/log
  13 │   verbs:
  14 │   - get
  15 └   - list
  ..   
────────────────────────────────────────



common6_28.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-osd' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common6_28.yaml:14-24
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - configmaps
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'rook-ceph-osd' shouldn't have access to manage secrets in namespace 'rook-ceph'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 common6_28.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 │   - get
  13 └   - update
────────────────────────────────────────



common6_29.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_29.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - apps
  15 │   resources:
  16 │   - deployments
  17 │   verbs:
  18 │   - get
  19 └   - delete
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-purge-osd' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_29.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - batch
  22 │   resources:
  23 │   - jobs
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - delete
────────────────────────────────────────



common6_3.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'objectstorage-provisioner-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common6_3.yaml:39-48
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - ''
  41 │   resources:
  42 │   - secrets
  43 │   - events
  44 │   verbs:
  45 │   - get
  46 │   - delete
  47 │   - update
  48 └   - create
────────────────────────────────────────



common6_31.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_31.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_31.yaml:25-39
────────────────────────────────────────
  25 ┌ - apiGroups:
  26 │   - apps
  27 │   - extensions
  28 │   resources:
  29 │   - daemonsets
  30 │   - statefulsets
  31 │   - deployments
  32 │   verbs:
  33 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): Role 'rook-ceph-system' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_31.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - cronjobs
  44 │   verbs:
  45 └   - delete
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'rook-ceph-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common6_31.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'rook-ceph-system' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common6_31.yaml:11-24
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - pods
  15 │   - configmaps
  16 │   - services
  17 │   verbs:
  18 │   - get
  19 └   - list
  ..   
────────────────────────────────────────



common6_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-csi-nodeplugin' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common6_4.yaml:10-16
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   verbs:
  15 │   - get
  16 └   - list
────────────────────────────────────────



common6_5.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rbd-external-provisioner-runner' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common6_5.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 └   - watch
────────────────────────────────────────



common6_6.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-cluster-mgmt' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common6_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0042 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 common6_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 common6_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-cluster-mgmt' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common6_6.yaml:10-29
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   - apps
  13 │   - extensions
  14 │   resources:
  15 │   - secrets
  16 │   - pods
  17 │   - pods/log
  18 └   - services
  ..   
────────────────────────────────────────



common6_7.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 110, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'rook-ceph-global' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 common6_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 common6_7.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - pods
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - secrets
  17 │   - configmaps
  18 └   verbs:
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_7.yaml:46-58
────────────────────────────────────────
  46 ┌ - apiGroups:
  47 │   - batch
  48 │   resources:
  49 │   - jobs
  50 │   - cronjobs
  51 │   verbs:
  52 │   - get
  53 │   - list
  54 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'rook-ceph-global' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 common6_7.yaml:126-141
────────────────────────────────────────
 126 ┌ - apiGroups:
 127 │   - policy
 128 │   - apps
 129 │   - extensions
 130 │   resources:
 131 │   - poddisruptionbudgets
 132 │   - deployments
 133 │   - replicasets
 134 └   verbs:
 ...   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'rook-ceph-global' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 common6_7.yaml:22-37
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - events
  26 │   - persistentvolumes
  27 │   - persistentvolumeclaims
  28 │   - endpoints
  29 │   - services
  30 └   verbs:
  ..   
────────────────────────────────────────



common6_8.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 common6_8.yaml:10-20
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - configmaps
  14 │   - nodes
  15 │   - nodes/proxy
  16 │   - persistentvolumes
  17 │   verbs:
  18 └   - get
  ..   
────────────────────────────────────────



communication-pods.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'server-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'server-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'server-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'server-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'server-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'server-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'server-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'server-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'server-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'server-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'server-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'server-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "server-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod server-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 communication-pods.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server-pod
   5 │   labels:
   6 └     app: server
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod server-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 communication-pods.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod server-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 communication-pods.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



communication-pods_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-container' of Pod 'client-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-container' of Pod 'client-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-container' of 'pod' 'client-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-container' of Pod 'client-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-container' of Pod 'client-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-container' of Pod 'client-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-container' of Pod 'client-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-container' of Pod 'client-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-container' of Pod 'client-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-container' of Pod 'client-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-container' of Pod 'client-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-container' of Pod 'client-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-container" of pod "client-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod client-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 communication-pods_1.yaml:4
────────────────────────────────────────
   4 [   name: client-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container client-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 communication-pods_1.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod client-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 communication-pods_1.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox-container
   8 │     image: busybox
   9 │     command:
  10 │     - sh
  11 │     - -c
  12 └     - sleep 3000
────────────────────────────────────────



company-deployment.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'company' of Deployment 'company' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'company' of Deployment 'company' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'company' of 'deployment' 'company' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'company' of Deployment 'company' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'company' of Deployment 'company' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'company' of Deployment 'company' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'company' of Deployment 'company' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'company' of Deployment 'company' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'company' of Deployment 'company' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'company' of Deployment 'company' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'company' of Deployment 'company' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'company' of Deployment 'company' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "company" of deployment "company" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment company in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 company-deployment.yaml:4
────────────────────────────────────────
   4 [   name: company
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container company in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment company in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 company-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 │               value: k8s
  24 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container company in deployment company (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 company-deployment.yaml:16-23
────────────────────────────────────────
  16 ┌         - name: company
  17 │           image: gpalve/companyms:latest
  18 │           imagePullPolicy: Always
  19 │           ports:
  20 │             - containerPort: 8081
  21 │           env:
  22 │             - name: SPRING_PROFILE_ACTIVE
  23 └               value: k8s
────────────────────────────────────────



company-deployment1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'company' of Deployment 'company' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'company' of Deployment 'company' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'company' of 'deployment' 'company' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'company' of Deployment 'company' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'company' of Deployment 'company' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'company' of Deployment 'company' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'company' of Deployment 'company' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'company' of Deployment 'company' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'company' of Deployment 'company' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'company' of Deployment 'company' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'company' of Deployment 'company' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'company' of Deployment 'company' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "company" of deployment "company" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment company in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 company-deployment1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: company
   6 └   name: company
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container company in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment company in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 company-deployment1.yaml:17-26
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 │               value: k8s
  26 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container company in deployment company (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 company-deployment1.yaml:18-25
────────────────────────────────────────
  18 ┌         - name: company
  19 │           image: collins6299/company-service:latest
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8081
  23 │           env:
  24 │             - name: SPRING_PROFILES_ACTIVE
  25 └               value: k8s
────────────────────────────────────────



company-deployment2.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'company' of Deployment 'company' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'company' of Deployment 'company' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'company' of 'deployment' 'company' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'company' of Deployment 'company' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'company' of Deployment 'company' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'company' of Deployment 'company' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'company' of Deployment 'company' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'company' of Deployment 'company' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'company' of Deployment 'company' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'company' of Deployment 'company' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'company' of Deployment 'company' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'company' of Deployment 'company' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "company" of deployment "company" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment company in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 company-deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: company
   5 │   labels:
   6 └     app: company
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container company in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment company in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 company-deployment2.yaml:17-26
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 │           value: k8s
  26 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container company in deployment company (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 company-deployment2.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: company
  19 │         image: ashlesh1910/companyms:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 8081
  23 │         env:
  24 │         - name: SPRING_PROFILES_ACTIVE
  25 └           value: k8s
────────────────────────────────────────



compiler.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'compiler' of Pod 'compiler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'compiler' of Pod 'compiler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'compiler' of 'pod' 'compiler' in 'aiml' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'compiler' of Pod 'compiler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'compiler' of Pod 'compiler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'compiler' of Pod 'compiler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'compiler' of Pod 'compiler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'compiler' of Pod 'compiler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "compiler" of pod "compiler" in "aiml" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container compiler in aiml namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compiler.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod compiler in aiml namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compiler.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: compiler
  16 └   serviceAccountName: inference
────────────────────────────────────────



compiler1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'compiler' of Pod 'compiler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'compiler' of Pod 'compiler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'compiler' of 'pod' 'compiler' in 'aiml' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'compiler' of Pod 'compiler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'compiler' of Pod 'compiler' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'compiler' of Pod 'compiler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'compiler' of Pod 'compiler' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'compiler' of Pod 'compiler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'compiler' of Pod 'compiler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "compiler" of pod "compiler" in "aiml" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container compiler in aiml namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compiler1.yaml:10-15
────────────────────────────────────────
  10 ┌   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 └     name: compiler
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod compiler in aiml namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compiler1.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │   - command:
  11 │     - sh
  12 │     - -c
  13 │     - sleep infinity
  14 │     image: ${AIML_DL_IMAGE}
  15 │     name: compiler
  16 └   serviceAccountName: inference
────────────────────────────────────────



complete-demo1_1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts" of deployment "carts" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment carts in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_1.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carts in deployment carts (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo1_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders' of Deployment 'orders' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders' of Deployment 'orders' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders' of Deployment 'orders' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders" of deployment "orders" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment orders in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_11.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container orders in deployment orders (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────



complete-demo1_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders-db" of deployment "orders-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_13.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_13.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo1_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_15.yaml:18-52
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 99m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo1_17.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue-master' of Deployment 'queue-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue-master' of 'deployment' 'queue-master' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue-master" of deployment "queue-master" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment queue-master in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue-master in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment queue-master in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_17.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue-master in deployment queue-master (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo1_19.yaml (kubernetes)
===================================
Tests: 126 (SUCCESSES: 96, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 18, MEDIUM: 9, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-exporter' of 'deployment' 'rabbitmq' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-exporter" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_19.yaml:30-36
────────────────────────────────────────
  30 ┌             drop:
  31 │             - all
  32 │             add:
  33 │             - CHOWN
  34 │             - SETGID
  35 │             - SETUID
  36 └             - DAC_OVERRIDE
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_19.yaml:20-44
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-exporter in deployment rabbitmq (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────



complete-demo1_21.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'session-db' of Deployment 'session-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "session-db" of deployment "session-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_21.yaml:28-33
────────────────────────────────────────
  28 ┌             drop:
  29 │             - all
  30 │             add:
  31 │             - CHOWN
  32 │             - SETGID
  33 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment session-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_21.yaml:20-36
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
────────────────────────────────────────



complete-demo1_23.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'shipping' of Deployment 'shipping' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shipping" of deployment "shipping" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment shipping in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shipping in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_23.yaml:18-53
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 └             -Dspring.zipkin.enabled=false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container shipping in deployment shipping (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────



complete-demo1_25.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user" of deployment "user" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment user in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_25.yaml:18-55
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user in deployment user (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo1_27.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user-db' of Deployment 'user-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user-db" of deployment "user-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_27.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_27.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user-db in deployment user-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────



complete-demo1_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts-db" of deployment "carts-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_3.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo1_5.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo1_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_5.yaml:18-56
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────



complete-demo1_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue-db' of 'deployment' 'catalogue-db' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue-db" of deployment "catalogue-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue-db in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_7.yaml:18-30
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue-db in deployment catalogue-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────



complete-demo1_9.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 2, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'front-end' of Deployment 'front-end' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo1_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'front-end' of Deployment 'front-end' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo1_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo1_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "front-end" of deployment "front-end" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo1_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment front-end in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo1_9.yaml:16-51
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container front-end in deployment front-end (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo1_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────



complete-demo2_1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts" of deployment "carts" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment carts in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_1.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carts in deployment carts (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo2_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders' of Deployment 'orders' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders' of Deployment 'orders' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders' of Deployment 'orders' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders" of deployment "orders" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment orders in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_11.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container orders in deployment orders (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────



complete-demo2_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders-db" of deployment "orders-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_13.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_13.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo2_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_15.yaml:18-52
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 99m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo2_17.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue-master' of Deployment 'queue-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue-master' of 'deployment' 'queue-master' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue-master" of deployment "queue-master" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment queue-master in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue-master in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment queue-master in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_17.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue-master in deployment queue-master (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo2_19.yaml (kubernetes)
===================================
Tests: 126 (SUCCESSES: 96, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 18, MEDIUM: 9, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-exporter' of 'deployment' 'rabbitmq' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-exporter" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_19.yaml:30-36
────────────────────────────────────────
  30 ┌             drop:
  31 │             - all
  32 │             add:
  33 │             - CHOWN
  34 │             - SETGID
  35 │             - SETUID
  36 └             - DAC_OVERRIDE
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_19.yaml:20-44
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-exporter in deployment rabbitmq (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────



complete-demo2_21.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'session-db' of Deployment 'session-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "session-db" of deployment "session-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_21.yaml:28-33
────────────────────────────────────────
  28 ┌             drop:
  29 │             - all
  30 │             add:
  31 │             - CHOWN
  32 │             - SETGID
  33 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment session-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_21.yaml:20-36
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
────────────────────────────────────────



complete-demo2_23.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'shipping' of Deployment 'shipping' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shipping" of deployment "shipping" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment shipping in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shipping in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_23.yaml:18-53
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 └             -Dspring.zipkin.enabled=false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container shipping in deployment shipping (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────



complete-demo2_25.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user" of deployment "user" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment user in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_25.yaml:18-55
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user in deployment user (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo2_27.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user-db' of Deployment 'user-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user-db" of deployment "user-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_27.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_27.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user-db in deployment user-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────



complete-demo2_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts-db" of deployment "carts-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_3.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo2_5.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo2_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_5.yaml:18-56
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────



complete-demo2_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue-db' of 'deployment' 'catalogue-db' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue-db" of deployment "catalogue-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue-db in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_7.yaml:18-30
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue-db in deployment catalogue-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────



complete-demo2_9.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 2, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'front-end' of Deployment 'front-end' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo2_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'front-end' of Deployment 'front-end' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo2_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo2_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "front-end" of deployment "front-end" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo2_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment front-end in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo2_9.yaml:16-51
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container front-end in deployment front-end (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo2_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────



complete-demo3_1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts" of deployment "carts" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment carts in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_1.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carts in deployment carts (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo3_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders' of Deployment 'orders' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders' of Deployment 'orders' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders' of Deployment 'orders' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders" of deployment "orders" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment orders in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_11.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container orders in deployment orders (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────



complete-demo3_13.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders-db" of deployment "orders-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_13.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_13.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo3_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_15.yaml:18-52
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 99m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo3_17.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue-master' of Deployment 'queue-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue-master' of 'deployment' 'queue-master' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue-master" of deployment "queue-master" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment queue-master in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue-master in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment queue-master in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_17.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue-master in deployment queue-master (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo3_19.yaml (kubernetes)
===================================
Tests: 126 (SUCCESSES: 96, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 18, MEDIUM: 9, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-exporter' of 'deployment' 'rabbitmq' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-exporter" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_19.yaml:30-36
────────────────────────────────────────
  30 ┌             drop:
  31 │             - all
  32 │             add:
  33 │             - CHOWN
  34 │             - SETGID
  35 │             - SETUID
  36 └             - DAC_OVERRIDE
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_19.yaml:20-44
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-exporter in deployment rabbitmq (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────



complete-demo3_21.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'session-db' of Deployment 'session-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "session-db" of deployment "session-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_21.yaml:28-33
────────────────────────────────────────
  28 ┌             drop:
  29 │             - all
  30 │             add:
  31 │             - CHOWN
  32 │             - SETGID
  33 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment session-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_21.yaml:20-36
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
────────────────────────────────────────



complete-demo3_23.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'shipping' of Deployment 'shipping' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shipping" of deployment "shipping" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment shipping in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shipping in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_23.yaml:18-53
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 └             -Dspring.zipkin.enabled=false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container shipping in deployment shipping (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────



complete-demo3_25.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user" of deployment "user" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment user in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_25.yaml:18-55
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user in deployment user (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo3_27.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user-db' of Deployment 'user-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user-db" of deployment "user-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_27.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_27.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user-db in deployment user-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────



complete-demo3_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts-db" of deployment "carts-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_3.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_3.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo3_5.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo3_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_5.yaml:18-56
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────



complete-demo3_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue-db' of 'deployment' 'catalogue-db' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue-db" of deployment "catalogue-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue-db in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_7.yaml:18-30
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue-db in deployment catalogue-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────



complete-demo3_9.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 2, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'front-end' of Deployment 'front-end' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo3_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'front-end' of Deployment 'front-end' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo3_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo3_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "front-end" of deployment "front-end" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo3_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment front-end in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo3_9.yaml:16-51
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container front-end in deployment front-end (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo3_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────



complete-demo_1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts" of deployment "carts" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment carts in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_1.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carts in deployment carts (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_1.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: carts
  20 │         image: weaveworksdemos/carts:0.4.8
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo_11.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders' of Deployment 'orders' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders' of Deployment 'orders' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders' of Deployment 'orders' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders" of deployment "orders" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment orders in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_11.yaml:18-51
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container orders in deployment orders (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_11.yaml:19-45
────────────────────────────────────────
  19 ┌       - name: orders
  20 │         image: weaveworksdemos/orders:0.4.7
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 500m
  ..   
────────────────────────────────────────



complete-demo_13.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders-db" of deployment "orders-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_13.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_13.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_13.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: orders-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo_15.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_15.yaml:18-52
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 99m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_15.yaml:19-50
────────────────────────────────────────
  19 ┌       - name: payment
  20 │         image: weaveworksdemos/payment:0.4.3
  21 │         resources:
  22 │           limits:
  23 │             cpu: 200m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 99m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo_17.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue-master' of Deployment 'queue-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue-master' of 'deployment' 'queue-master' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue-master" of deployment "queue-master" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment queue-master in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue-master in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment queue-master in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_17.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue-master in deployment queue-master (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_17.yaml:19-33
────────────────────────────────────────
  19 ┌       - name: queue-master
  20 │         image: weaveworksdemos/queue-master:0.3.1
  21 │         env:
  22 │         - name: JAVA_OPTS
  23 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  24 │             -Dspring.zipkin.enabled=false
  25 │         resources:
  26 │           limits:
  27 └             cpu: 300m
  ..   
────────────────────────────────────────



complete-demo_19.yaml (kubernetes)
==================================
Tests: 126 (SUCCESSES: 96, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 18, MEDIUM: 9, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-exporter' of 'deployment' 'rabbitmq' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_19.yaml:21-37
────────────────────────────────────────
  21 ┌       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 │         securityContext:
  29 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-exporter" of deployment "rabbitmq" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_19.yaml:30-36
────────────────────────────────────────
  30 ┌             drop:
  31 │             - all
  32 │             add:
  33 │             - CHOWN
  34 │             - SETGID
  35 │             - SETUID
  36 └             - DAC_OVERRIDE
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_19.yaml:20-44
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: rabbitmq
  22 │         image: rabbitmq:3.6.8-management
  23 │         ports:
  24 │         - containerPort: 15672
  25 │           name: management
  26 │         - containerPort: 5672
  27 │           name: rabbitmq
  28 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-exporter in deployment rabbitmq (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_19.yaml:38-42
────────────────────────────────────────
  38 ┌       - name: rabbitmq-exporter
  39 │         image: kbudde/rabbitmq-exporter
  40 │         ports:
  41 │         - containerPort: 9090
  42 └           name: exporter
────────────────────────────────────────



complete-demo_21.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'session-db' of Deployment 'session-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "session-db" of deployment "session-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_21.yaml:21-34
────────────────────────────────────────
  21 ┌       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 │             drop:
  29 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_21.yaml:28-33
────────────────────────────────────────
  28 ┌             drop:
  29 │             - all
  30 │             add:
  31 │             - CHOWN
  32 │             - SETGID
  33 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment session-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_21.yaml:20-36
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: session-db
  22 │         image: redis:alpine
  23 │         ports:
  24 │         - name: redis
  25 │           containerPort: 6379
  26 │         securityContext:
  27 │           capabilities:
  28 └             drop:
  ..   
────────────────────────────────────────



complete-demo_23.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'shipping' of Deployment 'shipping' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shipping" of deployment "shipping" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment shipping in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shipping in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_23.yaml:18-53
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 └             -Dspring.zipkin.enabled=false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container shipping in deployment shipping (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_23.yaml:19-47
────────────────────────────────────────
  19 ┌       - name: shipping
  20 │         image: weaveworksdemos/shipping:0.4.8
  21 │         env:
  22 │         - name: ZIPKIN
  23 │           value: zipkin.jaeger.svc.cluster.local
  24 │         - name: JAVA_OPTS
  25 │           value: -Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  26 │             -Dspring.zipkin.enabled=false
  27 └         resources:
  ..   
────────────────────────────────────────



complete-demo_25.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user" of deployment "user" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment user in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_25.yaml:18-55
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user in deployment user (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_25.yaml:19-53
────────────────────────────────────────
  19 ┌       - name: user
  20 │         image: weaveworksdemos/user:0.4.7
  21 │         resources:
  22 │           limits:
  23 │             cpu: 300m
  24 │             memory: 200Mi
  25 │           requests:
  26 │             cpu: 100m
  27 └             memory: 100Mi
  ..   
────────────────────────────────────────



complete-demo_27.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user-db' of Deployment 'user-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user-db" of deployment "user-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_27.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_27.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user-db in deployment user-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_27.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: user-db
  20 │         image: weaveworksdemos/user-db:0.3.0
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────



complete-demo_3.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts-db" of deployment "carts-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_3.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 │             drop:
  27 └             - all
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_3.yaml:26-31
────────────────────────────────────────
  26 ┌             drop:
  27 │             - all
  28 │             add:
  29 │             - CHOWN
  30 │             - SETGID
  31 └             - SETUID
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_3.yaml:18-41
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: carts-db
  20 │         image: mongo
  21 │         ports:
  22 │         - name: mongo
  23 │           containerPort: 27017
  24 │         securityContext:
  25 │           capabilities:
  26 └             drop:
  ..   
────────────────────────────────────────



complete-demo_5.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 complete-demo_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_5.yaml:18-56
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_5.yaml:19-54
────────────────────────────────────────
  19 ┌       - name: catalogue
  20 │         image: weaveworksdemos/catalogue:0.3.5
  21 │         command:
  22 │         - /app
  23 │         args:
  24 │         - -port=80
  25 │         resources:
  26 │           limits:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────



complete-demo_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue-db' of 'deployment' 'catalogue-db' in 'sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue-db" of deployment "catalogue-db" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue-db in sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue-db in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_7.yaml:18-30
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue-db in deployment catalogue-db (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_7.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: catalogue-db
  20 │         image: weaveworksdemos/catalogue-db:0.3.0
  21 │         env:
  22 │         - name: MYSQL_ROOT_PASSWORD
  23 │           value: fake_password
  24 │         - name: MYSQL_DATABASE
  25 │           value: socksdb
  26 │         ports:
  27 │         - name: mysql
  28 └           containerPort: 3306
────────────────────────────────────────



complete-demo_9.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 2, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'front-end' of Deployment 'front-end' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-demo_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'front-end' of Deployment 'front-end' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-demo_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-demo_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "front-end" of deployment "front-end" in "sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-demo_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment front-end in sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-demo_9.yaml:16-51
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container front-end in deployment front-end (namespace: sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-demo_9.yaml:17-49
────────────────────────────────────────
  17 ┌       - name: front-end
  18 │         image: weaveworksdemos/front-end:0.3.12
  19 │         resources:
  20 │           limits:
  21 │             cpu: 300m
  22 │             memory: 1000Mi
  23 │           requests:
  24 │             cpu: 100m
  25 └             memory: 300Mi
  ..   
────────────────────────────────────────



complete-deployment_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mysql-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 complete-deployment_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mysql-statefulset
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-deployment_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 │           valueFrom:
  27 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql-statefulset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-deployment_2.yaml:18-37
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: mysql
  20 │         image: mysql:8.2.0
  21 │         ports:
  22 │         - containerPort: 3306
  23 │           name: mysql
  24 │         env:
  25 │         - name: MYSQL_ROOT_PASSWORD
  26 └           valueFrom:
  ..   
────────────────────────────────────────



complete-deployment_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'petstore-webapp' of 'deployment' 'petstore-webapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'petstore-webapp' of Deployment 'petstore-webapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "petstore-webapp" of deployment "petstore-webapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment petstore-webapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 complete-deployment_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: petstore-webapp
   5 │   labels:
   6 └     app: petstore-webapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container petstore-webapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment petstore-webapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete-deployment_3.yaml:17-29
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 └         - name: SPRING_APPLICATION_JSON
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container petstore-webapp in deployment petstore-webapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 complete-deployment_3.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: petstore-webapp
  19 │         image: alendoc/java-petstore:v1
  20 │         stdin: true
  21 │         tty: true
  22 │         ports:
  23 │         - containerPort: 8080
  24 │         env:
  25 │         - name: SPRING_APPLICATION_JSON
  26 └           valueFrom:
  ..   
────────────────────────────────────────



complete1_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pod-persistent-volume-container' of 'pod' 'pod-persistent-volume' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pod-persistent-volume-container' of Pod 'pod-persistent-volume' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pod-persistent-volume-container" of pod "pod-persistent-volume" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-persistent-volume in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 complete1_2.yaml:4
────────────────────────────────────────
   4 [   name: pod-persistent-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-persistent-volume in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete1_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 └       name: pod-persistent-volume-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-persistent-volume in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complete1_2.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: pod-persistent-volume-container
   8 │     image: nginx
   9 │     volumeMounts:
  10 │     - mountPath: /usr/share/nginx/html
  11 │       name: pod-persistent-volume-volume
  12 │   volumes:
  13 │   - name: pod-persistent-volume-volume
  14 │     persistentVolumeClaim:
  15 └       claimName: persistent-volume-claim
────────────────────────────────────────



completo.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'apache' of Deployment 'web-d' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'apache' of Deployment 'web-d' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'apache' of 'deployment' 'web-d' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'apache' of Deployment 'web-d' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'apache' of Deployment 'web-d' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'apache' of Deployment 'web-d' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'apache' of Deployment 'web-d' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'apache' of Deployment 'web-d' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "apache" of deployment "web-d" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment web-d in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 completo.yaml:4
────────────────────────────────────────
   4 [   name: web-d
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment web-d in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-d in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web-d in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container apache in deployment web-d (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 completo.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



completo1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'apache' of Deployment 'web-d' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'apache' of Deployment 'web-d' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'apache' of 'deployment' 'web-d' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'apache' of Deployment 'web-d' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'apache' of Deployment 'web-d' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'apache' of Deployment 'web-d' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'apache' of Deployment 'web-d' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'apache' of Deployment 'web-d' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'apache' of Deployment 'web-d' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "apache" of deployment "web-d" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment web-d in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 completo1.yaml:4
────────────────────────────────────────
   4 [   name: web-d
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment web-d in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-d in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web-d in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container apache in deployment web-d (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 completo1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: apache
  17 │         image: apasoft/web:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



completo2_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 completo2_1.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo2_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo2_1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx:latest
   9 │     ports:
  10 └     - containerPort: 80
────────────────────────────────────────



completo3_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'nginx' in 'miespacio' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "nginx" in "miespacio" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in miespacio namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in miespacio namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in miespacio namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 completo3_1.yaml:7-11
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: nginx
   9 │     image: nginx:latest
  10 │     ports:
  11 └     - containerPort: 80
────────────────────────────────────────



complex-web-dep.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'complex-web' of Deployment 'complex-web-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'complex-web' of 'deployment' 'complex-web-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'complex-web' of Deployment 'complex-web-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "complex-web" of deployment "complex-web-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment complex-web-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 complex-web-dep.yaml:4
────────────────────────────────────────
   4 [   name: complex-web-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment complex-web-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container complex-web-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-dep.yaml:28-38
────────────────────────────────────────
  28 ┌       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 │           requests:
  34 │             cpu: 100m
  35 │             memory: 128Mi
  36 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment complex-web-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-dep.yaml:25-38
────────────────────────────────────────
  25 ┌       nodeSelector:
  26 │         kubernetes.io/os: linux   
  27 │       containers:
  28 │       - name: complex-web
  29 │         image: k8s.gcr.io/hpa-example
  30 │         ports:
  31 │         - containerPort: 80
  32 │         resources:
  33 └           requests:
  ..   
────────────────────────────────────────



complex-web-dep1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'complex-web' of Deployment 'complex-web-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'complex-web' of 'deployment' 'complex-web-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'complex-web' of Deployment 'complex-web-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'complex-web' of Deployment 'complex-web-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "complex-web" of deployment "complex-web-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment complex-web-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 complex-web-dep1.yaml:4
────────────────────────────────────────
   4 [   name: complex-web-dep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment complex-web-dep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container complex-web-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-dep1.yaml:33-43
────────────────────────────────────────
  33 ┌       - name: complex-web
  34 │         image: k8s.gcr.io/hpa-example
  35 │         ports:
  36 │         - containerPort: 80
  37 │         resources:
  38 │           requests:
  39 │             cpu: 100m
  40 │             memory: 128Mi
  41 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment complex-web-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-dep1.yaml:25-43
────────────────────────────────────────
  25 ┌       nodeSelector:
  26 │         kubernetes.io/os: linux
  27 │       tolerations:
  28 │       - key: "kubernetes.azure.com/scalesetpriority"
  29 │         operator: "Equal"
  30 │         value: "spot"
  31 │         effect: "NoSchedule"           
  32 │       containers:
  33 └       - name: complex-web
  ..   
────────────────────────────────────────



complex-web-load.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cw-load-generator' of 'deployment' 'complex-web-load' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cw-load-generator' of Deployment 'complex-web-load' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cw-load-generator" of deployment "complex-web-load" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment complex-web-load in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 complex-web-load.yaml:4
────────────────────────────────────────
   4 [   name: complex-web-load
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container complex-web-load in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-load.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment complex-web-load in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-load.yaml:15-24
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux  
  17 │       containers:
  18 │       - name: cw-load-generator
  19 │         image: busybox
  20 │         args:
  21 │         - /bin/sh
  22 │         - -c
  23 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  24 └         imagePullPolicy: Always
────────────────────────────────────────



complex-web-load1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cw-load-generator' of 'deployment' 'complex-web-load' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cw-load-generator' of Deployment 'complex-web-load' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cw-load-generator' of Deployment 'complex-web-load' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cw-load-generator" of deployment "complex-web-load" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment complex-web-load in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 complex-web-load1.yaml:4
────────────────────────────────────────
   4 [   name: complex-web-load
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container complex-web-load in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-load1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: cw-load-generator
  24 │         image: busybox
  25 │         args:
  26 │         - /bin/sh
  27 │         - -c
  28 │         - while sleep 0.01; do wget -q -O- http://complex-web-svc; echo " Sent"; done
  29 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment complex-web-load in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 complex-web-load1.yaml:15-29
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux 
  17 │       tolerations:
  18 │       - key: "kubernetes.azure.com/scalesetpriority"
  19 │         operator: "Equal"
  20 │         value: "spot"
  21 │         effect: "NoSchedule"                 
  22 │       containers:
  23 └       - name: cw-load-generator
  ..   
────────────────────────────────────────



compliance-reporter-pod.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-inventory' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-inventory in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-inventory (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



compliance-reporter-pod1.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-inventory' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-inventory' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod1.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod1.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-inventory in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod1.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-inventory (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <INVENTORY_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



compliance-reporter-pod1_1.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-network-access' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-network-access in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-network-access (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod1_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



compliance-reporter-pod1_2.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-policy-audit' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-policy-audit in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-policy-audit (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod1_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



compliance-reporter-pod1_3.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-cis-benchmark' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-cis-benchmark in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-cis-benchmark (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod1_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



compliance-reporter-pod_1.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-network-access' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-network-access' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-network-access in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-network-access (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod_1.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <NETWORK_ACCESS_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



compliance-reporter-pod_2.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-policy-audit' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-policy-audit' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-policy-audit in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-policy-audit (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod_2.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <POLICY_AUDIT_REPORT_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



compliance-reporter-pod_3.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reporter' of Pod 'run-reporter-cis-benchmark' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'run-reporter-cis-benchmark' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:37-46
────────────────────────────────────────
  37 ┌       allowPrivilegeEscalation: false
  38 │       capabilities:
  39 │         drop:
  40 │         - ALL
  41 │       privileged: false
  42 │       runAsGroup: 0
  43 │       runAsNonRoot: false
  44 │       runAsUser: 0
  45 │       seccompProfile:
  46 └         type: RuntimeDefault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod run-reporter-cis-benchmark in tigera-compliance namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:9-82
────────────────────────────────────────
   9 ┌   nodeSelector:
  10 │     kubernetes.io/os: linux
  11 │   restartPolicy: Never
  12 │   serviceAccountName: tigera-compliance-reporter
  13 │   tolerations:
  14 │   - key: node-role.kubernetes.io/master
  15 │     effect: NoSchedule
  16 │   imagePullSecrets:
  17 └   - name: tigera-pull-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reporter in pod run-reporter-cis-benchmark (namespace: tigera-compliance) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 compliance-reporter-pod_3.yaml:19-62
────────────────────────────────────────
  19 ┌   - name: reporter
  20 │     image: quay.io/tigera/compliance-reporter:<CALICO_VERSION>
  21 │     env:
  22 │     - name: TIGERA_COMPLIANCE_REPORT_NAME
  23 │       value: <CIS_BENCHMARK_NAME>
  24 │     - name: TIGERA_COMPLIANCE_REPORT_START_TIME
  25 │       value: <TIGERA_COMPLIANCE_REPORT_START_TIME>
  26 │     - name: TIGERA_COMPLIANCE_REPORT_END_TIME
  27 └       value: <TIGERA_COMPLIANCE_REPORT_END_TIME>
  ..   
────────────────────────────────────────



components (1)_6.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components (1)_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components (1)_7.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components (1)_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components (1)_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components (1)_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components-v0.3.61_5.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.61_5.yaml:9-45
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components-v0.3.61_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components-v0.3.61_5.yaml:18-45
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



components-v0.3.61_6.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.61_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



components-v0.3.62_5.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.62_5.yaml:9-45
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components-v0.3.62_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components-v0.3.62_5.yaml:18-45
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



components-v0.3.62_6.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.62_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



components-v0.3.63_5.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.63_5.yaml:9-45
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components-v0.3.63_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components-v0.3.63_5.yaml:18-45
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



components-v0.3.63_6.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.63_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



components-v0.3.64_5.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.64_5.yaml:9-45
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components-v0.3.64_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components-v0.3.64_5.yaml:18-45
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



components-v0.3.64_6.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.64_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



components-v0.3.6_5.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.6_5.yaml:9-45
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components-v0.3.6_5.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         - --kubelet-preferred-address-types=InternalIP
  31 └         - --v=2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components-v0.3.6_5.yaml:18-45
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server-amd64:v0.3.6
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



components-v0.3.6_6.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.3.6_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



components-v0.6.1_6.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.6.1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components-v0.6.1_7.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.6.1_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components-v0.6.1_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components-v0.6.1_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



components-v0.7.1_6.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.7.1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components-v0.7.1_7.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components-v0.7.1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components-v0.7.1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components-v0.7.1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components-v0.7.1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components-v0.7.1_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components-v0.7.1_7.yaml:20-72
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components-v0.7.1_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



components10_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components10_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components10_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components10_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components10_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components10_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components11_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components11_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components11_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components11_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components11_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components11_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components12_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components12_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components12_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 components12_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components12_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components12_7.yaml:20-69
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components12_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-insecure-tls
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components13_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components13_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components13_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components13_7.yaml:9-66
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components13_7.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components13_7.yaml:20-66
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components14_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components14_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components14_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components14_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components14_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components14_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components15_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components15_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components15_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components15_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components15_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components15_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components16_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components16_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components16_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components16_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components16_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components16_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components17_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components17_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components17_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components17_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components17_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components17_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components18_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components18_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components18_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components18_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components18_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components18_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components19_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components19_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components19_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components19_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components19_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components19_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components1_6.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components1_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components1_7.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components1_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components1_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components1_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components1_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components1_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components1_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components1_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components20_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components20_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components20_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components20_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components20_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components20_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components21_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components21_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components21_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components21_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components21_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components21_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --kubelet-insecure-tls
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components22_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components22_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components22_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components22_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components22_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components22_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components23_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components23_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components23_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components23_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components23_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components23_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


