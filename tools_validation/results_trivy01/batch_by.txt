
Report Summary

┌───────────────────────────────────────┬────────────┬───────────────────┐
│                Target                 │    Type    │ Misconfigurations │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Components48_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ Compute-quota9.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components24_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components24_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components24_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components24_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components24_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components24_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components25_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components26_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components27_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28_5.yaml                   │ kubernetes │        15         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28_7.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components28_8.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components29_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_7.yaml                    │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components2_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components30_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_7.yaml                   │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components31_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components32_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components33_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components34_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_7.yaml                   │ kubernetes │        15         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components35_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components36_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components37_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components38_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_7.yaml                    │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components3_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_7.yaml                   │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components40_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_10.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_11.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_12.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_13.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_14.yaml                  │ kubernetes │         7         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_15.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_16.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_17.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_18.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_19.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_20.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_21.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_22.yaml                  │ kubernetes │         4         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_23.yaml                  │ kubernetes │         4         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_24.yaml                  │ kubernetes │         4         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_25.yaml                  │ kubernetes │         4         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_26.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_27.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components41_28.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_7.yaml                   │ kubernetes │        16         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components42_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components43_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44_5.yaml                   │ kubernetes │        15         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44_7.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components44_8.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components45_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_7.yaml                   │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components46_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_7.yaml                   │ kubernetes │        12         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components47_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_7.yaml                   │ kubernetes │        16         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components49_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_7.yaml                    │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components4_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_7.yaml                   │ kubernetes │         6         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components50_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components51_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components52_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components53_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components55_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components56_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components57_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components58_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components59_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_7.yaml                    │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components5_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components60_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components61_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components62_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_7.yaml                   │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components64_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components66_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components67_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_7.yaml                   │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components68_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_6.yaml                   │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_7.yaml                   │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components69_8.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_7.yaml                    │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components6_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_7.yaml                    │ kubernetes │         8         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components7_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_7.yaml                    │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components8_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_5.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_6.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_7.yaml                    │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components9_8.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_6.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_7.yaml                     │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_8.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231.yaml       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_1.yaml     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_2.yaml     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_3.yaml     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_4.yaml     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_5.yaml     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_6.yaml     │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_7.yaml     │ kubernetes │        12         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_1220231_8.yaml     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_1.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_2.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_3.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_4.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_5.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_6.yaml      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_7.yaml      │ kubernetes │        12         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ components_archive_122023_8.yaml      │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composabilityrequest_editor_role.yaml │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composabilityrequest_viewer_role.yaml │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compose-ingress.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composite.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composite_1.yaml                      │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composite_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composite_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composite_5.yaml                      │ kubernetes │        34         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ composite_6.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ computational-resources.yaml          │ kubernetes │        16         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ computational-resources_1.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ computations.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ computations1.yaml                    │ kubernetes │        17         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ computations1_1.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ computations_1.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota10.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota6.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota7.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quota8.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quote.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-quote1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-resources.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-resources1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-resources1_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ compute-resources1_2.yaml             │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ computing.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ concatenated.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ concatenated1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ concatenated1_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ concatenated1_3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ concatenated_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ concatenated_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ concurency-cronjob.yaml               │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conduit-0.1.0.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conduit-0.1.0_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conduit-0.1.0_11.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conduit-0.1.0_4.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conduit-0.1.0_5.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conduit-0.1.0_7.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conduit-0.1.0_9.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conf-sec-pod.yaml                     │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conf-sec-pod1.yaml                    │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conf-sec-pod2.yaml                    │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conf-sec-pod21.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conf2.yaml                            │ kubernetes │        21         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conf2_1.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ conf5.yaml                            │ kubernetes │        21         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-Map82.yaml                     │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-Map82_1.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-Map82_2.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-artifact-bucket-cm.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-artifact-pvc-cm.yaml           │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-audit-ttl-historical.yaml      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-audit-ttl.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-basic.yaml                     │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-basic1.yaml                    │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-basic1_1.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-basic2.yaml                    │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-basic2_1.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-basic_1.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices.yaml            │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1.yaml           │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_1.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_10.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_11.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_12.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_13.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_14.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_15.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_16.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_17.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_18.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_19.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_2.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_20.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_21.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_22.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_3.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_4.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_5.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_6.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_7.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_8.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices1_9.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2.yaml           │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_1.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_10.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_11.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_12.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_13.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_14.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_15.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_16.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_17.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_18.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_19.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_2.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_20.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_21.yaml        │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_22.yaml        │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_3.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_4.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_5.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_6.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_7.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_8.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices2_9.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_1.yaml          │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_10.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_11.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_12.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_13.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_14.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_15.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_16.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_17.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_18.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_19.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_2.yaml          │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_20.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_21.yaml         │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_22.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_3.yaml          │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_4.yaml          │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_5.yaml          │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_6.yaml          │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_7.yaml          │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_8.yaml          │ kubernetes │        14         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-best-practices_9.yaml          │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-cfg.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-cm.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul.yaml                    │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_1.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_10.yaml                │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_11.yaml                │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_12.yaml                │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_13.yaml                │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_14.yaml                │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_15.yaml                │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_16.yaml                │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_17.yaml                │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_18.yaml                │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_19.yaml                │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_2.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_20.yaml                │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_21.yaml                │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_3.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_4.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_5.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_6.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_7.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_8.yaml                 │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul1_9.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_1.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_10.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_11.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_12.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_13.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_14.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_15.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_16.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_17.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_18.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_19.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_2.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_20.yaml                 │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_21.yaml                 │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_3.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_4.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_5.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_6.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_7.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_8.yaml                  │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-consul_9.yaml                  │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-datasources.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-db-edit-role.yaml              │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-defaults-cm.yaml               │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-deploy-key.sops.yaml           │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-deploy-key.sops1.yaml          │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-deployment.yaml                │ kubernetes │        13         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-deployment_1.yaml              │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-env.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-env1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-features.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-file.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-file1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-file2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-file3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-leader-election-cm.yaml        │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-logging-cm.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-logging.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-alert.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-args.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-args_1.yaml                │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-env-vars.yaml              │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-env-vars_1.yaml            │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-operator.yaml              │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-template.yaml              │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-volume.yaml                │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map-volume_1.yaml              │ kubernetes │        19         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map.yaml.verified.yaml         │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map10.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map100.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map101.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map102.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map103.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map104.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map105.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map106.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map107.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map108.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map109.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map10_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map11.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map111.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map112.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map113.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map116.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map117.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map118.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map119.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map12.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map120.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map121.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map122.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map123.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map124.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map126.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map127.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map128.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map129.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map13.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map130.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map131.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map132.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map133.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map134.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map137.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map138.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map139.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map14.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map140.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map141.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map142.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map143.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map143_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map146.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map15.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map16.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map17.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map18.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map19.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map20_1.yaml                   │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map22.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map24.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map25.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map25_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map26.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map27.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map28.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map29.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map30.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map31.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map32.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map33.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map34.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map35.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map41.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map42.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map43.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map44.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map45.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map45_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map46.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map47.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map48.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map49.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map50.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map51.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map52.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map53.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map54.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map55.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map56.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map57.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map5_1.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map62.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map63.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map66.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map67.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map68.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map7.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map70.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map71.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map72.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map73.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map74.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map75.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map77.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map78.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map79.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map80.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map83.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map84.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map85.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map86.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────┼────────────┼───────────────────┤
│ config-map87.yaml                     │ kubernetes │         0         │
└───────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Components48_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Components48_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Components48_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



Components48_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Components48_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Components48_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Components48_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Components48_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Components48_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Components48_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Components48_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Components48_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



Components48_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 Components48_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components24_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components24_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components24_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components24_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components24_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components24_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components24_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components24_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



components24_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components24_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components25_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components25_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components25_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components25_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components25_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types="InternalIP"
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components25_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types="InternalIP"
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components25_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types="InternalIP"
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components25_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types="InternalIP"
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components25_7.yaml:9-74
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components25_7.yaml:9-74
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components25_7.yaml:20-74
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types="InternalIP"
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components25_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types="InternalIP"
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────



components25_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components25_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components26_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components26_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components26_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components26_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components26_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components26_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components26_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components26_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components26_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components26_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components26_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components26_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components26_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components26_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components27_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components27_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components27_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components27_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components27_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components27_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components27_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components27_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components27_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components27_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components28_5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components28_5.yaml:9-43
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components28_5.yaml:9-43
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components28_5.yaml:23-40
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-insecure-tls
  30 │         ports:
  31 └         - name: main-port
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components28_5.yaml:18-43
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



components28_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components28_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components28_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



components29_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components29_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components29_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components29_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components29_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components29_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components29_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components29_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components29_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components29_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components2_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components2_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components2_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components2_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components2_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components2_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components2_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components2_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components2_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components2_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components30_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components30_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components30_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components30_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components30_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components30_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components30_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components30_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components30_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components30_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components31_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components31_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components31_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components31_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components31_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components31_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components31_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components31_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  ..   
────────────────────────────────────────



components31_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components31_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components32_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components32_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components32_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components32_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components32_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components32_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components32_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components32_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components32_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components32_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components32_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components32_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components32_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components32_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components33_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components33_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components33_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components33_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components33_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components33_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components33_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components33_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components33_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components33_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components34_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components34_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components34_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components34_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components34_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components34_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components34_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components34_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.3
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components34_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components34_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components35_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components35_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components35_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components35_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components35_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components35_7.yaml:9-61
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components35_7.yaml:21-54
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components35_7.yaml:20-61
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.2
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components35_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components35_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components36_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components36_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components36_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components36_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components36_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls=true
  27 │         - --metric-resolution=30s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components36_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls=true
  27 │         - --metric-resolution=30s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components36_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls=true
  27 │         - --metric-resolution=30s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components36_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls=true
  27 │         - --metric-resolution=30s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components36_7.yaml:9-74
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components36_7.yaml:9-74
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components36_7.yaml:20-74
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls=true
  27 │         - --metric-resolution=30s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components36_7.yaml:21-67
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls=true
  27 │         - --metric-resolution=30s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components36_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components36_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components37_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components37_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components37_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components37_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components37_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components37_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components37_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components37_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components37_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components37_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components38_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components38_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components38_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components38_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components38_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components38_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components38_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components38_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components38_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components38_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components38_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components38_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components38_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components38_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components3_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components3_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components3_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components3_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components3_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components3_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components3_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components3_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components3_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components3_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components40_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components40_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components40_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components40_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components40_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components40_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components40_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         - --kubelet-preferred-address-types=InternalIP
  29 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.1
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components40_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         - --kubelet-preferred-address-types=InternalIP
  ..   
────────────────────────────────────────



components40_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components40_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components41_14.yaml (kubernetes)
=================================
Tests: 119 (SUCCESSES: 112, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 components41_14.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 components41_14.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 components41_14.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 components41_14.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 components41_14.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 components41_14.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 components41_14.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



components41_15.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 components41_15.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



components41_16.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 components41_16.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



components41_17.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 components41_17.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.0.0-rc.2
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



components41_19.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_19.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



components41_20.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_20.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



components41_21.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_21.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



components41_22.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 111, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components41_22.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components41_22.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_22.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components41_22.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



components41_23.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 111, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components41_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components41_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components41_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



components41_24.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 111, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components41_24.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components41_24.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_24.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components41_24.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



components41_25.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 111, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components41_25.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components41_25.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_25.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components41_25.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



components41_26.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_26.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



components41_27.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_27.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



components41_28.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components41_28.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



components42_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components42_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components42_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components42_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 components42_7.yaml:9-62
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components42_7.yaml:9-62
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components42_7.yaml:9-62
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components42_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  29 │         imagePullPolicy: IfNotPresent
  30 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components42_7.yaml:20-62
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --kubelet-insecure-tls=true
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.4.1
  ..   
────────────────────────────────────────



components42_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components42_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components43_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components43_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components43_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components43_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components43_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components43_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components43_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components43_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components43_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components43_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components43_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components43_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components43_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components43_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components44_5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components44_5.yaml:9-43
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components44_5.yaml:9-43
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   template:
  13 │     metadata:
  14 │       name: metrics-server
  15 │       labels:
  16 │         k8s-app: metrics-server
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components44_5.yaml:23-41
────────────────────────────────────────
  23 ┌       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 │         args:
  27 │         - --cert-dir=/tmp
  28 │         - --secure-port=4443
  29 │         - --kubelet-preferred-address-types=InternalIP
  30 │         - --kubelet-insecure-tls
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components44_5.yaml:18-43
────────────────────────────────────────
  18 ┌       serviceAccountName: metrics-server
  19 │       volumes:
  20 │       - name: tmp-dir
  21 │         emptyDir: {}
  22 │       containers:
  23 │       - name: metrics-server
  24 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.3.7
  25 │         imagePullPolicy: IfNotPresent
  26 └         args:
  ..   
────────────────────────────────────────



components44_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components44_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components44_6.yaml:10-15
────────────────────────────────────────
  10 ┌   selector:
  11 │     k8s-app: metrics-server
  12 │   ports:
  13 │   - port: 443
  14 │     protocol: TCP
  15 └     targetPort: main-port
────────────────────────────────────────



components45_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components45_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components45_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components45_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components45_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components45_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components45_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components45_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components45_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components45_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components45_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components45_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components45_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components45_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components46_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components46_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components46_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components46_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 components46_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components46_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components46_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components46_7.yaml:20-69
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         - --kubelet-insecure-tls
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components46_7.yaml:22-62
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=4443
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components46_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components46_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components47_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components47_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components47_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components47_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components47_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components47_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components47_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components47_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.1
  ..   
────────────────────────────────────────



components47_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components47_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components49_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components49_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components49_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components49_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 components49_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components49_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components49_7.yaml:9-69
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components49_7.yaml:20-69
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components49_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components49_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components49_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components4_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components4_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components4_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components4_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components4_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components4_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components4_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components4_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components4_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components4_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components50_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components50_6.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: https
  12 │     port: 443
  13 │     protocol: TCP
  14 │     targetPort: https
  15 │   selector:
  16 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components50_6.yaml:10-16
────────────────────────────────────────
  10 ┌   ports:
  11 │   - name: https
  12 │     port: 443
  13 │     protocol: TCP
  14 │     targetPort: https
  15 │   selector:
  16 └     k8s-app: metrics-server
────────────────────────────────────────



components50_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components50_7.yaml:22-70
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components50_7.yaml:22-70
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components50_7.yaml:10-77
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 0
  16 │   template:
  17 │     metadata:
  18 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components50_7.yaml:10-77
────────────────────────────────────────
  10 ┌   selector:
  11 │     matchLabels:
  12 │       k8s-app: metrics-server
  13 │   strategy:
  14 │     rollingUpdate:
  15 │       maxUnavailable: 0
  16 │   template:
  17 │     metadata:
  18 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components50_7.yaml:21-77
────────────────────────────────────────
  21 ┌       containers:
  22 │       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components50_7.yaml:22-70
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         - --kubelet-insecure-tls
  29 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  30 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components50_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components50_8.yaml:9-16
────────────────────────────────────────
   9 ┌   group: metrics.k8s.io
  10 │   groupPriorityMinimum: 100
  11 │   insecureSkipTLSVerify: true
  12 │   service:
  13 │     name: metrics-server
  14 │     namespace: kube-system
  15 │   version: v1beta1
  16 └   versionPriority: 100
────────────────────────────────────────



components51_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components51_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components51_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components51_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components51_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: Never
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components51_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: Never
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components51_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: Never
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components51_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: Never
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components51_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components51_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components51_7.yaml:20-72
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 └         imagePullPolicy: Never
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components51_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: Never
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



components51_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components51_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components52_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components52_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components52_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components52_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components52_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components52_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components52_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components52_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components52_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components52_7.yaml:9-72
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components52_7.yaml:20-72
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components52_7.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



components52_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components52_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components53_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components53_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components53_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components53_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components53_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --requestheader-client-ca-file=/ca/client-ca-file
  24 │         - --kubelet-insecure-tls=true
  25 │         - --secure-port=10250
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components53_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --requestheader-client-ca-file=/ca/client-ca-file
  24 │         - --kubelet-insecure-tls=true
  25 │         - --secure-port=10250
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components53_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --requestheader-client-ca-file=/ca/client-ca-file
  24 │         - --kubelet-insecure-tls=true
  25 │         - --secure-port=10250
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components53_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --requestheader-client-ca-file=/ca/client-ca-file
  24 │         - --kubelet-insecure-tls=true
  25 │         - --secure-port=10250
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components53_7.yaml:9-79
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components53_7.yaml:9-79
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components53_7.yaml:20-79
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --requestheader-client-ca-file=/ca/client-ca-file
  24 │         - --kubelet-insecure-tls=true
  25 │         - --secure-port=10250
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 └         - --metric-resolution=15s
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components53_7.yaml:21-69
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --requestheader-client-ca-file=/ca/client-ca-file
  24 │         - --kubelet-insecure-tls=true
  25 │         - --secure-port=10250
  26 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  27 │         - --kubelet-use-node-status-port
  28 │         - --metric-resolution=15s
  29 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────



components53_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components53_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components55_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components55_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components55_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components55_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components55_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components55_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components55_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components55_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components55_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components55_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components55_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components55_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components55_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components55_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components56_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components56_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components56_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components56_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components56_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components56_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components56_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components56_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components56_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components56_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components57_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components57_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components57_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components57_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components57_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components57_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components57_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components57_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components57_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components57_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components58_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components58_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components58_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components58_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components58_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components58_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components58_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components58_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components58_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components58_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components59_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components59_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components59_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components59_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components59_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components59_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components59_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components59_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components59_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components59_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components59_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components59_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components59_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components59_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components5_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components5_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components5_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components5_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components5_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components5_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components5_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components5_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls=true
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components5_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components5_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components60_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components60_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components60_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components60_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components60_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components60_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components60_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components60_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components60_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components60_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components60_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components60_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components60_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components60_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components61_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components61_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components61_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components61_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components61_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components61_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components61_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components61_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components61_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components61_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components61_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components61_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components61_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components61_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components62_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components62_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components62_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components62_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components62_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components62_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components62_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components62_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components62_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components62_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components62_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components62_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components62_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components62_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components64_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components64_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components64_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components64_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components64_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components64_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components64_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment metrics-server in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components64_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.5.0
  ..   
────────────────────────────────────────



components64_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components64_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components66_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components66_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components66_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components66_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components66_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components66_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components66_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components66_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components66_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components66_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components66_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components66_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components66_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components66_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components67_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components67_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components67_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components67_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components67_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components67_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components67_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components67_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components67_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components67_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components67_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components67_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components67_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components67_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components68_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components68_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components68_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components68_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components68_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components68_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components68_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components68_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components68_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components68_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components68_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components68_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=10250
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components68_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components68_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components69_6.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components69_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components69_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components69_7.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components69_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components69_7.yaml:9-67
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components69_7.yaml:20-67
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components69_7.yaml:21-60
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  28 │         imagePullPolicy: IfNotPresent
  29 └         livenessProbe:
  ..   
────────────────────────────────────────



components69_8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components69_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components6_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components6_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components6_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components6_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 components6_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components6_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components6_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components6_7.yaml:20-70
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 └         - --kubelet-use-node-status-port
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components6_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────



components6_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components6_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components7_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components7_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components7_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components7_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 5, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components7_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components7_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components7_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components7_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components7_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components7_7.yaml:9-73
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components7_7.yaml:20-73
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components7_7.yaml:21-66
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --kubelet-insecure-tls
  23 │         - --cert-dir=/tmp
  24 │         - --secure-port=10250
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components7_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components7_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components8_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components8_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components8_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components8_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components8_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components8_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components8_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components8_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --metric-resolution=15s
  27 │         - --kubelet-insecure-tls=true
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components8_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components8_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components9_6.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components9_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components9_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components9_7.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components9_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components9_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components9_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components9_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  25 │         - --kubelet-use-node-status-port
  26 │         - --kubelet-insecure-tls
  27 │         - --metric-resolution=15s
  28 │         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────



components9_8.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components9_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components_6.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components_7.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'metrics-server' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 components_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_7.yaml:9-70
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components_7.yaml:20-70
────────────────────────────────────────
  20 ┌       hostNetwork: true
  21 │       containers:
  22 │       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 └         - --kubelet-use-node-status-port
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container metrics-server in deployment metrics-server (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 components_7.yaml:22-63
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --kubelet-insecure-tls
  24 │         - --cert-dir=/tmp
  25 │         - --secure-port=4443
  26 │         - --kubelet-port=10250
  27 │         - --kubelet-preferred-address-types=Hostname,InternalDNS,InternalIP,EXternalDNS,ExternalIP
  28 │         - --kubelet-use-node-status-port
  29 │         - --metric-resolution=15s
  30 └         image: registry.k8s.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────



components_8.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components_archive_1220231_6.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components_archive_1220231_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_archive_1220231_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components_archive_1220231_7.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components_archive_1220231_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_archive_1220231_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components_archive_1220231_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components_archive_1220231_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────



components_archive_1220231_8.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_archive_1220231_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



components_archive_122023_6.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components_archive_122023_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_archive_122023_6.yaml:9-15
────────────────────────────────────────
   9 ┌   ports:
  10 │   - name: https
  11 │     port: 443
  12 │     protocol: TCP
  13 │     targetPort: https
  14 │   selector:
  15 └     k8s-app: metrics-server
────────────────────────────────────────



components_archive_122023_7.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'metrics-server' of 'deployment' 'metrics-server' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'metrics-server' of Deployment 'metrics-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'metrics-server' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 components_archive_122023_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_archive_122023_7.yaml:9-68
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       k8s-app: metrics-server
  12 │   strategy:
  13 │     rollingUpdate:
  14 │       maxUnavailable: 0
  15 │   template:
  16 │     metadata:
  17 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "metrics-server" of deployment "metrics-server" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 components_archive_122023_7.yaml:21-61
────────────────────────────────────────
  21 ┌       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 │         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  29 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment metrics-server in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 components_archive_122023_7.yaml:20-68
────────────────────────────────────────
  20 ┌       containers:
  21 │       - args:
  22 │         - --cert-dir=/tmp
  23 │         - --secure-port=4443
  24 │         - --kubelet-insecure-tls
  25 │         - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
  26 │         - --kubelet-use-node-status-port
  27 │         - --metric-resolution=15s
  28 └         image: k8s.gcr.io/metrics-server/metrics-server:v0.6.4
  ..   
────────────────────────────────────────



components_archive_122023_8.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 components_archive_122023_8.yaml:8-15
────────────────────────────────────────
   8 ┌   group: metrics.k8s.io
   9 │   groupPriorityMinimum: 100
  10 │   insecureSkipTLSVerify: true
  11 │   service:
  12 │     name: metrics-server
  13 │     namespace: kube-system
  14 │   version: v1beta1
  15 └   versionPriority: 100
────────────────────────────────────────



compose-ingress.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 compose-ingress.yaml:14-29
────────────────────────────────────────
  14 ┌   ingressClassName: nginx
  15 │   tls:
  16 │     - hosts:
  17 │       - compose.biosimulations.org
  18 │       secretName: compose-ingress-tls
  19 │   rules:
  20 │     - host: compose.biosimulations.org
  21 │       http:
  22 └         paths:
  ..   
────────────────────────────────────────



composite_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'apisix-view-clusterrole' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 composite_1.yaml:12-27
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - persistentvolumeclaims
  18 │   - pods
  19 │   - replicationcontrollers
  20 └   - replicationcontrollers/scale
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'apisix-view-clusterrole' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 composite_1.yaml:106-113
────────────────────────────────────────
 106 ┌ - apiGroups:
 107 │   - networking.k8s.io
 108 │   resources:
 109 │   - ingresses
 110 │   - ingresses/status
 111 │   - networkpolicies
 112 │   verbs:
 113 └   - '*'
────────────────────────────────────────



composite_5.yaml (kubernetes)
=============================
Tests: 132 (SUCCESSES: 98, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'apisix' of 'deployment' 'ingress-apisix-composite-deployment' in 'ingress-apisix' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ingress-apisix' of 'deployment' 'ingress-apisix-composite-deployment' in 'ingress-apisix' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ingress-apisix' of Deployment 'ingress-apisix-composite-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 composite_5.yaml:7-135
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app.kubernetes.io/name: ingress-apisix-composite-deployment
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app.kubernetes.io/name: ingress-apisix-composite-deployment
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "apisix" of deployment "ingress-apisix-composite-deployment" in "ingress-apisix" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ingress-apisix" of deployment "ingress-apisix-composite-deployment" in "ingress-apisix" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ingress-apisix-composite-deployment in ingress-apisix namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ingress-apisix-composite-deployment in ingress-apisix namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-apisix-composite-deployment in ingress-apisix namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 composite_5.yaml:16-128
────────────────────────────────────────
  16 ┌       volumes:
  17 │       - name: apisix-config-yaml-configmap
  18 │         configMap:
  19 │           name: apisix-gw-config.yaml
  20 │           defaultMode: 420
  21 │       containers:
  22 │       - livenessProbe:
  23 │           tcpSocket:
  24 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container apisix in deployment ingress-apisix-composite-deployment (namespace: ingress-apisix) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 composite_5.yaml:89-121
────────────────────────────────────────
  89 ┌       - livenessProbe:
  90 │           failureThreshold: 3
  91 │           initialDelaySeconds: 20
  92 │           periodSeconds: 2
  93 │           successThreshold: 1
  94 │           tcpSocket:
  95 │             port: 9080
  96 │           timeoutSeconds: 2
  97 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ingress-apisix in deployment ingress-apisix-composite-deployment (namespace: ingress-apisix) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 composite_5.yaml:22-88
────────────────────────────────────────
  22 ┌       - livenessProbe:
  23 │           tcpSocket:
  24 │             port: 8080
  25 │           initialDelaySeconds: 15
  26 │           timeoutSeconds: 2
  27 │           periodSeconds: 2
  28 │           successThreshold: 1
  29 │           failureThreshold: 3
  30 └         readinessProbe:
  ..   
────────────────────────────────────────



composite_6.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 composite_6.yaml:7-18
────────────────────────────────────────
   7 ┌   ports:
   8 │   - name: http
   9 │     protocol: TCP
  10 │     port: 80
  11 │     targetPort: 9080
  12 │   - name: https
  13 │     protocol: TCP
  14 │     port: 443
  15 └     targetPort: 9443
  ..   
────────────────────────────────────────



computational-resources.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 100, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nodejs-web' of Deployment 'nodejs-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nodejs-web' of Deployment 'nodejs-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nodejs-web' of 'deployment' 'nodejs-web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nodejs-web' of Deployment 'nodejs-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nodejs-web' of Deployment 'nodejs-web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nodejs-web' of Deployment 'nodejs-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nodejs-web' of Deployment 'nodejs-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nodejs-web' of Deployment 'nodejs-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 computational-resources.yaml:8-29
────────────────────────────────────────
   8 ┌   replicas: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       name: nodejs-web
  12 │   template:
  13 │     metadata:
  14 │       name: nodejs-web
  15 │       labels:
  16 └         name: nodejs-web
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nodejs-web" of deployment "nodejs-web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nodejs-web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 computational-resources.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nodejs-web
   5 │   labels:
   6 └     name: nodejs-web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodejs-web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nodejs-web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computational-resources.yaml:18-29
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 └             memory: 1000Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nodejs-web in deployment nodejs-web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 computational-resources.yaml:19-29
────────────────────────────────────────
  19 ┌       - name: nodejs-web
  20 │         image: khannedy/nodejs-web
  21 │         ports:
  22 │         - containerPort: 3000
  23 │         resources:
  24 │           requests:
  25 │             cpu: 1000m
  26 │             memory: 1000Mi
  27 └           limits:
  ..   
────────────────────────────────────────



computational-resources_1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 computational-resources_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     name: nodejs-web
   9 │   ports:
  10 │   - port: 3000
  11 │     targetPort: 3000
  12 └     nodePort: 30001
────────────────────────────────────────



computations.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'computations' of Deployment 'computations' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'computations' of Deployment 'computations' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'computations' of 'deployment' 'computations' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'computations' of Deployment 'computations' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'computations' of Deployment 'computations' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'computations' of Deployment 'computations' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'computations' of Deployment 'computations' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'computations' of Deployment 'computations' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'computations' of Deployment 'computations' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 computations.yaml:8-25
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app.kubernetes.io/name: computations
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app.kubernetes.io/name: computations
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "computations" of deployment "computations" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment computations in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 computations.yaml:4-6
────────────────────────────────────────
   4 ┌   name: computations
   5 │   labels:
   6 └     app.kubernetes.io/name: computations
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container computations in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment computations in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computations.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container computations in deployment computations (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 computations.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────



computations1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 99, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'computations' of Deployment 'computations' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'computations' of Deployment 'computations' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'computations' of 'deployment' 'computations' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'computations' of Deployment 'computations' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'computations' of Deployment 'computations' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'computations' of Deployment 'computations' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'computations' of Deployment 'computations' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'computations' of Deployment 'computations' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'computations' of Deployment 'computations' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 computations1.yaml:8-25
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app.kubernetes.io/name: computations
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app.kubernetes.io/name: computations
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "computations" of deployment "computations" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment computations in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 computations1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: computations
   5 │   labels:
   6 └     app.kubernetes.io/name: computations
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container computations in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment computations in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computations1.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container computations in deployment computations (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 computations1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: computations
  19 │         image: startkubernetes/computations:0.1.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         resources:
  23 │           limits:
  24 │             cpu: 100m
  25 └             memory: 10Mi
────────────────────────────────────────



computations1_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 computations1_1.yaml:8-11
────────────────────────────────────────
   8 ┌   selector:
   9 │     app.kubernetes.io/name: computations
  10 │   ports:
  11 └   - port: 8080
────────────────────────────────────────



computations_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 computations_1.yaml:8-11
────────────────────────────────────────
   8 ┌   selector:
   9 │     app.kubernetes.io/name: computations
  10 │   ports:
  11 └   - port: 8080
────────────────────────────────────────



compute-resources1_2.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'uat' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 compute-resources1_2.yaml:11-31
────────────────────────────────────────
  11 ┌   replicas: 3
  12 │   selector:
  13 │     matchLabels:
  14 │       app: front
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 │         app: front
  19 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "uat" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment deployment-test in uat namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in uat namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compute-resources1_2.yaml:21-31
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 │             cpu: 500m
  29 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in uat namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 compute-resources1_2.yaml:20-31
────────────────────────────────────────
  20 ┌       containers:
  21 │       - name: nginx
  22 │         image: nginx:alpine
  23 │         ports:
  24 │         - containerPort: 80
  25 │         resources:
  26 │           requests:
  27 │             memory: 500M
  28 └             cpu: 500m
  ..   
────────────────────────────────────────



computing.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'medium' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 computing.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 2
   8 │   selector:
   9 │     matchLabels:
  10 │       app: nginx
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "medium" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in medium namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in medium namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in medium namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 computing.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



concurency-cronjob.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'concurrency-container' of 'cronjob' 'concurrency-cronjob' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'concurrency-container' of CronJob 'concurrency-cronjob' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 concurency-cronjob.yaml:6-20
────────────────────────────────────────
   6 ┌   schedule: "*/1 * * * *"  # Run every 1 minutes
   7 │   concurrencyPolicy: Forbid  # Do not allow concurrent executions
   8 │   # Allowed Values are
   9 │   # : Allow (default)
  10 │   # : Forbid
  11 │   # : Replace
  12 │   jobTemplate:
  13 │     spec:
  14 └       template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "concurrency-container" of cronjob "concurrency-cronjob" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob concurrency-cronjob in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 concurency-cronjob.yaml:4
────────────────────────────────────────
   4 [   name: concurrency-cronjob
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container concurrency-cronjob in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 concurency-cronjob.yaml:17-19
────────────────────────────────────────
  17 ┌           - name: concurrency-container
  18 │             image: busybox
  19 └             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob concurrency-cronjob in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 concurency-cronjob.yaml:16-20
────────────────────────────────────────
  16 ┌           containers:
  17 │           - name: concurrency-container
  18 │             image: busybox
  19 │             command: ["sh", "-c", "echo 'Hello from the concurrency CronJob'; sleep 70"]
  20 └           restartPolicy: Never
────────────────────────────────────────



conduit-0.1.0_4.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conduit-0.1.0_4.yaml:12-18
────────────────────────────────────────
  12 ┌   type: ClusterIP
  13 │   selector:
  14 │     app: controller
  15 │   ports:
  16 │   - name: http
  17 │     port: 8085
  18 └     targetPort: 8085
────────────────────────────────────────



conduit-0.1.0_5.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conduit-0.1.0_5.yaml:12-18
────────────────────────────────────────
  12 ┌   type: ClusterIP
  13 │   selector:
  14 │     app: controller
  15 │   ports:
  16 │   - name: grpc
  17 │     port: 8086
  18 └     targetPort: 8086
────────────────────────────────────────



conduit-0.1.0_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conduit-0.1.0_7.yaml:12-21
────────────────────────────────────────
  12 ┌   type: ClusterIP
  13 │   selector:
  14 │     app: web
  15 │   ports:
  16 │   - name: http
  17 │     port: 8084
  18 │     targetPort: 8084
  19 │   - name: admin-http
  20 │     port: 9994
  21 └     targetPort: 9994
────────────────────────────────────────



conduit-0.1.0_9.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conduit-0.1.0_9.yaml:12-18
────────────────────────────────────────
  12 ┌   type: ClusterIP
  13 │   selector:
  14 │     app: prometheus
  15 │   ports:
  16 │   - name: http
  17 │     port: 9090
  18 └     targetPort: 9090
────────────────────────────────────────



conf-sec-pod.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'conf-sec-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conf-sec-pod.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "conf-sec-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod conf-sec-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 conf-sec-pod.yaml:4
────────────────────────────────────────
   4 [   name: conf-sec-pod1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container conf-sec-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod conf-sec-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────



conf-sec-pod1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'conf-sec-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'conf-sec-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conf-sec-pod1.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "conf-sec-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod conf-sec-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 conf-sec-pod1.yaml:4
────────────────────────────────────────
   4 [   name: conf-sec-pod1 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container conf-sec-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod1.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod conf-sec-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod1.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container 
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     envFrom:
  11 │     - configMapRef:
  12 │         name: k8s-env
  13 │     - secretRef:
  14 └         name: web-db-secret
────────────────────────────────────────



conf-sec-pod2.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'conf-sec-pod2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conf-sec-pod2.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 └           name: k8s-env-cm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "conf-sec-pod2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod conf-sec-pod2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 conf-sec-pod2.yaml:4
────────────────────────────────────────
   4 [   name: conf-sec-pod2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container conf-sec-pod2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod2.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod conf-sec-pod2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod2.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 └           name: k8s-env-cm
  ..   
────────────────────────────────────────



conf-sec-pod21.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'conf-sec-pod2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'conf-sec-pod2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'conf-sec-pod2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conf-sec-pod21.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 └           name: k8s-env-cm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "conf-sec-pod2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod conf-sec-pod2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 conf-sec-pod21.yaml:4
────────────────────────────────────────
   4 [   name: conf-sec-pod2 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container conf-sec-pod2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod21.yaml:7-20
────────────────────────────────────────
   7 ┌   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 │           name: k8s-env-cm
  15 └           key: k8s-env-cm.txt
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod conf-sec-pod2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf-sec-pod21.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: my-container
   8 │     image: busybox
   9 │     args: ['tail', '-f', '/dev/null']
  10 │     env:
  11 │     - name: K8S_ENV
  12 │       valueFrom:
  13 │         configMapKeyRef:
  14 └           name: k8s-env-cm
  ..   
────────────────────────────────────────



conf2.yaml (kubernetes)
=======================
Tests: 116 (SUCCESSES: 95, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 12, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'conf' of Deployment 'conf' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'conf' of Deployment 'conf' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'conf' of 'deployment' 'conf' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'conf' of Deployment 'conf' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'conf' of Deployment 'conf' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'conf' of Deployment 'conf' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'conf' of Deployment 'conf' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'conf' of Deployment 'conf' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'conf' of Deployment 'conf' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'conf' of Deployment 'conf' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'conf' of Deployment 'conf' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'conf' of Deployment 'conf' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conf2.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 5
   7 │   selector:
   8 │     matchLabels:
   9 │       app: conf
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: conf
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "conf" of deployment "conf" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment conf in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 conf2.yaml:4
────────────────────────────────────────
   4 [   name: conf
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment conf in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container conf in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment conf in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf2.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container conf in deployment conf (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conf2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: conf
  17 │         image: smarthotels/configuration:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



conf2_1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conf2_1.yaml:6-11
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app: conf
   9 │   ports:
  10 │   - port: 80
  11 └     targetPort: 80
────────────────────────────────────────



conf5.yaml (kubernetes)
=======================
Tests: 116 (SUCCESSES: 95, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 12, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ntpvulnerable' of 'pod' 'ntpvulnerable' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ntpvulnerable' of Pod 'ntpvulnerable' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 conf5.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 │       protocol: UDP
  15 └   restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ntpvulnerable" of pod "ntpvulnerable" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod ntpvulnerable in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 conf5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ntpvulnerable
   5 │   labels:
   6 └     app: ntpvulnerable
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod ntpvulnerable in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ntpvulnerable in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ntpvulnerable in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 conf5.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 │       protocol: UDP
  15 └   restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ntpvulnerable in pod ntpvulnerable (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 conf5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: ntpvulnerable
  10 │     image: vulnerables/cve-2016-7434
  11 │     imagePullPolicy: IfNotPresent
  12 │     ports:
  13 │     - containerPort: 123
  14 └       protocol: UDP
────────────────────────────────────────



config-Map82.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'centos-container' of Pod 'centos-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'centos-container' of 'pod' 'centos-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'centos-container' of Pod 'centos-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-Map82.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "centos-container" of pod "centos-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod centos-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-Map82.yaml:4
────────────────────────────────────────
   4 [   name: centos-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container centos-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-Map82.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod centos-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-Map82.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: centos-container
   8 │     image: centos:7
   9 │     command:
  10 │     - sleep
  11 │     - '10000'
  12 │     envFrom:
  13 │     - configMapRef:
  14 └         name: configmap-demo
────────────────────────────────────────



config-Map82_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'configmap-demo' in 'default' namespace stores secrets in key(s) or value(s) '{"password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-Map82_2.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'nginx-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-Map82_2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "nginx-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-Map82_2.yaml:4
────────────────────────────────────────
   4 [   name: nginx-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-Map82_2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-Map82_2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx-container
   8 │     image: nginx
   9 │     envFrom:
  10 │     - configMapRef:
  11 └         name: configmap-demo
────────────────────────────────────────



config-basic.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'xxx' of Deployment 'xxx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'xxx' of Deployment 'xxx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'xxx' of 'deployment' 'xxx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'xxx' of Deployment 'xxx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'xxx' of Deployment 'xxx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-basic.yaml:6-18
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: xxx
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: xxx
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "xxx" of deployment "xxx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment xxx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-basic.yaml:4
────────────────────────────────────────
   4 [   name: xxx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container xxx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-basic.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment xxx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-basic.yaml:14-18
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────



config-basic1.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'xxx' of Deployment 'xxx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'xxx' of Deployment 'xxx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'xxx' of 'deployment' 'xxx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'xxx' of Deployment 'xxx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'xxx' of Deployment 'xxx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-basic1.yaml:6-18
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: xxx
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: xxx
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "xxx" of deployment "xxx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment xxx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-basic1.yaml:4
────────────────────────────────────────
   4 [   name: xxx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container xxx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-basic1.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment xxx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-basic1.yaml:14-18
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────



config-basic1_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-basic1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: xxx
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: xxx
  12 └     targetPort: xxx
────────────────────────────────────────



config-basic2.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'xxx' of Deployment 'xxx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'xxx' of Deployment 'xxx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'xxx' of 'deployment' 'xxx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'xxx' of Deployment 'xxx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'xxx' of Deployment 'xxx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'xxx' of Deployment 'xxx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'xxx' of Deployment 'xxx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-basic2.yaml:6-18
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: xxx
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: xxx
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "xxx" of deployment "xxx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment xxx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-basic2.yaml:4
────────────────────────────────────────
   4 [   name: xxx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container xxx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-basic2.yaml:15-18
────────────────────────────────────────
  15 ┌       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment xxx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-basic2.yaml:14-18
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: xxx
  16 │         image: xxx
  17 │         ports:
  18 └         - containerPort: xxx
────────────────────────────────────────



config-basic2_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-basic2_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: xxx
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: xxx
  12 └     targetPort: xxx
────────────────────────────────────────



config-basic_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-basic_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: xxx
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: xxx
  12 └     targetPort: xxx
────────────────────────────────────────



config-best-practices.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices.yaml:6-44
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: emailservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: emailservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices.yaml:14-44
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: DISABLE_TRACING
  ..   
────────────────────────────────────────



config-best-practices1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1.yaml:6-44
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: emailservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: emailservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1.yaml:14-44
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: DISABLE_TRACING
  ..   
────────────────────────────────────────



config-best-practices1_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: emailservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5000
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices1_10.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_10.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: shippingservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: shippingservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_10.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices1_11.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_11.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: shippingservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-best-practices1_12.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_12.yaml:6-42
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: adservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: adservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_12.yaml:14-42
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 └         resources:
  ..   
────────────────────────────────────────



config-best-practices1_13.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_13.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: adservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 9555
  12 └     targetPort: 9555
────────────────────────────────────────



config-best-practices1_14.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_14.yaml:6-43
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_14.yaml:14-43
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 └         resources:
  ..   
────────────────────────────────────────



config-best-practices1_15.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_15.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



config-best-practices1_16.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_16.yaml:6-50
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: checkoutservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: checkoutservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_16.yaml:14-50
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────



config-best-practices1_17.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_17.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: checkoutservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5050
  12 └     targetPort: 5050
────────────────────────────────────────



config-best-practices1_18.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_18.yaml:6-58
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: frontend
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: frontend
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_18.yaml:14-58
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 └             path: /_healthz
  ..   
────────────────────────────────────────



config-best-practices1_19.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_19.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices1_2.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_2.yaml:6-48
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: recommendationservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: recommendationservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_2.yaml:14-48
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 └             command:
  ..   
────────────────────────────────────────



config-best-practices1_20.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_20.yaml:6-12
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices1_21.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_21.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: redis-cart
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: redis-cart
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_21.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_21.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 └             port: 6379
  ..   
────────────────────────────────────────



config-best-practices1_22.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_22.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: redis-cart
   9 │   ports:
  10 │   - name: redis
  11 │     port: 6379
  12 └     targetPort: 6379
────────────────────────────────────────



config-best-practices1_3.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_3.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: recommendationservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8080
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices1_4.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_4.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: paymentservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: paymentservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_4.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices1_5.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_5.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: paymentservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-best-practices1_6.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_6.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: productcatalogservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: productcatalogservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_6.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices1_7.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_7.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: productcatalogservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3550
  12 └     targetPort: 3550
────────────────────────────────────────



config-best-practices1_8.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_8.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: currencyservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: currencyservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices1_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices1_8.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices1_9.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices1_9.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: currencyservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7000
  12 └     targetPort: 7000
────────────────────────────────────────



config-best-practices2.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2.yaml:6-44
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: emailservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: emailservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2.yaml:15-44
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 │         - name: DISABLE_TRACING
  23 └           value: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2.yaml:14-44
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 │           value: '8080'
  22 └         - name: DISABLE_TRACING
  ..   
────────────────────────────────────────



config-best-practices2_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: emailservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5000
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices2_10.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_10.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: shippingservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: shippingservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_10.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices2_11.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_11.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: shippingservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-best-practices2_12.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_12.yaml:6-42
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: adservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: adservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_12.yaml:14-42
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 └         resources:
  ..   
────────────────────────────────────────



config-best-practices2_13.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_13.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: adservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 9555
  12 └     targetPort: 9555
────────────────────────────────────────



config-best-practices2_14.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_14.yaml:6-43
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_14.yaml:14-43
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 └         resources:
  ..   
────────────────────────────────────────



config-best-practices2_15.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_15.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



config-best-practices2_16.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_16.yaml:6-50
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: checkoutservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: checkoutservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_16.yaml:14-50
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────



config-best-practices2_17.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_17.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: checkoutservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5050
  12 └     targetPort: 5050
────────────────────────────────────────



config-best-practices2_18.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_18.yaml:6-58
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: frontend
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: frontend
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_18.yaml:14-58
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 └             path: /_healthz
  ..   
────────────────────────────────────────



config-best-practices2_19.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_19.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices2_2.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_2.yaml:6-48
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: recommendationservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: recommendationservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_2.yaml:14-48
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 └             command:
  ..   
────────────────────────────────────────



config-best-practices2_20.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_20.yaml:6-12
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices2_21.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_21.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: redis-cart
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: redis-cart
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_21.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_21.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 └             port: 6379
  ..   
────────────────────────────────────────



config-best-practices2_22.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_22.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: redis-cart
   9 │   ports:
  10 │   - name: redis
  11 │     port: 6379
  12 └     targetPort: 6379
────────────────────────────────────────



config-best-practices2_3.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_3.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: recommendationservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8080
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices2_4.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_4.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: paymentservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: paymentservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_4.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices2_5.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_5.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: paymentservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-best-practices2_6.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_6.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: productcatalogservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: productcatalogservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_6.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices2_7.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_7.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: productcatalogservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3550
  12 └     targetPort: 3550
────────────────────────────────────────



config-best-practices2_8.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_8.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: currencyservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: currencyservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices2_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices2_8.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices2_9.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices2_9.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: currencyservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7000
  12 └     targetPort: 7000
────────────────────────────────────────



config-best-practices_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: emailservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5000
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices_10.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_10.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: shippingservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: shippingservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_10.yaml:15-39
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           periodSeconds: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_10.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices_11.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_11.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: shippingservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-best-practices_12.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_12.yaml:6-42
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: adservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: adservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_12.yaml:15-42
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_12.yaml:14-42
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 │           value: '9555'
  22 └         resources:
  ..   
────────────────────────────────────────



config-best-practices_13.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_13.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: adservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 9555
  12 └     targetPort: 9555
────────────────────────────────────────



config-best-practices_14.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_14.yaml:6-43
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_14.yaml:15-43
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_14.yaml:14-43
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 │           value: redis-cart:6379
  22 └         resources:
  ..   
────────────────────────────────────────



config-best-practices_15.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_15.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



config-best-practices_16.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_16.yaml:6-50
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: checkoutservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: checkoutservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_16.yaml:15-50
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 │             - /bin/grpc_health_probe
  23 └             - -addr=:5050
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_16.yaml:14-50
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 5050
  19 │         readinessProbe:
  20 │           exec:
  21 │             command:
  22 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────



config-best-practices_17.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_17.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: checkoutservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5050
  12 └     targetPort: 5050
────────────────────────────────────────



config-best-practices_18.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_18.yaml:6-58
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: frontend
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: frontend
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_18.yaml:15-58
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 │             path: /_healthz
  23 └             port: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_18.yaml:14-58
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           initialDelaySeconds: 10
  21 │           httpGet:
  22 └             path: /_healthz
  ..   
────────────────────────────────────────



config-best-practices_19.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_19.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices_2.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_2.yaml:6-48
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: recommendationservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: recommendationservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_2.yaml:15-48
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 │             command:
  23 └             - /bin/grpc_health_probe
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_2.yaml:14-48
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           exec:
  22 └             command:
  ..   
────────────────────────────────────────



config-best-practices_20.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_20.yaml:6-12
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices_21.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_21.yaml:6-39
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: redis-cart
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: redis-cart
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_21.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_21.yaml:15-36
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 │             port: 6379
  23 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_21.yaml:14-39
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         readinessProbe:
  20 │           periodSeconds: 5
  21 │           tcpSocket:
  22 └             port: 6379
  ..   
────────────────────────────────────────



config-best-practices_22.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_22.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: redis-cart
   9 │   ports:
  10 │   - name: redis
  11 │     port: 6379
  12 └     targetPort: 6379
────────────────────────────────────────



config-best-practices_3.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_3.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: recommendationservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8080
  12 └     targetPort: 8080
────────────────────────────────────────



config-best-practices_4.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_4.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: paymentservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: paymentservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_4.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_4.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 │           value: '50051'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices_5.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_5.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: paymentservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-best-practices_6.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_6.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: productcatalogservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: productcatalogservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_6.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_6.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 │           value: '3550'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices_7.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_7.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: productcatalogservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3550
  12 └     targetPort: 3550
────────────────────────────────────────



config-best-practices_8.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 102, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_8.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: currencyservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: currencyservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-best-practices_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_8.yaml:15-38
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 │         readinessProbe:
  23 └           exec:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-best-practices_8.yaml:14-38
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 │           value: '7000'
  22 └         readinessProbe:
  ..   
────────────────────────────────────────



config-best-practices_9.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-best-practices_9.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: currencyservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7000
  12 └     targetPort: 7000
────────────────────────────────────────



config-consul.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul.yaml:6-23
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: emailservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: emailservice
  13 │       annotations:
  14 └         consul.hashicorp.com/connect-inject: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 └           value: '8080'
────────────────────────────────────────



config-consul1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'emailservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'emailservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'emailservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'emailservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'emailservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: emailservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: emailservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "emailservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment emailservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1.yaml:4
────────────────────────────────────────
   4 [   name: emailservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container emailservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment emailservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/emailservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 8080
  19 │         env:
  20 │         - name: PORT
  21 └           value: '8080'
────────────────────────────────────────



config-consul1_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: emailservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5000
  12 └     targetPort: 8080
────────────────────────────────────────



config-consul1_10.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_10.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: shippingservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: shippingservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────



config-consul1_11.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_11.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: shippingservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50052
  12 └     targetPort: 50052
────────────────────────────────────────



config-consul1_12.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_12.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: adservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: adservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_12.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config-consul1_13.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_13.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: adservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 9555
  12 └     targetPort: 9555
────────────────────────────────────────



config-consul1_14.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_14.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_14.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────



config-consul1_15.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_15.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



config-consul1_16.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_16.yaml:6-35
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: checkoutservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: checkoutservice
  13 │       annotations:
  14 └         consul.hashicorp.com/connect-service-upstreams: productcatalogservice:3550,shippingservice:50052,paymentservice:50051,emailservice:5000,currencyservice:7000,cartservice:7070
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_16.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config-consul1_17.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_17.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: checkoutservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5050
  12 └     targetPort: 5050
────────────────────────────────────────



config-consul1_18.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_18.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: frontend
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: frontend
  13 │       annotations:
  14 └         consul.hashicorp.com/transparent-proxy: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_18.yaml:17-38
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config-consul1_19.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_19.yaml:6-12
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-consul1_2.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_2.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: recommendationservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: recommendationservice
  13 │       annotations:
  14 └         consul.hashicorp.com/connect-service-upstreams: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────



config-consul1_20.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_20.yaml:6-24
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: redis-cart
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: redis-cart
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_20.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 │           name: redis-data
  22 └       volumes:
  ..   
────────────────────────────────────────



config-consul1_21.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_21.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: redis-cart
   9 │   ports:
  10 │   - name: redis
  11 │     port: 6379
  12 └     targetPort: 6379
────────────────────────────────────────



config-consul1_3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_3.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: recommendationservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8080
  12 └     targetPort: 8080
────────────────────────────────────────



config-consul1_4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_4.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: paymentservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: paymentservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_4.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config-consul1_5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_5.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: paymentservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-consul1_6.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_6.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: productcatalogservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: productcatalogservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_6.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config-consul1_7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_7.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: productcatalogservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3550
  12 └     targetPort: 3550
────────────────────────────────────────



config-consul1_8.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'currencyservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_8.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: currencyservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: currencyservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul1_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul1_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────



config-consul1_9.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul1_9.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: currencyservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7000
  12 └     targetPort: 7000
────────────────────────────────────────



config-consul_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_1.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: emailservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5000
  12 └     targetPort: 8080
────────────────────────────────────────



config-consul_10.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'shippingservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'shippingservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'shippingservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'shippingservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'shippingservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_10.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: shippingservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: shippingservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "shippingservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment shippingservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_10.yaml:4
────────────────────────────────────────
   4 [   name: shippingservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shippingservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_10.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shippingservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_10.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/shippingservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50052
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50052'
────────────────────────────────────────



config-consul_11.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_11.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: shippingservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50052
  12 └     targetPort: 50052
────────────────────────────────────────



config-consul_12.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_12.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: adservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: adservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_12.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_12.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_12.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 9555
  19 │         env:
  20 │         - name: PORT
  21 └           value: '9555'
────────────────────────────────────────



config-consul_13.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_13.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: adservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 9555
  12 └     targetPort: 9555
────────────────────────────────────────



config-consul_14.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'cartservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'cartservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'cartservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'cartservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'cartservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_14.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: cartservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: cartservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "cartservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cartservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_14.yaml:4
────────────────────────────────────────
   4 [   name: cartservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cartservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_14.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cartservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_14.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/cartservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 7070
  19 │         env:
  20 │         - name: REDIS_ADDR
  21 └           value: redis-cart:6379
────────────────────────────────────────



config-consul_15.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_15.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: cartservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7070
  12 └     targetPort: 7070
────────────────────────────────────────



config-consul_16.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'checkoutservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'checkoutservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'checkoutservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_16.yaml:6-35
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: checkoutservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: checkoutservice
  13 │       annotations:
  14 └         consul.hashicorp.com/connect-service-upstreams: productcatalogservice:3550,shippingservice:50052,paymentservice:50051,emailservice:5000,currencyservice:7000,cartservice:7070
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "checkoutservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment checkoutservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_16.yaml:4
────────────────────────────────────────
   4 [   name: checkoutservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container checkoutservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_16.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment checkoutservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_16.yaml:16-35
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/checkoutservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 5050
  21 │         env:
  22 │         - name: PORT
  23 │           value: '5050'
  24 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config-consul_17.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_17.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: checkoutservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 5050
  12 └     targetPort: 5050
────────────────────────────────────────



config-consul_18.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_18.yaml:6-38
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: frontend
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: frontend
  13 │       annotations:
  14 └         consul.hashicorp.com/transparent-proxy: 'false'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_18.yaml:4
────────────────────────────────────────
   4 [   name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_18.yaml:18-38
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  26 └           value: localhost:3550
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_18.yaml:17-38
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: server
  19 │         image: gcr.io/google-samples/microservices-demo/frontend:v0.8.0
  20 │         ports:
  21 │         - containerPort: 8080
  22 │         env:
  23 │         - name: PORT
  24 │           value: '8080'
  25 └         - name: PRODUCT_CATALOG_SERVICE_ADDR
  ..   
────────────────────────────────────────



config-consul_19.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_19.yaml:6-12
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: frontend
   9 │   ports:
  10 │   - name: http
  11 │     port: 80
  12 └     targetPort: 8080
────────────────────────────────────────



config-consul_2.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'recommendationservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'recommendationservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'recommendationservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_2.yaml:6-25
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: recommendationservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: recommendationservice
  13 │       annotations:
  14 └         consul.hashicorp.com/connect-service-upstreams: productcatalogservice:3550
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "recommendationservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment recommendationservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_2.yaml:4
────────────────────────────────────────
   4 [   name: recommendationservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container recommendationservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_2.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment recommendationservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.8.0
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         env:
  22 │         - name: PORT
  23 │           value: '8080'
  24 │         - name: PRODUCT_CATALOG_SERVICE_ADDR
  25 └           value: localhost:3550
────────────────────────────────────────



config-consul_20.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Deployment 'redis-cart' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'deployment' 'redis-cart' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'redis-cart' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_20.yaml:6-24
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: redis-cart
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: redis-cart
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of deployment "redis-cart" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment redis-cart in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_20.yaml:4
────────────────────────────────────────
   4 [   name: redis-cart
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis-cart in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_20.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 └           name: redis-data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment redis-cart in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_20.yaml:14-24
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: redis
  16 │         image: redis:alpine
  17 │         ports:
  18 │         - containerPort: 6379
  19 │         volumeMounts:
  20 │         - mountPath: /data
  21 │           name: redis-data
  22 └       volumes:
  ..   
────────────────────────────────────────



config-consul_21.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_21.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: redis-cart
   9 │   ports:
  10 │   - name: redis
  11 │     port: 6379
  12 └     targetPort: 6379
────────────────────────────────────────



config-consul_3.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_3.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: recommendationservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8080
  12 └     targetPort: 8080
────────────────────────────────────────



config-consul_4.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'paymentservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'paymentservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'paymentservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'paymentservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'paymentservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_4.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: paymentservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: paymentservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "paymentservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment paymentservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_4.yaml:4
────────────────────────────────────────
   4 [   name: paymentservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container paymentservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_4.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment paymentservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_4.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/paymentservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 50051
  19 │         env:
  20 │         - name: PORT
  21 └           value: '50051'
────────────────────────────────────────



config-consul_5.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_5.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: paymentservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: 50051
────────────────────────────────────────



config-consul_6.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'productcatalogservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'productcatalogservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'productcatalogservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_6.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: productcatalogservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: productcatalogservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "productcatalogservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment productcatalogservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_6.yaml:4
────────────────────────────────────────
   4 [   name: productcatalogservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container productcatalogservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_6.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment productcatalogservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_6.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.8.0
  17 │         ports:
  18 │         - containerPort: 3550
  19 │         env:
  20 │         - name: PORT
  21 └           value: '3550'
────────────────────────────────────────



config-consul_7.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_7.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: productcatalogservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 3550
  12 └     targetPort: 3550
────────────────────────────────────────



config-consul_8.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'currencyservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'currencyservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'currencyservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'currencyservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'currencyservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'currencyservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_8.yaml:6-21
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: currencyservice
   9 │   template:
  10 │     metadata:
  11 │       labels:
  12 │         app: currencyservice
  13 │     spec:
  14 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "currencyservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment currencyservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-consul_8.yaml:4
────────────────────────────────────────
   4 [   name: currencyservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container currencyservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_8.yaml:15-21
────────────────────────────────────────
  15 ┌       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment currencyservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-consul_8.yaml:14-21
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: server
  16 │         image: gcr.io/google-samples/microservices-demo/currencyservice
  17 │         ports:
  18 │         - containerPort: 7000
  19 │         env:
  20 │         - name: PORT
  21 └           value: '7000'
────────────────────────────────────────



config-consul_9.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-consul_9.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: currencyservice
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 7000
  12 └     targetPort: 7000
────────────────────────────────────────



config-db-edit-role.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'config-db-edit' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 config-db-edit-role.yaml:7-10
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   resources: ["configmaps"]
   9 │   resourceNames: ["db-config"]
  10 └   verbs: ["get", "list", "update"]
────────────────────────────────────────



config-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of Deployment 'config' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of Deployment 'config' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'deployment' 'config' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of Deployment 'config' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of Deployment 'config' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of Deployment 'config' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of Deployment 'config' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-deployment.yaml:9-44
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: config
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: config
  17 └         environment: production
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of deployment "config" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment config in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-deployment.yaml:4-7
────────────────────────────────────────
   4 ┌   name: config
   5 │   namespace: default
   6 │   labels:
   7 └     app: config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container config in deployment config (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 config-deployment.yaml:25-44
────────────────────────────────────────
  25 ┌       - name: config
  26 │         image: geoservercloud/geoserver-cloud-config:1.9.0
  27 │         ports:
  28 │         - containerPort: 8080
  29 │         resources:
  30 │           requests:
  31 │             memory: 128Mi
  32 │             cpu: 50m
  33 └           limits:
  ..   
────────────────────────────────────────



config-deployment_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-deployment_1.yaml:8-13
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: config
  10 │   ports:
  11 │   - name: http
  12 │     port: 8080
  13 └     targetPort: 8080
────────────────────────────────────────



config-env.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'go-server-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"AGE"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map-args_1.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sample' of Pod 'args-sample' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sample' of Pod 'args-sample' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sample' of 'pod' 'args-sample' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sample' of Pod 'args-sample' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sample' of Pod 'args-sample' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sample' of Pod 'args-sample' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sample' of Pod 'args-sample' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sample' of Pod 'args-sample' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sample' of Pod 'args-sample' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sample' of Pod 'args-sample' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sample' of Pod 'args-sample' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sample' of Pod 'args-sample' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-map-args_1.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 └     - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sample" of pod "args-sample" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod args-sample in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-map-args_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: args-sample
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container args-sample in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map-args_1.yaml:8-16
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: args-sample
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod args-sample in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map-args_1.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - echo $(TEST_VAR)
  14 │     envFrom:
  15 └     - configMapRef:
  ..   
────────────────────────────────────────



config-map-env-vars_1.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sample' of Pod 'env-sample' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sample' of Pod 'env-sample' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sample' of 'pod' 'env-sample' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sample' of Pod 'env-sample' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sample' of Pod 'env-sample' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sample' of Pod 'env-sample' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sample' of Pod 'env-sample' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sample' of Pod 'env-sample' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sample' of Pod 'env-sample' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sample' of Pod 'env-sample' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sample' of Pod 'env-sample' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sample' of Pod 'env-sample' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-map-env-vars_1.yaml:7-23
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 └     - configMapRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sample" of pod "env-sample" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-sample in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-map-env-vars_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: env-sample
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-sample in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map-env-vars_1.yaml:8-22
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 │     - configMapRef:
  16 └         name: env-sample
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-sample in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map-env-vars_1.yaml:7-23
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - env
  14 │     envFrom:
  15 └     - configMapRef:
  ..   
────────────────────────────────────────



config-map-operator.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'operator-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"secret_access_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map-template.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'database-config' in 'ඞඞඞ' namespace stores sensitive contents in key(s) or value(s) '{"some_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map-volume_1.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sample' of Pod 'volume-sample' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sample' of Pod 'volume-sample' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sample' of 'pod' 'volume-sample' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sample' of Pod 'volume-sample' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sample' of Pod 'volume-sample' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sample' of Pod 'volume-sample' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sample' of Pod 'volume-sample' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sample' of Pod 'volume-sample' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sample' of Pod 'volume-sample' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sample' of Pod 'volume-sample' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sample' of Pod 'volume-sample' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sample' of Pod 'volume-sample' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 config-map-volume_1.yaml:7-22
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 └     - name: volume-sample
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sample" of pod "volume-sample" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-sample in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 config-map-volume_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: volume-sample
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-sample in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map-volume_1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 │     - name: volume-sample
  16 │       mountPath: /data/test
  17 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-sample in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 config-map-volume_1.yaml:7-22
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: sample
   9 │     image: busybox
  10 │     command:
  11 │     - /bin/sh
  12 │     - -c
  13 │     - cat /data/test/*
  14 │     volumeMounts:
  15 └     - name: volume-sample
  ..   
────────────────────────────────────────



config-map.yaml.verified.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-config-map' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"key1", "key2"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map10.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'flask' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"FLASK_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map101.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'my-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"additional-key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map108.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'todo-web-application-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"RDS_PORT", "RDS_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map120.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'todo-web-application-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"RDS_PORT", "RDS_USERNAME"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map121.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'configmap-django' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"DB_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map122.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'execution-engine-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT", "postgresql"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'execution-engine-env' in 'default' namespace stores secrets in key(s) or value(s) '{"TOKEN"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



config-map128.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'execution-engine-env' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT", "postgresql"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map140.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'auth-configmap' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"MYSQL_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map20_1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'alertmanager-server-conf' in 'monitoring' namespace stores sensitive contents in key(s) or value(s) '{"  - to", "  smtp_from"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map25.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'flask' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"FLASK_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map44.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'db-config' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"USERNAME", "USERNAME-1"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map5_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'alertmanager-server-conf' in 'monitoring' namespace stores sensitive contents in key(s) or value(s) '{"  - to", "  smtp_from"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



config-map79.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'postgres-configmap' in 'default' namespace stores secrets in key(s) or value(s) '{"database_password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────


