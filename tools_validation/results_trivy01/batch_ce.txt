
Report Summary

┌────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                           Target                           │    Type    │ Misconfigurations │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Node9.yaml                                         │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume.after_roundtrip.yaml              │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume.after_roundtrip1.yaml             │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume10.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume12.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume13.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume14.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume16.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume17.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume24.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume25.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume26.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume28.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume29.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume39.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume4.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume40.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolume41.yaml                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip.yaml         │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip1.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip10.yaml       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip11.yaml       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip2.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip3.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip4.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip5.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip6.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip7.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip8.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.after_roundtrip9.yaml        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim.yaml                         │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim1.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim10.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim11.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim12.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim13.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim14.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim15.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim16.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim17.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim18.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim19.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim2.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim20.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim21.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim22.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim23.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim24.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim25.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim26.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim27.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim28.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim29.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim3.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim30.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim31.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim32.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim33.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim34.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim35.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim39.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim4.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim40.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim41.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim42.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim43.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim44.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim45.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim46.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim47.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim48.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim49.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim5.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim50.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim51.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim52.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim53.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim54.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim55.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim56.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim6.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim7.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim8.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.PersistentVolumeClaim9.yaml                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota.after_roundtrip.yaml                 │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota.after_roundtrip1.yaml                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota.yaml                                 │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota1.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota10.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota11.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota12.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota13.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota14.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota15.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota16.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota17.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota18.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota19.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota2.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota20.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota21.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota22.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota23.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota24.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota25.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota26.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota27.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota28.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota29.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota3.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota30.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota31.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota32.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota33.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota34.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota35.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota39.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota4.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota40.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota41.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota42.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota43.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota44.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota45.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota46.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota47.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota48.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota49.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota5.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota50.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota51.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota52.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota53.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota54.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota55.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota56.yaml                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota6.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota7.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota8.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ResourceQuota9.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret.after_roundtrip.yaml                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret.after_roundtrip1.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret10.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret11.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret12.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret13.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret14.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret15.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret16.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret17.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret18.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret19.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret20.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret21.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret22.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret23.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret24.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret25.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret26.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret27.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret28.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret29.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret30.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret31.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret32.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret33.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret34.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret35.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret39.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret4.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret40.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret41.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret42.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret43.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret44.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret45.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret46.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret47.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret48.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret49.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret5.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret50.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret51.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret52.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret53.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret54.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret55.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret56.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret6.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret7.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret8.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Secret9.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service.after_roundtrip.yaml                       │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service.after_roundtrip1.yaml                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service.after_roundtrip2.yaml                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service.yaml                                       │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service1.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service10.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service11.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service12.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service13.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service14.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service15.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service16.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service17.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service18.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service19.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service2.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service20.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service21.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service22.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service23.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service24.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service25.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service26.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service27.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service28.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service29.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service3.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service30.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service31.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service32.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service33.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service34.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service35.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service39.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service4.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service40.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service41.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service42.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service43.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service44.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service45.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service46.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service47.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service48.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service49.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service5.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service50.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service51.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service52.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service53.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service54.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service55.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service56.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service6.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service7.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service8.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Service9.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount.after_roundtrip.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount.after_roundtrip1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount1.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount10.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount11.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount12.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount13.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount14.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount15.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount16.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount17.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount18.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount19.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount2.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount20.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount21.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount22.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount23.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount24.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount25.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount26.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount27.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount28.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount29.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount3.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount30.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount31.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount32.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount33.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount34.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount35.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount39.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount4.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount40.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount41.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount42.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount43.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount44.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount45.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount46.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount47.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount48.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount49.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount5.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount50.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount51.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount52.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount53.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount54.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount55.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount56.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount6.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount7.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount8.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.ServiceAccount9.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status10.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status11.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status12.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status13.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status14.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status15.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status16.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status17.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status18.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status19.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status20.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status21.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status22.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status23.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status24.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status25.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status26.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status27.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status28.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status29.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status30.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status31.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status32.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status33.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status34.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status35.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status39.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status4.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status40.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status41.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status42.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status43.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status44.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status45.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status46.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status47.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status48.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status49.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status5.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status50.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status51.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status52.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status53.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status54.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status55.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status56.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status6.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status7.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status8.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core.v1.Status9.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core_editor_role.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ core_viewer_role.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.1.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.11.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.11_1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.11_2.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.11_3.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.11_4.yaml                                     │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.11_5.yaml                                     │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.1_1.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.1_2.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.1_3.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.1_4.yaml                                      │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.10.1_5.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.0.yaml                                         │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.01.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.01_1.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.01_2.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.01_3.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.01_4.yaml                                      │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.01_5.yaml                                      │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.0_1.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.0_2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.0_3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.0_4.yaml                                       │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-1.7.0_5.yaml                                       │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-cm.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-configmap.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-configmap1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-configmap2.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-controller.yaml                                    │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-custom.yaml                                        │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-custom2.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-custom3.yaml                                       │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-loadbalancer.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-network-policy.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-network-policy1.yaml                               │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-sa.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-sa_1.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-sa_2.yaml                                          │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns-tcp-svc.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns10.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns10_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns10_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns10_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns10_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns10_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns13.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns13_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns13_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns13_3.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns13_4.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns14.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns14_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns14_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns14_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns14_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns14_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns19.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns19_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns19_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns19_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns19_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns19_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns20.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns20_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns20_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns20_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns20_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns20_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns21.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns21_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns21_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns21_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns21_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns21_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns23.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns23_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns23_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns23_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns23_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns23_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns24.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns24_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns24_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns24_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns24_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns24_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns25.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns25_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns25_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns25_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns25_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns25_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns27.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns27_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns27_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns27_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns27_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns27_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns28.yaml                                             │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns28_1.yaml                                           │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns3.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns30.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns30_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns30_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns30_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns30_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns30_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns35.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns35_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns35_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns35_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns35_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns35_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns37.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns37_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns37_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns38.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns38_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns38_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns38_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns38_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns38_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns3_1.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns3_2.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns3_3.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns3_4.yaml                                            │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns3_5.yaml                                            │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns42.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns42_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns42_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns42_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns42_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns42_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns44.yaml                                             │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns44_1.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns44_2.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns44_3.yaml                                           │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns44_4.yaml                                           │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns44_5.yaml                                           │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns7.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns7_1.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns7_2.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns7_3.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns7_4.yaml                                            │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns7_5.yaml                                            │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment.yaml                                    │ kubernetes │        18         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment10.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment10_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment10_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment10_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment10_4.yaml                                │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment10_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment11.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment11_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment11_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment11_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment11_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment11_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment12.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment12_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment12_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment12_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment12_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment12_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment13.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment13_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment13_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment13_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment13_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment13_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment14.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment14_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment14_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment14_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment14_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment14_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment15.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment15_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment15_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment15_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment15_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment15_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment16.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment16_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment16_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment16_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment16_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment16_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment17.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment17_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment17_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment17_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment17_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment17_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment18.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment18_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment18_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment18_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment18_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment18_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment19.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment19_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment19_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment19_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment19_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment19_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment1_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment1_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment1_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment1_4.yaml                                 │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment1_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment20.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment20_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment20_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment20_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment20_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment20_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment21.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment21_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment21_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment21_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment21_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment21_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment22.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment22_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment22_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment22_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment22_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment22_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment23.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment23_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment23_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment23_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment23_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment23_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment24.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment24_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment24_2.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment24_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment24_4.yaml                                │ kubernetes │        10         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment24_5.yaml                                │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment2_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment2_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment2_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment2_4.yaml                                 │ kubernetes │        13         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment2_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment3.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment3_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment3_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment3_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment3_4.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment3_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment4.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment4_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment4_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment4_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment4_4.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment4_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment5.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment5_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment5_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment5_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment5_4.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment5_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment6.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment6_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment6_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment6_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment6_4.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment6_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment7.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment7_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment7_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment7_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment7_4.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment7_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment8.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment8_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment8_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment8_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment8_4.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment8_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment9.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment9_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment9_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment9_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment9_4.yaml                                 │ kubernetes │        12         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment9_5.yaml                                 │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment_4.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coredns_deployment_5.yaml                                  │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ corex-example.yaml                                         │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ correct-port-name-external-name-service-type.yaml          │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ correction-exercice1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ correction-exercice1_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ correction-exercice1_2.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ correction-exercice1_3.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cortex-deployment.yaml                                     │ kubernetes │        37         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cortex-service.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ countdown-job.yaml                                         │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ countdown-job1.yaml                                        │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ countdown-job2.yaml                                        │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ countdown-jobs.yaml                                        │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ countdown-jobs1.yaml                                       │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ countdown-xfusion-job.yaml                                 │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-app-deployment.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-app-deployment_1.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-app-deployment_2.yaml                              │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-app-deployment_3.yaml                              │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-configmap.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-deployment-test.yaml                               │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-deployment.yaml                                    │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-err.yaml                                           │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-err1.yaml                                          │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-err2.yaml                                          │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-incrementer-deployment.yaml                        │ kubernetes │        22         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-incrementer-service.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-pod.yaml                                           │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-pod1.yaml                                          │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-pod2.yaml                                          │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter-service.yaml                                       │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter.yaml                                               │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter1.yaml                                              │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter2.yaml                                              │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter3.yaml                                              │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter4.yaml                                              │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counter5.yaml                                              │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counting-service.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ counting.yaml                                              │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ countnumberjob.yaml                                        │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ courierwebapp-depl.yaml                                    │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ courierwebapp-depl_1.yaml                                  │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course-management-service-deployment.yaml                  │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course-management-service.yaml                             │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course-service-deployment.yaml                             │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course-service-service.yaml                                │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course.yaml                                                │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course1.yaml                                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course2.yaml                                               │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course3.yaml                                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course4.yaml                                               │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course4_1.yaml                                             │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course5.yaml                                               │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course6.yaml                                               │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ course_service.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursemanagement-service-claim0-persistentvolumeclaim.yaml │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursemanagement-service-deployment.yaml                   │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursemanagement-service-service.yaml                      │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursework4.yaml                                           │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursework4_1.yaml                                         │ kubernetes │        31         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursework5.yaml                                           │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursework5_1.yaml                                         │ kubernetes │        31         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursework6.yaml                                           │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coursework6_1.yaml                                         │ kubernetes │        31         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cow-deploy.yaml                                            │ kubernetes │        37         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cow-deploy1.yaml                                           │ kubernetes │        37         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cow-service.yaml                                           │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cow-service1.yaml                                          │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking-api.yaml                                         │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking-api_1.yaml                                       │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking.yaml                                             │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking1.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking10.yaml                                           │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking10_1.yaml                                         │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking1_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking2.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking2_1.yaml                                          │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking3.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking3_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking4.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking4_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking5.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking5_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking6.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking6_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking7.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking7_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking8.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking8_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking9.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking9_1.yaml                                          │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ coworking_1.yaml                                           │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cowsay-service.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cowsay.yaml                                                │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cowsay1.yaml                                               │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-config.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-config_1.yaml                                          │ kubernetes │        16         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-default-limitrange.yaml                                │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-hog.yaml                                               │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-hog1.yaml                                              │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-limit.yaml                                             │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-limit1.yaml                                            │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-load-app.yaml                                          │ kubernetes │        17         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-load-app_1.yaml                                        │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-load-deployment.yaml                                   │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-load-hpa.yaml                                          │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-load-service.yaml                                      │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-ops.yaml                                               │ kubernetes │        16         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-quota.yaml                                             │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-request-limit.yaml                                     │ kubernetes │        16         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-request-limit1.yaml                                    │ kubernetes │        16         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpu-test-load.yaml                                         │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpudefault.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpuload-deploy.yaml                                        │ kubernetes │        21         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpupod.yaml                                                │ kubernetes │        20         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpupod2.yaml                                               │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cpupod3.yaml                                               │ kubernetes │        19         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad.yaml                                                │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad1.yaml                                               │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad10.yaml                                              │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad10_1.yaml                                            │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad11.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad11_1.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad11_2.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad12.yaml                                              │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad12_1.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad12_2.yaml                                            │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad13.yaml                                              │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad13_1.yaml                                            │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad13_2.yaml                                            │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad14.yaml                                              │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad14_1.yaml                                            │ kubernetes │         3         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad14_2.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad15.yaml                                              │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad15_1.yaml                                            │ kubernetes │         1         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad16.yaml                                              │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad16_1.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad16_2.yaml                                            │ kubernetes │         0         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad17.yaml                                              │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad17_1.yaml                                            │ kubernetes │         2         │
├────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ cr-bad17_2.yaml                                            │ kubernetes │         1         │
└────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


core.v1.Node9.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Node9.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Node9.yaml:36-53
────────────────────────────────────────
  36 ┌   configSource:
  37 │     configMap:
  38 │       kubeletConfigKey: kubeletConfigKeyValue
  39 │       name: nameValue
  40 │       namespace: namespaceValue
  41 │       resourceVersion: resourceVersionValue
  42 │       uid: uidValue
  43 │   externalID: externalIDValue
  44 └   podCIDR: podCIDRValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolume.after_roundtrip.yaml (kubernetes)
==========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume.after_roundtrip.yaml:32-217
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - £.vǴʌ鴜Ł%Ũ
  34 │   awsElasticBlockStore:
  35 │     fsType: "27"
  36 │     partition: -321835912
  37 │     readOnly: true
  38 │     volumeID: "26"
  39 │   azureDisk:
  40 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume.after_roundtrip.yaml:32-217
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - £.vǴʌ鴜Ł%Ũ
  34 │   awsElasticBlockStore:
  35 │     fsType: "27"
  36 │     partition: -321835912
  37 │     readOnly: true
  38 │     volumeID: "26"
  39 │   azureDisk:
  40 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────



core.v1.PersistentVolume.after_roundtrip1.yaml (kubernetes)
===========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume.after_roundtrip1.yaml:32-217
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - £.vǴʌ鴜Ł%Ũ
  34 │   awsElasticBlockStore:
  35 │     fsType: "27"
  36 │     partition: -321835912
  37 │     readOnly: true
  38 │     volumeID: "26"
  39 │   azureDisk:
  40 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume.after_roundtrip1.yaml:32-217
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - £.vǴʌ鴜Ł%Ũ
  34 │   awsElasticBlockStore:
  35 │     fsType: "27"
  36 │     partition: -321835912
  37 │     readOnly: true
  38 │     volumeID: "26"
  39 │   azureDisk:
  40 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────



core.v1.PersistentVolume10.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume10.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "23"
  37 │     partition: -1821408417
  38 │     volumeID: "22"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "79"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume10.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "23"
  37 │     partition: -1821408417
  38 │     volumeID: "22"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "79"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume12.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume12.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume12.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume13.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume13.yaml:35-220
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - £.vǴʌ鴜Ł%Ũ
  37 │   awsElasticBlockStore:
  38 │     fsType: "27"
  39 │     partition: -321835912
  40 │     readOnly: true
  41 │     volumeID: "26"
  42 │   azureDisk:
  43 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume13.yaml:35-220
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - £.vǴʌ鴜Ł%Ũ
  37 │   awsElasticBlockStore:
  38 │     fsType: "27"
  39 │     partition: -321835912
  40 │     readOnly: true
  41 │     volumeID: "26"
  42 │   azureDisk:
  43 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────



core.v1.PersistentVolume14.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume14.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume14.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume16.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume16.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume16.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume17.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume17.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume17.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume24.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume24.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume24.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume25.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume25.yaml:35-220
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - £.vǴʌ鴜Ł%Ũ
  37 │   awsElasticBlockStore:
  38 │     fsType: "27"
  39 │     partition: -321835912
  40 │     readOnly: true
  41 │     volumeID: "26"
  42 │   azureDisk:
  43 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume25.yaml:35-220
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - £.vǴʌ鴜Ł%Ũ
  37 │   awsElasticBlockStore:
  38 │     fsType: "27"
  39 │     partition: -321835912
  40 │     readOnly: true
  41 │     volumeID: "26"
  42 │   azureDisk:
  43 └     cachingMode: rȮO励鹗塢ē ƕP喂ƈ斎AO6ĴC
  ..   
────────────────────────────────────────



core.v1.PersistentVolume26.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume26.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume26.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume28.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume28.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume28.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume29.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume29.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume29.yaml:34-218
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - ƺ魋Ď儇击3ƆìQ
  36 │   awsElasticBlockStore:
  37 │     fsType: "23"
  38 │     partition: -1821408417
  39 │     volumeID: "22"
  40 │   azureDisk:
  41 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  42 └     diskName: "79"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume39.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume39.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume39.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume4.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume4.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "23"
  37 │     partition: -1821408417
  38 │     volumeID: "22"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "79"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume4.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "23"
  37 │     partition: -1821408417
  38 │     volumeID: "22"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "79"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume40.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume40.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume40.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────



core.v1.PersistentVolume41.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolume41.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolume41.yaml:33-217
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - ƺ魋Ď儇击3ƆìQ
  35 │   awsElasticBlockStore:
  36 │     fsType: "22"
  37 │     partition: -1821408417
  38 │     volumeID: "21"
  39 │   azureDisk:
  40 │     cachingMode: ȎțêɘĲ斬³;Ơ歿
  41 └     diskName: "78"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip.yaml (kubernetes)
===============================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip1.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip1.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip1.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip10.yaml (kubernetes)
=================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip10.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip10.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip11.yaml (kubernetes)
=================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip11.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip11.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip2.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip2.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip2.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip3.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip3.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip3.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip4.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip4.yaml:32-53
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  34 │   dataSource:
  35 │     apiGroup: "32"
  36 │     kind: "33"
  37 │     name: "34"
  38 │   resources:
  39 │     limits:
  40 └       p:籀帊: "219"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip4.yaml:32-53
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  34 │   dataSource:
  35 │     apiGroup: "32"
  36 │     kind: "33"
  37 │     name: "34"
  38 │   resources:
  39 │     limits:
  40 └       p:籀帊: "219"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip5.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip5.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip5.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip6.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip6.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip6.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip7.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip7.yaml:32-53
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  34 │   dataSource:
  35 │     apiGroup: "32"
  36 │     kind: "33"
  37 │     name: "34"
  38 │   resources:
  39 │     limits:
  40 └       p:籀帊: "219"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip7.yaml:32-53
────────────────────────────────────────
  32 ┌   accessModes:
  33 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  34 │   dataSource:
  35 │     apiGroup: "32"
  36 │     kind: "33"
  37 │     name: "34"
  38 │   resources:
  39 │     limits:
  40 └       p:籀帊: "219"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip8.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip8.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip8.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.after_roundtrip9.yaml (kubernetes)
================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip9.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.after_roundtrip9.yaml:36-62
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim1.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim1.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim1.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim10.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim10.yaml:33-56
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "28"
  37 │     kind: "29"
  38 │     name: "30"
  39 │   dataSourceRef:
  40 │     apiGroup: "31"
  41 └     kind: "32"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim10.yaml:33-56
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "28"
  37 │     kind: "29"
  38 │     name: "30"
  39 │   dataSourceRef:
  40 │     apiGroup: "31"
  41 └     kind: "32"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim11.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim11.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim11.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim12.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim12.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim12.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim13.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim13.yaml:35-56
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  37 │   dataSource:
  38 │     apiGroup: "32"
  39 │     kind: "33"
  40 │     name: "34"
  41 │   resources:
  42 │     limits:
  43 └       p:籀帊: "219"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim13.yaml:35-56
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  37 │   dataSource:
  38 │     apiGroup: "32"
  39 │     kind: "33"
  40 │     name: "34"
  41 │   resources:
  42 │     limits:
  43 └       p:籀帊: "219"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim14.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim14.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim14.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim15.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim15.yaml:37-62
────────────────────────────────────────
  37 ┌   accessModes:
  38 │   - accessModesValue
  39 │   dataSource:
  40 │     apiGroup: apiGroupValue
  41 │     kind: kindValue
  42 │     name: nameValue
  43 │   dataSourceRef:
  44 │     apiGroup: apiGroupValue
  45 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim15.yaml:37-62
────────────────────────────────────────
  37 ┌   accessModes:
  38 │   - accessModesValue
  39 │   dataSource:
  40 │     apiGroup: apiGroupValue
  41 │     kind: kindValue
  42 │     name: nameValue
  43 │   dataSourceRef:
  44 │     apiGroup: apiGroupValue
  45 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim16.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim16.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim16.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim17.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim17.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim17.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim18.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim18.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim18.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim19.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim19.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim19.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim2.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim2.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim2.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim20.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim20.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim20.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim21.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim21.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim21.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim22.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim22.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim22.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim23.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim23.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim23.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim24.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim24.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim24.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim25.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim25.yaml:35-56
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  37 │   dataSource:
  38 │     apiGroup: "32"
  39 │     kind: "33"
  40 │     name: "34"
  41 │   resources:
  42 │     limits:
  43 └       p:籀帊: "219"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim25.yaml:35-56
────────────────────────────────────────
  35 ┌   accessModes:
  36 │   - 脽ěĂ凗蓏Ŋ蛊ĉy緅縕
  37 │   dataSource:
  38 │     apiGroup: "32"
  39 │     kind: "33"
  40 │     name: "34"
  41 │   resources:
  42 │     limits:
  43 └       p:籀帊: "219"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim26.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim26.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim26.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim27.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim27.yaml:37-62
────────────────────────────────────────
  37 ┌   accessModes:
  38 │   - accessModesValue
  39 │   dataSource:
  40 │     apiGroup: apiGroupValue
  41 │     kind: kindValue
  42 │     name: nameValue
  43 │   dataSourceRef:
  44 │     apiGroup: apiGroupValue
  45 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim27.yaml:37-62
────────────────────────────────────────
  37 ┌   accessModes:
  38 │   - accessModesValue
  39 │   dataSource:
  40 │     apiGroup: apiGroupValue
  41 │     kind: kindValue
  42 │     name: nameValue
  43 │   dataSourceRef:
  44 │     apiGroup: apiGroupValue
  45 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim28.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim28.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim28.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim29.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim29.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim29.yaml:34-57
────────────────────────────────────────
  34 ┌   accessModes:
  35 │   - '@Hr鯹)晿'
  36 │   dataSource:
  37 │     apiGroup: "28"
  38 │     kind: "29"
  39 │     name: "30"
  40 │   dataSourceRef:
  41 │     apiGroup: "31"
  42 └     kind: "32"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim3.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim3.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim3.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim30.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim30.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim30.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim31.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim31.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim31.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim32.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim32.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim32.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim33.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim33.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim33.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim34.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim34.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim34.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim35.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim35.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim35.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim39.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim39.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim39.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim4.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim4.yaml:33-56
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "28"
  37 │     kind: "29"
  38 │     name: "30"
  39 │   dataSourceRef:
  40 │     apiGroup: "31"
  41 └     kind: "32"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim4.yaml:33-56
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "28"
  37 │     kind: "29"
  38 │     name: "30"
  39 │   dataSourceRef:
  40 │     apiGroup: "31"
  41 └     kind: "32"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim40.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim40.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim40.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim41.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim41.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim41.yaml:33-52
────────────────────────────────────────
  33 ┌   accessModes:
  34 │   - '@Hr鯹)晿'
  35 │   dataSource:
  36 │     apiGroup: "27"
  37 │     kind: "28"
  38 │     name: "29"
  39 │   resources:
  40 │     limits:
  41 └       Ď儇击3ƆìQ喞艋涽託仭w-檮Ǣ: "465"
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim42.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim42.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim42.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim43.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim43.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim43.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim44.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim44.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim44.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim45.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim45.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim45.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim46.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim46.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim46.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim47.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim47.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim47.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim48.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim48.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim48.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim49.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim49.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim49.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim5.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim5.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim5.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim50.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim50.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim50.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim51.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim51.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim51.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim52.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim52.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim52.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim53.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim53.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim53.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim54.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim54.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim54.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim55.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim55.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim55.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim56.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim56.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim56.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim6.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim6.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim6.yaml:36-63
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim7.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim7.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim7.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim8.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim8.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim8.yaml:36-64
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.PersistentVolumeClaim9.yaml (kubernetes)
================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.PersistentVolumeClaim9.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.PersistentVolumeClaim9.yaml:36-61
────────────────────────────────────────
  36 ┌   accessModes:
  37 │   - accessModesValue
  38 │   dataSource:
  39 │     apiGroup: apiGroupValue
  40 │     kind: kindValue
  41 │     name: nameValue
  42 │   dataSourceRef:
  43 │     apiGroup: apiGroupValue
  44 └     kind: kindValue
  ..   
────────────────────────────────────────



core.v1.ResourceQuota.after_roundtrip.yaml (kubernetes)
=======================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota.after_roundtrip.yaml:32-41
────────────────────────────────────────
  32 ┌   hard:
  33 │     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
  34 │   scopeSelector:
  35 │     matchExpressions:
  36 │     - operator: 彀亞
  37 │       scopeName: ?狱³-Ǐ忄*齧獚
  38 │       values:
  39 │       - "24"
  40 │   scopes:
  41 └   - 颋ǅ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota.after_roundtrip.yaml:33
────────────────────────────────────────
  33 [     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
────────────────────────────────────────



core.v1.ResourceQuota.after_roundtrip1.yaml (kubernetes)
========================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota.after_roundtrip1.yaml:32-41
────────────────────────────────────────
  32 ┌   hard:
  33 │     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
  34 │   scopeSelector:
  35 │     matchExpressions:
  36 │     - operator: 彀亞
  37 │       scopeName: ?狱³-Ǐ忄*齧獚
  38 │       values:
  39 │       - "24"
  40 │   scopes:
  41 └   - 颋ǅ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota.after_roundtrip1.yaml:33
────────────────────────────────────────
  33 [     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
────────────────────────────────────────



core.v1.ResourceQuota.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota1.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota1.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota10.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota10.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "20"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota10.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota11.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota11.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota11.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota12.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota12.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "19"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota12.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota13.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota13.yaml:35-44
────────────────────────────────────────
  35 ┌   hard:
  36 │     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
  37 │   scopeSelector:
  38 │     matchExpressions:
  39 │     - operator: 彀亞
  40 │       scopeName: ?狱³-Ǐ忄*齧獚
  41 │       values:
  42 │       - "24"
  43 │   scopes:
  44 └   - 颋ǅ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota13.yaml:36
────────────────────────────────────────
  36 [     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
────────────────────────────────────────



core.v1.ResourceQuota14.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota14.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "19"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota14.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota15.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota15.yaml:37-46
────────────────────────────────────────
  37 ┌   hard:
  38 │     hardKey: "0"
  39 │   scopeSelector:
  40 │     matchExpressions:
  41 │     - operator: operatorValue
  42 │       scopeName: scopeNameValue
  43 │       values:
  44 │       - valuesValue
  45 │   scopes:
  46 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota15.yaml:38
────────────────────────────────────────
  38 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota16.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota16.yaml:34-43
────────────────────────────────────────
  34 ┌   hard:
  35 │     '@Hr鯹)晿': "617"
  36 │   scopeSelector:
  37 │     matchExpressions:
  38 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  39 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  40 │       values:
  41 │       - "20"
  42 │   scopes:
  43 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota16.yaml:35
────────────────────────────────────────
  35 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota17.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota17.yaml:34-43
────────────────────────────────────────
  34 ┌   hard:
  35 │     '@Hr鯹)晿': "617"
  36 │   scopeSelector:
  37 │     matchExpressions:
  38 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  39 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  40 │       values:
  41 │       - "20"
  42 │   scopes:
  43 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota17.yaml:35
────────────────────────────────────────
  35 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota18.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota18.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota18.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota19.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota19.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota19.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota2.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota2.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota2.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota20.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota20.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota20.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota21.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota21.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota21.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota22.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota22.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota22.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota23.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota23.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota23.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota24.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota24.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "19"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota24.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota25.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota25.yaml:35-44
────────────────────────────────────────
  35 ┌   hard:
  36 │     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
  37 │   scopeSelector:
  38 │     matchExpressions:
  39 │     - operator: 彀亞
  40 │       scopeName: ?狱³-Ǐ忄*齧獚
  41 │       values:
  42 │       - "24"
  43 │   scopes:
  44 └   - 颋ǅ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota25.yaml:36
────────────────────────────────────────
  36 [     脽ěĂ凗蓏Ŋ蛊ĉy緅縕: "57"
────────────────────────────────────────



core.v1.ResourceQuota26.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota26.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "19"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota26.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota27.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota27.yaml:37-46
────────────────────────────────────────
  37 ┌   hard:
  38 │     hardKey: "0"
  39 │   scopeSelector:
  40 │     matchExpressions:
  41 │     - operator: operatorValue
  42 │       scopeName: scopeNameValue
  43 │       values:
  44 │       - valuesValue
  45 │   scopes:
  46 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota27.yaml:38
────────────────────────────────────────
  38 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota28.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota28.yaml:34-43
────────────────────────────────────────
  34 ┌   hard:
  35 │     '@Hr鯹)晿': "617"
  36 │   scopeSelector:
  37 │     matchExpressions:
  38 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  39 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  40 │       values:
  41 │       - "20"
  42 │   scopes:
  43 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota28.yaml:35
────────────────────────────────────────
  35 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota29.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota29.yaml:34-43
────────────────────────────────────────
  34 ┌   hard:
  35 │     '@Hr鯹)晿': "617"
  36 │   scopeSelector:
  37 │     matchExpressions:
  38 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  39 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  40 │       values:
  41 │       - "20"
  42 │   scopes:
  43 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota29.yaml:35
────────────────────────────────────────
  35 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota3.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota3.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota3.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota30.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota30.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota30.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota31.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota31.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota31.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota32.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota32.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota32.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota33.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota33.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota33.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota34.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota34.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota34.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota35.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota35.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota35.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota39.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota39.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "19"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota39.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota4.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "20"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota4.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota40.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota40.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "19"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota40.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota41.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota41.yaml:33-42
────────────────────────────────────────
  33 ┌   hard:
  34 │     '@Hr鯹)晿': "617"
  35 │   scopeSelector:
  36 │     matchExpressions:
  37 │     - operator: 獚敆ȎțêɘĲ斬³;Ơ歿:狞夌碕ʂɭ
  38 │       scopeName: ʕVŚ(ĿȊ甞谐颋ǅSǡƏS$+½H牗
  39 │       values:
  40 │       - "19"
  41 │   scopes:
  42 └   - Ĩɘ.蘯6ċV夸eɑeʤ脽ěĂ
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota41.yaml:34
────────────────────────────────────────
  34 [     '@Hr鯹)晿': "617"
────────────────────────────────────────



core.v1.ResourceQuota42.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota42.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota42.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota43.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota43.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota43.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota44.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota44.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota44.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota45.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota45.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota45.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota46.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota46.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota46.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota47.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota47.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota47.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota48.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota48.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota48.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota49.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota49.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota49.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota5.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota5.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota50.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota50.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota50.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota51.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota51.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota51.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota52.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota52.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota52.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota53.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota53.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota53.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota54.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota54.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota54.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota55.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota55.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota55.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota56.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota56.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota56.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota6.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota6.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota6.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota7.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota7.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota7.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota8.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota8.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota8.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.ResourceQuota9.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.ResourceQuota9.yaml:36-45
────────────────────────────────────────
  36 ┌   hard:
  37 │     hardKey: "0"
  38 │   scopeSelector:
  39 │     matchExpressions:
  40 │     - operator: operatorValue
  41 │       scopeName: scopeNameValue
  42 │       values:
  43 │       - valuesValue
  44 │   scopes:
  45 └   - scopesValue
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.ResourceQuota9.yaml:37
────────────────────────────────────────
  37 [     hardKey: "0"
────────────────────────────────────────



core.v1.Service.after_roundtrip.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service.after_roundtrip.yaml:32-54
────────────────────────────────────────
  32 ┌   clusterIP: "27"
  33 │   externalIPs:
  34 │   - "28"
  35 │   externalName: "31"
  36 │   externalTrafficPolicy: 螩B
  37 │   healthCheckNodePort: -21009133
  38 │   loadBalancerIP: "29"
  39 │   loadBalancerSourceRanges:
  40 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service.after_roundtrip.yaml:32-54
────────────────────────────────────────
  32 ┌   clusterIP: "27"
  33 │   externalIPs:
  34 │   - "28"
  35 │   externalName: "31"
  36 │   externalTrafficPolicy: 螩B
  37 │   healthCheckNodePort: -21009133
  38 │   loadBalancerIP: "29"
  39 │   loadBalancerSourceRanges:
  40 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service.after_roundtrip1.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service.after_roundtrip1.yaml:32-54
────────────────────────────────────────
  32 ┌   clusterIP: "27"
  33 │   externalIPs:
  34 │   - "28"
  35 │   externalName: "31"
  36 │   externalTrafficPolicy: 螩B
  37 │   healthCheckNodePort: -21009133
  38 │   loadBalancerIP: "29"
  39 │   loadBalancerSourceRanges:
  40 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service.after_roundtrip1.yaml:32-54
────────────────────────────────────────
  32 ┌   clusterIP: "27"
  33 │   externalIPs:
  34 │   - "28"
  35 │   externalName: "31"
  36 │   externalTrafficPolicy: 螩B
  37 │   healthCheckNodePort: -21009133
  38 │   loadBalancerIP: "29"
  39 │   loadBalancerSourceRanges:
  40 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service.after_roundtrip2.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service.after_roundtrip2.yaml:33-58
────────────────────────────────────────
  33 ┌   clusterIP: "24"
  34 │   externalIPs:
  35 │   - "25"
  36 │   externalName: "28"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   loadBalancerIP: "26"
  40 │   loadBalancerSourceRanges:
  41 └   - "27"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service.after_roundtrip2.yaml:33-58
────────────────────────────────────────
  33 ┌   clusterIP: "24"
  34 │   externalIPs:
  35 │   - "25"
  36 │   externalName: "28"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   loadBalancerIP: "26"
  40 │   loadBalancerSourceRanges:
  41 └   - "27"
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service1.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service1.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service1.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service10.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service10.yaml:33-64
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "25"
  35 │   clusterIPs:
  36 │   - "26"
  37 │   externalIPs:
  38 │   - "27"
  39 │   externalName: "30"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service10.yaml:33-64
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "25"
  35 │   clusterIPs:
  36 │   - "26"
  37 │   externalIPs:
  38 │   - "27"
  39 │   externalName: "30"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service11.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service11.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service11.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service12.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service12.yaml:33-56
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service12.yaml:33-56
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service13.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service13.yaml:35-57
────────────────────────────────────────
  35 ┌   clusterIP: "27"
  36 │   externalIPs:
  37 │   - "28"
  38 │   externalName: "31"
  39 │   externalTrafficPolicy: 螩B
  40 │   healthCheckNodePort: -21009133
  41 │   loadBalancerIP: "29"
  42 │   loadBalancerSourceRanges:
  43 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service13.yaml:35-57
────────────────────────────────────────
  35 ┌   clusterIP: "27"
  36 │   externalIPs:
  37 │   - "28"
  38 │   externalName: "31"
  39 │   externalTrafficPolicy: 螩B
  40 │   healthCheckNodePort: -21009133
  41 │   loadBalancerIP: "29"
  42 │   loadBalancerSourceRanges:
  43 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service14.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service14.yaml:33-56
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service14.yaml:33-56
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service15.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service15.yaml:37-68
────────────────────────────────────────
  37 ┌   allocateLoadBalancerNodePorts: true
  38 │   clusterIP: clusterIPValue
  39 │   clusterIPs:
  40 │   - clusterIPsValue
  41 │   externalIPs:
  42 │   - externalIPsValue
  43 │   externalName: externalNameValue
  44 │   externalTrafficPolicy: externalTrafficPolicyValue
  45 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service15.yaml:37-68
────────────────────────────────────────
  37 ┌   allocateLoadBalancerNodePorts: true
  38 │   clusterIP: clusterIPValue
  39 │   clusterIPs:
  40 │   - clusterIPsValue
  41 │   externalIPs:
  42 │   - externalIPsValue
  43 │   externalName: externalNameValue
  44 │   externalTrafficPolicy: externalTrafficPolicyValue
  45 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service16.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service16.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service16.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service17.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service17.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service17.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service18.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service18.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service18.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service19.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service19.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service19.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service2.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service2.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service2.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service20.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service20.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service20.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service21.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service21.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service21.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service22.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service22.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service22.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service23.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service23.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service23.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service24.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service24.yaml:33-58
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service24.yaml:33-58
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service25.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service25.yaml:35-57
────────────────────────────────────────
  35 ┌   clusterIP: "27"
  36 │   externalIPs:
  37 │   - "28"
  38 │   externalName: "31"
  39 │   externalTrafficPolicy: 螩B
  40 │   healthCheckNodePort: -21009133
  41 │   loadBalancerIP: "29"
  42 │   loadBalancerSourceRanges:
  43 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service25.yaml:35-57
────────────────────────────────────────
  35 ┌   clusterIP: "27"
  36 │   externalIPs:
  37 │   - "28"
  38 │   externalName: "31"
  39 │   externalTrafficPolicy: 螩B
  40 │   healthCheckNodePort: -21009133
  41 │   loadBalancerIP: "29"
  42 │   loadBalancerSourceRanges:
  43 └   - "30"
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service26.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service26.yaml:33-56
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service26.yaml:33-56
────────────────────────────────────────
  33 ┌   clusterIP: "23"
  34 │   externalIPs:
  35 │   - "24"
  36 │   externalName: "27"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "25"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service27.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service27.yaml:37-68
────────────────────────────────────────
  37 ┌   allocateLoadBalancerNodePorts: true
  38 │   clusterIP: clusterIPValue
  39 │   clusterIPs:
  40 │   - clusterIPsValue
  41 │   externalIPs:
  42 │   - externalIPsValue
  43 │   externalName: externalNameValue
  44 │   externalTrafficPolicy: externalTrafficPolicyValue
  45 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service27.yaml:37-68
────────────────────────────────────────
  37 ┌   allocateLoadBalancerNodePorts: true
  38 │   clusterIP: clusterIPValue
  39 │   clusterIPs:
  40 │   - clusterIPsValue
  41 │   externalIPs:
  42 │   - externalIPsValue
  43 │   externalName: externalNameValue
  44 │   externalTrafficPolicy: externalTrafficPolicyValue
  45 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service28.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service28.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service28.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service29.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service29.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service29.yaml:34-65
────────────────────────────────────────
  34 ┌   allocateLoadBalancerNodePorts: true
  35 │   clusterIP: "25"
  36 │   clusterIPs:
  37 │   - "26"
  38 │   externalIPs:
  39 │   - "27"
  40 │   externalName: "30"
  41 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  42 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service3.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service3.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service3.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service30.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service30.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service30.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service31.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service31.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service31.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service32.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service32.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service32.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service33.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service33.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service33.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service34.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service34.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service34.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service35.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service35.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service35.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service39.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service39.yaml:33-66
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "24"
  35 │   clusterIPs:
  36 │   - "25"
  37 │   externalIPs:
  38 │   - "26"
  39 │   externalName: "29"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service39.yaml:33-66
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "24"
  35 │   clusterIPs:
  36 │   - "25"
  37 │   externalIPs:
  38 │   - "26"
  39 │   externalName: "29"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service4.yaml:33-64
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "25"
  35 │   clusterIPs:
  36 │   - "26"
  37 │   externalIPs:
  38 │   - "27"
  39 │   externalName: "30"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service4.yaml:33-64
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "25"
  35 │   clusterIPs:
  36 │   - "26"
  37 │   externalIPs:
  38 │   - "27"
  39 │   externalName: "30"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service40.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service40.yaml:33-59
────────────────────────────────────────
  33 ┌   clusterIP: "24"
  34 │   externalIPs:
  35 │   - "25"
  36 │   externalName: "28"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "26"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service40.yaml:33-59
────────────────────────────────────────
  33 ┌   clusterIP: "24"
  34 │   externalIPs:
  35 │   - "25"
  36 │   externalName: "28"
  37 │   externalTrafficPolicy: ʤ脽ěĂ凗蓏Ŋ蛊ĉy緅縕>Ž
  38 │   healthCheckNodePort: -1095807277
  39 │   ipFamily: ³-Ǐ忄*齧獚敆ȎțêɘĲ斬
  40 │   loadBalancerIP: "26"
  41 └   loadBalancerSourceRanges:
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service41.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service41.yaml:33-64
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "24"
  35 │   clusterIPs:
  36 │   - "25"
  37 │   externalIPs:
  38 │   - "26"
  39 │   externalName: "29"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service41.yaml:33-64
────────────────────────────────────────
  33 ┌   allocateLoadBalancerNodePorts: true
  34 │   clusterIP: "24"
  35 │   clusterIPs:
  36 │   - "25"
  37 │   externalIPs:
  38 │   - "26"
  39 │   externalName: "29"
  40 │   externalTrafficPolicy: ƏS$+½H牗洝尿
  41 └   healthCheckNodePort: -1965738697
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service '2' in '4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service42.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service42.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service42.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service43.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service43.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service43.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service44.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service44.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service44.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service45.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service45.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service45.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service46.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service46.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service46.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service47.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service47.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service47.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service48.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service48.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service48.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service49.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service49.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service49.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service5.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service5.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service5.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service50.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service50.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service50.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service51.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service51.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service51.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service52.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service52.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service52.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service53.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service53.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service53.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service54.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service54.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service54.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service55.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service55.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service55.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service56.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service56.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service56.yaml:36-68
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service6.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service6.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service6.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service7.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service7.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service7.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service8.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service8.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service8.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



core.v1.Service9.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 core.v1.Service9.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 core.v1.Service9.yaml:36-67
────────────────────────────────────────
  36 ┌   allocateLoadBalancerNodePorts: true
  37 │   clusterIP: clusterIPValue
  38 │   clusterIPs:
  39 │   - clusterIPsValue
  40 │   externalIPs:
  41 │   - externalIPsValue
  42 │   externalName: externalNameValue
  43 │   externalTrafficPolicy: externalTrafficPolicyValue
  44 └   healthCheckNodePort: 12
  ..   
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nameValue' in 'namespaceValue' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



coredns-1.10.11_4.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns-new' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns-new' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns-new' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns-new' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns-new' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns-new' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.10.11_4.yaml:7-93
────────────────────────────────────────
   7 ┌   replicas: 2
   8 │   strategy:
   9 │     type: RollingUpdate
  10 │     rollingUpdate:
  11 │       maxUnavailable: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: kube-dns
  15 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.10.11_4.yaml:7-93
────────────────────────────────────────
   7 ┌   replicas: 2
   8 │   strategy:
   9 │     type: RollingUpdate
  10 │     rollingUpdate:
  11 │       maxUnavailable: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: kube-dns
  15 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.10.11_4.yaml:7-93
────────────────────────────────────────
   7 ┌   replicas: 2
   8 │   strategy:
   9 │     type: RollingUpdate
  10 │     rollingUpdate:
  11 │       maxUnavailable: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: kube-dns
  15 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns-new" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns-new in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns-new in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns-1.10.11_4.yaml:20-93
────────────────────────────────────────
  20 ┌       priorityClassName: system-cluster-critical
  21 │       serviceAccountName: coredns
  22 │       tolerations:
  23 │       - key: CriticalAddonsOnly
  24 │         operator: Exists
  25 │       nodeSelector:
  26 │         kubernetes.io/os: linux
  27 │       affinity:
  28 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns-new (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns-1.10.11_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns-1.10.11_5.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.10.11_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.10.11_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.10.11_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns-1.10.1_4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns-new' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns-new' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns-new' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns-new' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns-new' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns-new' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.10.1_4.yaml:7-93
────────────────────────────────────────
   7 ┌   replicas: 2
   8 │   strategy:
   9 │     type: RollingUpdate
  10 │     rollingUpdate:
  11 │       maxUnavailable: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: kube-dns
  15 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.10.1_4.yaml:7-93
────────────────────────────────────────
   7 ┌   replicas: 2
   8 │   strategy:
   9 │     type: RollingUpdate
  10 │     rollingUpdate:
  11 │       maxUnavailable: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: kube-dns
  15 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.10.1_4.yaml:7-93
────────────────────────────────────────
   7 ┌   replicas: 2
   8 │   strategy:
   9 │     type: RollingUpdate
  10 │     rollingUpdate:
  11 │       maxUnavailable: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       app: kube-dns
  15 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns-new" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns-new in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns-new in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns-1.10.1_4.yaml:20-93
────────────────────────────────────────
  20 ┌       priorityClassName: system-cluster-critical
  21 │       serviceAccountName: coredns
  22 │       tolerations:
  23 │       - key: CriticalAddonsOnly
  24 │         operator: Exists
  25 │       nodeSelector:
  26 │         kubernetes.io/os: linux
  27 │       affinity:
  28 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns-new (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns-1.10.1_4.yaml:38-85
────────────────────────────────────────
  38 ┌       - name: coredns
  39 │         image: coredns/coredns:1.10.1
  40 │         imagePullPolicy: IfNotPresent
  41 │         resources:
  42 │           limits:
  43 │             memory: 170Mi
  44 │           requests:
  45 │             cpu: 100m
  46 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns-1.10.1_5.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.10.1_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.10.1_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.10.1_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns-1.7.01_4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.7.01_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.7.01_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.7.01_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns-1.7.01_4.yaml:23-86
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         beta.kubernetes.io/os: linux
  30 │       containers:
  31 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns-1.7.01_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns-1.7.01_5.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.7.01_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.7.01_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.7.01_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns-1.7.0_4.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.7.0_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.7.0_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.7.0_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns-1.7.0_4.yaml:23-86
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         beta.kubernetes.io/os: linux
  30 │       containers:
  31 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns-1.7.0_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns-1.7.0_5.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-1.7.0_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-1.7.0_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-1.7.0_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns-controller.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns-controller.yaml:54-99
────────────────────────────────────────
  54 ┌       - name: coredns
  55 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  56 │         imagePullPolicy: IfNotPresent
  57 │         resources:
  58 │           limits:
  59 │             memory: 170Mi
  60 │           requests:
  61 │             cpu: 100m
  62 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns-controller.yaml:54-99
────────────────────────────────────────
  54 ┌       - name: coredns
  55 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  56 │         imagePullPolicy: IfNotPresent
  57 │         resources:
  58 │           limits:
  59 │             memory: 170Mi
  60 │           requests:
  61 │             cpu: 100m
  62 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns-controller.yaml:54-99
────────────────────────────────────────
  54 ┌       - name: coredns
  55 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  56 │         imagePullPolicy: IfNotPresent
  57 │         resources:
  58 │           limits:
  59 │             memory: 170Mi
  60 │           requests:
  61 │             cpu: 100m
  62 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns-controller.yaml:54-99
────────────────────────────────────────
  54 ┌       - name: coredns
  55 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  56 │         imagePullPolicy: IfNotPresent
  57 │         resources:
  58 │           limits:
  59 │             memory: 170Mi
  60 │           requests:
  61 │             cpu: 100m
  62 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns-controller.yaml:54-99
────────────────────────────────────────
  54 ┌       - name: coredns
  55 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  56 │         imagePullPolicy: IfNotPresent
  57 │         resources:
  58 │           limits:
  59 │             memory: 170Mi
  60 │           requests:
  61 │             cpu: 100m
  62 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-controller.yaml:20-107
────────────────────────────────────────
  20 ┌   strategy:
  21 │     type: RollingUpdate
  22 │     rollingUpdate:
  23 │       maxUnavailable: 1
  24 │   selector:
  25 │     matchLabels:
  26 │       k8s-app: kube-dns
  27 │   template:
  28 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-controller.yaml:20-107
────────────────────────────────────────
  20 ┌   strategy:
  21 │     type: RollingUpdate
  22 │     rollingUpdate:
  23 │       maxUnavailable: 1
  24 │   selector:
  25 │     matchLabels:
  26 │       k8s-app: kube-dns
  27 │   template:
  28 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-controller.yaml:20-107
────────────────────────────────────────
  20 ┌   strategy:
  21 │     type: RollingUpdate
  22 │     rollingUpdate:
  23 │       maxUnavailable: 1
  24 │   selector:
  25 │     matchLabels:
  26 │       k8s-app: kube-dns
  27 │   template:
  28 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns-controller.yaml:54-99
────────────────────────────────────────
  54 ┌       - name: coredns
  55 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  56 │         imagePullPolicy: IfNotPresent
  57 │         resources:
  58 │           limits:
  59 │             memory: 170Mi
  60 │           requests:
  61 │             cpu: 100m
  62 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns-loadbalancer.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-loadbalancer.yaml:9-15
────────────────────────────────────────
   9 ┌   type: LoadBalancer
  10 │   ports:
  11 │   - port: 5000
  12 │     protocol: TCP
  13 │     targetPort: 5000
  14 │   selector:
  15 └     k8s-app: kube-dns
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-loadbalancer.yaml:9-15
────────────────────────────────────────
   9 ┌   type: LoadBalancer
  10 │   ports:
  11 │   - port: 5000
  12 │     protocol: TCP
  13 │     targetPort: 5000
  14 │   selector:
  15 └     k8s-app: kube-dns
────────────────────────────────────────



coredns-network-policy.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'monitoring-network-coredns-policy' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-network-policy.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 9153
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-network-policy.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 9153
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-network-policy.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 9153
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────



coredns-network-policy1.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): NetworkPolicy 'monitoring-network-coredns-policy' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns-network-policy1.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 9153
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-network-policy1.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 9153
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-network-policy1.yaml:7-20
────────────────────────────────────────
   7 ┌   ingress:
   8 │   - ports:
   9 │     - port: 9153
  10 │       protocol: TCP
  11 │     from:
  12 │       - namespaceSelector:
  13 │           matchLabels:
  14 │             kubernetes.io/metadata.name: cattle-monitoring-system
  15 └   podSelector:
  ..   
────────────────────────────────────────



coredns-tcp-svc.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns-tcp-svc.yaml:6-15
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app.kubernetes.io/instance: k8gb
   9 │     app.kubernetes.io/name: coredns
  10 │   ports:
  11 │   - name: tcp-5353
  12 │     port: 53
  13 │     protocol: TCP
  14 │     targetPort: 5353
  15 └     nodePort: 30053
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns-tcp-svc.yaml:6-15
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     app.kubernetes.io/instance: k8gb
   9 │     app.kubernetes.io/name: coredns
  10 │   ports:
  11 │   - name: tcp-5353
  12 │     port: 53
  13 │     protocol: TCP
  14 │     targetPort: 5353
  15 └     nodePort: 30053
────────────────────────────────────────



coredns10_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns10_4.yaml:10-95
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns10_4.yaml:10-95
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns10_4.yaml:10-95
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns10_4.yaml:22-95
────────────────────────────────────────
  22 ┌       priorityClassName: system-cluster-critical
  23 │       serviceAccountName: coredns
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       nodeSelector:
  28 │         kubernetes.io/os: linux
  29 │       affinity:
  30 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns10_4.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: coredns/coredns:1.6.7
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 170Mi
  46 │           requests:
  47 │             cpu: 100m
  48 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns10_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns10_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns10_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns10_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns13_3.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns13_3.yaml:10-95
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns13_3.yaml:10-95
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns13_3.yaml:10-95
────────────────────────────────────────
  10 ┌   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxUnavailable: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       k8s-app: kube-dns
  17 │   template:
  18 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns13_3.yaml:22-95
────────────────────────────────────────
  22 ┌       priorityClassName: system-cluster-critical
  23 │       serviceAccountName: coredns
  24 │       tolerations:
  25 │       - key: CriticalAddonsOnly
  26 │         operator: Exists
  27 │       nodeSelector:
  28 │         kubernetes.io/os: linux
  29 │       affinity:
  30 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns13_3.yaml:40-87
────────────────────────────────────────
  40 ┌       - name: coredns
  41 │         image: registry.cn-hangzhou.aliyuncs.com/huisebug/source:coredns-1.10.1
  42 │         imagePullPolicy: IfNotPresent
  43 │         resources:
  44 │           limits:
  45 │             memory: 512Mi
  46 │           requests:
  47 │             cpu: 200m
  48 └             memory: 256Mi
  ..   
────────────────────────────────────────



coredns13_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns13_4.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: ${ClusterDns}
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns13_4.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: ${ClusterDns}
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns13_4.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: ${ClusterDns}
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns14_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns14_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns14_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns14_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns14_4.yaml:23-96
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       affinity:
  31 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns14_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns14_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns14_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns14_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns14_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns19_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns19_4.yaml:12-89
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns19_4.yaml:12-89
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns19_4.yaml:12-89
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns19_4.yaml:26-89
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       nodeSelector:
  32 │         kubernetes.io/os: linux
  33 │       containers:
  34 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns19_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns19_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns19_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.0.0.2
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns19_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.0.0.2
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns19_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.0.0.2
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns20_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns20_4.yaml:12-89
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns20_4.yaml:12-89
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns20_4.yaml:12-89
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns20_4.yaml:26-89
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       nodeSelector:
  32 │         kubernetes.io/os: linux
  33 │       containers:
  34 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns20_4.yaml:34-81
────────────────────────────────────────
  34 ┌       - name: coredns
  35 │         image: registry.aliyuncs.com/google_containers/coredns:v1.10.1
  36 │         imagePullPolicy: IfNotPresent
  37 │         resources:
  38 │           limits:
  39 │             memory: 512Mi
  40 │           requests:
  41 │             cpu: 100m
  42 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns20_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns20_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.0.0.2
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns20_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.0.0.2
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns20_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.0.0.2
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns21_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns21_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns21_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns21_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns21_4.yaml:23-86
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         beta.kubernetes.io/os: linux
  30 │       containers:
  31 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns21_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.7.0
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns21_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns21_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns21_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns21_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns23_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns23_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns23_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns23_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns23_4.yaml:23-80
────────────────────────────────────────
  23 ┌       serviceAccountName: coredns
  24 │       tolerations:
  25 │       - key: node-role.kubernetes.io/master
  26 │         effect: NoSchedule
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       containers:
  30 │       - name: coredns
  31 └         image: coredns/coredns:1.2.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns23_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns23_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns23_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns23_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns23_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────



coredns24_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns24_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns24_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns24_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns24_4.yaml:23-86
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       containers:
  31 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns24_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.10.1
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns24_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns24_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns24_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns24_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns25_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns25_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns25_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns25_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns25_4.yaml:23-96
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       affinity:
  31 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns25_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns25_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns25_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns25_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns25_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns27_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns27_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns27_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns27_4.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns27_4.yaml:23-86
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         beta.kubernetes.io/os: linux
  30 │       containers:
  31 └       - name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns27_4.yaml:31-78
────────────────────────────────────────
  31 ┌       - name: coredns
  32 │         image: coredns/coredns:1.6.9
  33 │         imagePullPolicy: IfNotPresent
  34 │         resources:
  35 │           limits:
  36 │             memory: 170Mi
  37 │           requests:
  38 │             cpu: 100m
  39 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns27_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns27_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns27_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns27_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns28.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns28.yaml:8-19
────────────────────────────────────────
   8 ┌   selector:
   9 │     app.kubernetes.io/name: coredns
  10 │   ports:
  11 │   - name: udp-53
  12 │     port: 53
  13 │     protocol: UDP
  14 │     targetPort: 53
  15 │   - name: tcp-53
  16 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns28.yaml:8-19
────────────────────────────────────────
   8 ┌   selector:
   9 │     app.kubernetes.io/name: coredns
  10 │   ports:
  11 │   - name: udp-53
  12 │     port: 53
  13 │     protocol: UDP
  14 │     targetPort: 53
  15 │   - name: tcp-53
  16 └     port: 53
  ..   
────────────────────────────────────────



coredns28_1.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 100, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coredns' of Deployment 'coredns' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coredns' of 'deployment' 'coredns' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coredns' of Deployment 'coredns' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns28_1.yaml:8-76
────────────────────────────────────────
   8 ┌   replicas: 3
   9 │   strategy:
  10 │     type: RollingUpdate
  11 │     rollingUpdate:
  12 │       maxUnavailable: 1
  13 │       maxSurge: 25%
  14 │   selector:
  15 │     matchLabels:
  16 └       app.kubernetes.io/name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns28_1.yaml:8-76
────────────────────────────────────────
   8 ┌   replicas: 3
   9 │   strategy:
  10 │     type: RollingUpdate
  11 │     rollingUpdate:
  12 │       maxUnavailable: 1
  13 │       maxSurge: 25%
  14 │   selector:
  15 │     matchLabels:
  16 └       app.kubernetes.io/name: coredns
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coredns in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coredns28_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coredns
   5 │   labels:
   6 └     app.kubernetes.io/name: coredns
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coredns in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns28_1.yaml:23-76
────────────────────────────────────────
  23 ┌       terminationGracePeriodSeconds: 30
  24 │       serviceAccountName: default
  25 │       dnsPolicy: Default
  26 │       containers:
  27 │       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 └         - -conf
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns28_1.yaml:27-69
────────────────────────────────────────
  27 ┌       - name: coredns
  28 │         image: coredns/coredns:1.9.4
  29 │         imagePullPolicy: IfNotPresent
  30 │         args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         volumeMounts:
  34 │         - name: config-volume
  35 └           mountPath: /etc/coredns
  ..   
────────────────────────────────────────



coredns30_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns30_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns30_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns30_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns30_4.yaml:23-96
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       affinity:
  31 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns30_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns30_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns30_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns30_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns30_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns35_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns35_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns35_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns35_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns35_4.yaml:23-96
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       affinity:
  31 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns35_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns35_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns35_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns35_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns35_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns37_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns37_5.yaml:11-20
────────────────────────────────────────
  11 ┌   selector:
  12 │     k8s-app: coredns
  13 │   clusterIP: 10.0.0.10
  14 │   ports:
  15 │   - name: dns
  16 │     port: 53
  17 │     protocol: UDP
  18 │   - name: dns-tcp
  19 │     port: 53
  20 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns37_5.yaml:11-20
────────────────────────────────────────
  11 ┌   selector:
  12 │     k8s-app: coredns
  13 │   clusterIP: 10.0.0.10
  14 │   ports:
  15 │   - name: dns
  16 │     port: 53
  17 │     protocol: UDP
  18 │   - name: dns-tcp
  19 │     port: 53
  20 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns37_5.yaml:11-20
────────────────────────────────────────
  11 ┌   selector:
  12 │     k8s-app: coredns
  13 │   clusterIP: 10.0.0.10
  14 │   ports:
  15 │   - name: dns
  16 │     port: 53
  17 │     protocol: UDP
  18 │   - name: dns-tcp
  19 │     port: 53
  20 └     protocol: TCP
────────────────────────────────────────



coredns38_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns38_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns38_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns38_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns38_4.yaml:23-96
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       affinity:
  31 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns38_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns38_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns38_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns38_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns38_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns3_4.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns3_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns3_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns3_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns3_4.yaml:23-80
────────────────────────────────────────
  23 ┌       serviceAccountName: coredns
  24 │       tolerations:
  25 │       - key: node-role.kubernetes.io/master
  26 │         effect: NoSchedule
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       containers:
  30 │       - name: coredns
  31 └         image: coredns/coredns:1.2.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns3_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns3_5.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns3_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns3_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns3_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────



coredns42_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns42_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns42_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns42_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns42_4.yaml:23-96
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       affinity:
  31 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns42_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns42_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns42_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns42_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns42_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns44_4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns44_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns44_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns44_4.yaml:10-96
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns44_4.yaml:23-96
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       serviceAccountName: coredns
  25 │       tolerations:
  26 │       - key: CriticalAddonsOnly
  27 │         operator: Exists
  28 │       nodeSelector:
  29 │         kubernetes.io/os: linux
  30 │       affinity:
  31 └         podAntiAffinity:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns44_4.yaml:41-88
────────────────────────────────────────
  41 ┌       - name: coredns
  42 │         image: coredns/coredns:1.9.4
  43 │         imagePullPolicy: IfNotPresent
  44 │         resources:
  45 │           limits:
  46 │             memory: 170Mi
  47 │           requests:
  48 │             cpu: 100m
  49 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns44_5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns44_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns44_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns44_5.yaml:14-26
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.96.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 └     port: 53
  ..   
────────────────────────────────────────



coredns7_4.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns7_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns7_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns7_4.yaml:10-80
────────────────────────────────────────
  10 ┌   replicas: 2
  11 │   strategy:
  12 │     type: RollingUpdate
  13 │     rollingUpdate:
  14 │       maxUnavailable: 1
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 └   template:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns7_4.yaml:23-80
────────────────────────────────────────
  23 ┌       serviceAccountName: coredns
  24 │       tolerations:
  25 │       - key: node-role.kubernetes.io/master
  26 │         effect: NoSchedule
  27 │       - key: CriticalAddonsOnly
  28 │         operator: Exists
  29 │       containers:
  30 │       - name: coredns
  31 └         image: coredns/coredns:1.2.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns7_4.yaml:30-72
────────────────────────────────────────
  30 ┌       - name: coredns
  31 │         image: coredns/coredns:1.2.2
  32 │         imagePullPolicy: IfNotPresent
  33 │         resources:
  34 │           limits:
  35 │             memory: 170Mi
  36 │           requests:
  37 │             cpu: 100m
  38 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns7_5.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns7_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns7_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns7_5.yaml:14-23
────────────────────────────────────────
  14 ┌   selector:
  15 │     k8s-app: kube-dns
  16 │   clusterIP: 10.32.0.10
  17 │   ports:
  18 │   - name: dns
  19 │     port: 53
  20 │     protocol: UDP
  21 │   - name: dns-tcp
  22 │     port: 53
  23 └     protocol: TCP
────────────────────────────────────────



coredns_deployment.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 99, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 9, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coredns' of Deployment 'coredns' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coredns' of 'deployment' 'coredns' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coredns' of Deployment 'coredns' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment.yaml:12-83
────────────────────────────────────────
  12 ┌   progressDeadlineSeconds: 600
  13 │   replicas: 1
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 │   strategy:
  19 │     rollingUpdate:
  20 └       maxSurge: 25%
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment.yaml:12-83
────────────────────────────────────────
  12 ┌   progressDeadlineSeconds: 600
  13 │   replicas: 1
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 │   strategy:
  19 │     rollingUpdate:
  20 └       maxSurge: 25%
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment.yaml:12-83
────────────────────────────────────────
  12 ┌   progressDeadlineSeconds: 600
  13 │   replicas: 1
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       k8s-app: kube-dns
  18 │   strategy:
  19 │     rollingUpdate:
  20 └       maxSurge: 25%
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coredns in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment.yaml:29-83
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment.yaml:30-63
────────────────────────────────────────
  30 ┌       - args:
  31 │         - -conf
  32 │         - /etc/coredns/Corefile
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         livenessProbe:
  36 │           failureThreshold: 5
  37 │           httpGet:
  38 └             path: /health
  ..   
────────────────────────────────────────



coredns_deployment10_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment10_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment10_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment10_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment10_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment10_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment10_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment10_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment10_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment10_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment10_4.yaml:26-101
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       affinity:
  29 │         podAntiAffinity:
  30 │           preferredDuringSchedulingIgnoredDuringExecution:
  31 │           - weight: 100
  32 │             podAffinityTerm:
  33 │               labelSelector:
  34 └                 matchExpressions:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment10_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment10_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment10_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment10_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment10_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment11_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment11_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment11_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment11_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment11_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment11_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment11_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment11_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment11_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment11_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment11_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment11_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment11_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment11_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment12_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment12_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment12_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment12_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment12_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment12_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment12_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment12_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment12_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment12_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment12_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment12_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment12_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment12_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment13_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment13_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment13_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment13_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment13_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment13_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment13_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment13_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment13_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment13_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment13_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment13_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment13_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment13_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment14_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment14_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment14_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment14_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment14_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment14_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment14_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment14_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment14_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment14_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment14_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment14_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment14_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment14_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment15_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment15_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment15_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment15_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment15_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment15_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment15_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment15_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment15_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment15_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment15_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment15_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment15_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment15_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment16_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment16_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment16_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment16_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment16_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment16_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment16_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment16_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment16_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment16_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment16_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment16_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment16_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment16_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment17_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment17_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment17_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment17_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment17_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment17_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment17_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment17_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment17_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment17_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment17_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment17_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment17_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment17_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment18_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment18_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment18_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment18_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment18_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment18_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment18_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment18_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment18_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment18_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment18_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment18_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment18_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment18_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment19_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment19_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment19_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment19_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment19_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment19_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment19_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment19_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment19_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment19_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment19_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment19_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment19_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment19_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment1_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment1_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment1_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment1_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment1_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment1_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): seccomp.security.alpha.kubernetes.io/pod should be set to 'runtime/default'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns_deployment1_4.yaml:24
────────────────────────────────────────
  24 [         seccomp.security.alpha.kubernetes.io/pod: docker/default
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment1_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment1_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment1_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment1_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment1_4.yaml:26-87
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       containers:
  32 │       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment1_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment1_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment1_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment1_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment1_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment20_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment20_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment20_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment20_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment20_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment20_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment20_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment20_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment20_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment20_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.8.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment20_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment20_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment20_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment20_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment21_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment21_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment21_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment21_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment21_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment21_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment21_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment21_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment21_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment21_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment21_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment21_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment21_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment21_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment22_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment22_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment22_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment22_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment22_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment22_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment22_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment22_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment22_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment22_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.9.3
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment22_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment22_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment22_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment22_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment23_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment23_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment23_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment23_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment23_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment23_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment23_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment23_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment23_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment23_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment23_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment23_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment23_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment23_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment24_4.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 106, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 5, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment24_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment24_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment24_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment24_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment24_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment24_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment24_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment24_4.yaml:12-102
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment24_4.yaml:47-94
────────────────────────────────────────
  47 ┌       - name: coredns
  48 │         image: registry.k8s.io/coredns/coredns:v1.10.1
  49 │         imagePullPolicy: IfNotPresent
  50 │         resources:
  51 │           limits:
  52 │             memory: 170Mi
  53 │           requests:
  54 │             cpu: 100m
  55 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment24_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment24_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment24_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment24_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment2_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 103, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment2_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment2_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment2_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment2_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment2_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): seccomp.security.alpha.kubernetes.io/pod should be set to 'runtime/default'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coredns_deployment2_4.yaml:24
────────────────────────────────────────
  24 [         seccomp.security.alpha.kubernetes.io/pod: docker/default
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment2_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment2_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment2_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment2_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment2_4.yaml:26-87
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       containers:
  32 │       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment2_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment2_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment2_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment2_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment2_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment3_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment3_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment3_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment3_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment3_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment3_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment3_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment3_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment3_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment3_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment3_4.yaml:26-87
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       containers:
  32 │       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment3_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment3_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment3_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment3_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment3_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment4_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment4_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment4_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment4_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment4_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment4_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment4_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment4_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment4_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment4_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment4_4.yaml:26-87
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       containers:
  32 │       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment4_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment4_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment4_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment4_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment4_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment5_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment5_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment5_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment5_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment5_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment5_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment5_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment5_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment5_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment5_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment5_4.yaml:26-87
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       containers:
  32 │       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment5_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment5_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment5_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment5_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment5_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment6_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment6_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment6_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment6_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment6_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment6_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment6_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment6_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment6_4.yaml:12-87
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment6_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment6_4.yaml:26-87
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       tolerations:
  29 │       - key: CriticalAddonsOnly
  30 │         operator: Exists
  31 │       containers:
  32 │       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment6_4.yaml:32-79
────────────────────────────────────────
  32 ┌       - name: coredns
  33 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  34 │         imagePullPolicy: IfNotPresent
  35 │         resources:
  36 │           limits:
  37 │             memory: 170Mi
  38 │           requests:
  39 │             cpu: 100m
  40 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment6_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment6_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment6_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment6_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment7_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment7_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment7_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment7_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment7_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment7_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment7_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment7_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment7_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment7_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment7_4.yaml:26-101
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       affinity:
  29 │         podAntiAffinity:
  30 │           preferredDuringSchedulingIgnoredDuringExecution:
  31 │           - weight: 100
  32 │             podAffinityTerm:
  33 │               labelSelector:
  34 └                 matchExpressions:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment7_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment7_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment7_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment7_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment7_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment8_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment8_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment8_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment8_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment8_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment8_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment8_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment8_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment8_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment8_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment8_4.yaml:26-101
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       affinity:
  29 │         podAntiAffinity:
  30 │           preferredDuringSchedulingIgnoredDuringExecution:
  31 │           - weight: 100
  32 │             podAffinityTerm:
  33 │               labelSelector:
  34 └                 matchExpressions:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment8_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment8_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment8_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment8_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment8_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.100.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment9_4.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 104, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 5, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'coredns' of Deployment 'coredns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coredns_deployment9_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coredns_deployment9_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coredns_deployment9_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coredns' of Deployment 'coredns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coredns_deployment9_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'coredns' of Deployment 'coredns' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 coredns_deployment9_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment9_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment9_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment9_4.yaml:12-101
────────────────────────────────────────
  12 ┌   strategy:
  13 │     type: RollingUpdate
  14 │     rollingUpdate:
  15 │       maxUnavailable: 1
  16 │   selector:
  17 │     matchLabels:
  18 │       k8s-app: kube-dns
  19 │   template:
  20 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coredns" of deployment "coredns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coredns_deployment9_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment coredns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coredns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coredns_deployment9_4.yaml:26-101
────────────────────────────────────────
  26 ┌       priorityClassName: system-cluster-critical
  27 │       serviceAccountName: coredns
  28 │       affinity:
  29 │         podAntiAffinity:
  30 │           preferredDuringSchedulingIgnoredDuringExecution:
  31 │           - weight: 100
  32 │             podAffinityTerm:
  33 │               labelSelector:
  34 └                 matchExpressions:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coredns in deployment coredns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 coredns_deployment9_4.yaml:46-93
────────────────────────────────────────
  46 ┌       - name: coredns
  47 │         image: registry.k8s.io/coredns/coredns:v1.8.3
  48 │         imagePullPolicy: IfNotPresent
  49 │         resources:
  50 │           limits:
  51 │             memory: 170Mi
  52 │           requests:
  53 │             cpu: 100m
  54 └             memory: 70Mi
  ..   
────────────────────────────────────────



coredns_deployment9_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment9_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment9_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment9_5.yaml:15-27
────────────────────────────────────────
  15 ┌   selector:
  16 │     k8s-app: kube-dns
  17 │   clusterIP: 10.96.0.10
  18 │   ports:
  19 │   - name: dns
  20 │     port: 53
  21 │     protocol: UDP
  22 │   - name: dns-tcp
  23 └     port: 53
  ..   
────────────────────────────────────────



coredns_deployment_5.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kube-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 coredns_deployment_5.yaml:12-21
────────────────────────────────────────
  12 ┌   selector:
  13 │     k8s-app: kube-dns
  14 │   clusterIP: 10.96.0.10
  15 │   ports:
  16 │   - name: dns
  17 │     port: 53
  18 │     protocol: UDP
  19 │   - name: dns-tcp
  20 │     port: 53
  21 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coredns_deployment_5.yaml:12-21
────────────────────────────────────────
  12 ┌   selector:
  13 │     k8s-app: kube-dns
  14 │   clusterIP: 10.96.0.10
  15 │   ports:
  16 │   - name: dns
  17 │     port: 53
  18 │     protocol: UDP
  19 │   - name: dns-tcp
  20 │     port: 53
  21 └     protocol: TCP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coredns_deployment_5.yaml:12-21
────────────────────────────────────────
  12 ┌   selector:
  13 │     k8s-app: kube-dns
  14 │   clusterIP: 10.96.0.10
  15 │   ports:
  16 │   - name: dns
  17 │     port: 53
  18 │     protocol: UDP
  19 │   - name: dns-tcp
  20 │     port: 53
  21 └     protocol: TCP
────────────────────────────────────────



corex-example.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'corex-example' of Pod 'corex-example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'corex-example' of Pod 'corex-example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'corex-example' of 'pod' 'corex-example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'corex-example' of Pod 'corex-example' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'corex-example' of Pod 'corex-example' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'corex-example' of Pod 'corex-example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'corex-example' of Pod 'corex-example' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'corex-example' of Pod 'corex-example' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'corex-example' of Pod 'corex-example' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'corex-example' of Pod 'corex-example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'corex-example' of Pod 'corex-example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 corex-example.yaml:22-29
────────────────────────────────────────
  22 ┌   containers:
  23 │   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 corex-example.yaml:22-29
────────────────────────────────────────
  22 ┌   containers:
  23 │   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "corex-example" of pod "corex-example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod corex-example in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 corex-example.yaml:20
────────────────────────────────────────
  20 [   name: corex-example
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container corex-example in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 corex-example.yaml:23-29
────────────────────────────────────────
  23 ┌   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod corex-example in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 corex-example.yaml:22-29
────────────────────────────────────────
  22 ┌   containers:
  23 │   - name: corex-example
  24 │     image: corex:4.2.0
  25 │     command: ["/usr/local/corex/bin/ixsmi"]
  26 │     args: ["-l"]
  27 │     resources:
  28 │       limits:
  29 └         iluvatar.com/gpu: 1 # requesting 1 GPUs
────────────────────────────────────────



correct-port-name-external-name-service-type.yaml (kubernetes)
==============================================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 correct-port-name-external-name-service-type.yaml:7-13
────────────────────────────────────────
   7 ┌   externalName: nginx.example.com
   8 │   ports:
   9 │   - name: https
  10 │     port: 443
  11 │     protocol: TCP
  12 │     targetPort: 443
  13 └   type: ExternalName
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 correct-port-name-external-name-service-type.yaml:7-13
────────────────────────────────────────
   7 ┌   externalName: nginx.example.com
   8 │   ports:
   9 │   - name: https
  10 │     port: 443
  11 │     protocol: TCP
  12 │     targetPort: 443
  13 └   type: ExternalName
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'nginx-svc4' in 'nginx-ns4' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



correction-exercice1_2.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'pod-reader' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 correction-exercice1_2.yaml:7-17
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 │   - list
  15 └   - create
  ..   
────────────────────────────────────────



cortex-deployment.yaml (kubernetes)
===================================
Tests: 133 (SUCCESSES: 96, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 23, MEDIUM: 7, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cortex' of Deployment 'cortex' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'elasticsearch' of Deployment 'cortex' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cortex' of Deployment 'cortex' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'elasticsearch' of Deployment 'cortex' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cortex' of 'deployment' 'cortex' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'elasticsearch' of 'deployment' 'cortex' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cortex' of Deployment 'cortex' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'elasticsearch' of Deployment 'cortex' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cortex' of Deployment 'cortex' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'elasticsearch' of Deployment 'cortex' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cortex' of Deployment 'cortex' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'elasticsearch' of Deployment 'cortex' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cortex' of Deployment 'cortex' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'elasticsearch' of Deployment 'cortex' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cortex' of Deployment 'cortex' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'elasticsearch' of Deployment 'cortex' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cortex' of Deployment 'cortex' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'elasticsearch' of Deployment 'cortex' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cortex' of Deployment 'cortex' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'elasticsearch' of Deployment 'cortex' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cortex' of Deployment 'cortex' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'elasticsearch' of Deployment 'cortex' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'cortex' of Deployment 'cortex' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'cortex' of Deployment 'cortex' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cortex-deployment.yaml:11-54
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       io.kompose.service: cortex
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 │         kompose.cmd: kompose convert
  19 └         kompose.version: 1.33.0 (3ce457399)
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cortex-deployment.yaml:11-54
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       io.kompose.service: cortex
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 │         kompose.cmd: kompose convert
  19 └         kompose.version: 1.33.0 (3ce457399)
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cortex" of deployment "cortex" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "elasticsearch" of deployment "cortex" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cortex in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cortex-deployment.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.33.0 (3ce457399)
   7 │   labels:
   8 │     io.kompose.service: cortex
   9 └   name: cortex
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cortex in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cortex-deployment.yaml:34-49
────────────────────────────────────────
  34 ┌         - env:
  35 │             - name: discovery.type
  36 │               value: single-node
  37 │             - name: http.host
  38 │               value: 0.0.0.0
  39 │             - name: script.allowed_types
  40 │               value: inline
  41 │             - name: thread_pool.search.queue_size
  42 └               value: "100000"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cortex in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cortex in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cortex-deployment.yaml:24-54
────────────────────────────────────────
  24 ┌       containers:
  25 │         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 └               hostPort: 9001
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cortex in deployment cortex (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cortex-deployment.yaml:25-33
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: job_directory
  27 │           image: thehiveproject/cortex:3.1.1
  28 │           name: cortex
  29 │           ports:
  30 │             - containerPort: 9001
  31 │               hostIP: 0.0.0.0
  32 │               hostPort: 9001
  33 └               protocol: TCP
────────────────────────────────────────



cortex-service.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cortex-service.yaml:11-16
────────────────────────────────────────
  11 ┌   ports:
  12 │     - name: "9001"
  13 │       port: 9001
  14 │       targetPort: 9001
  15 │   selector:
  16 └     io.kompose.service: cortex
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cortex-service.yaml:11-16
────────────────────────────────────────
  11 ┌   ports:
  12 │     - name: "9001"
  13 │       port: 9001
  14 │       targetPort: 9001
  15 │   selector:
  16 └     io.kompose.service: cortex
────────────────────────────────────────



countdown-job.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Job 'countdown-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Job 'countdown-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'job' 'countdown-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Job 'countdown-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 countdown-job.yaml:7-25
────────────────────────────────────────
   7 ┌   completions: 10 # create a total of 10 pods
   8 │   parallelism: 4 # run multiple pods simultanously 
   9 │   backoffLimit: 3 # hard stop after 3 failure
  10 │   activeDeadlineSeconds: 100 # total time the whole job has to complete
  11 │   template:
  12 │     metadata:
  13 │       name: countdown-job
  14 │       labels:
  15 └         app: countdown-job
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 countdown-job.yaml:7-25
────────────────────────────────────────
   7 ┌   completions: 10 # create a total of 10 pods
   8 │   parallelism: 4 # run multiple pods simultanously 
   9 │   backoffLimit: 3 # hard stop after 3 failure
  10 │   activeDeadlineSeconds: 100 # total time the whole job has to complete
  11 │   template:
  12 │     metadata:
  13 │       name: countdown-job
  14 │       labels:
  15 └         app: countdown-job
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of job "countdown-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0110 (LOW): job countdown-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 countdown-job.yaml:4
────────────────────────────────────────
   4 [   name: countdown-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container countdown-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-job.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job countdown-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-job.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: counter
  20 │         image: centos:7        
  21 │         command:
  22 │          - "bin/bash"
  23 │          - "-c"
  24 │          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
  25 └       restartPolicy: OnFailure
────────────────────────────────────────



countdown-job1.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Job 'countdown-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Job 'countdown-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'job' 'countdown-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Job 'countdown-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 countdown-job1.yaml:7-28
────────────────────────────────────────
   7 ┌   completions: 10 # create a total of 10 pods
   8 │   parallelism: 4 # run multiple pods simultanously 
   9 │   backoffLimit: 3 # hard stop after 3 failure
  10 │   activeDeadlineSeconds: 100 # total time the whole job has to complete
  11 │   ttlSecondsAfterFinished: 240
  12 │   template:
  13 │     metadata:
  14 │       name: countdown-job
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 countdown-job1.yaml:7-28
────────────────────────────────────────
   7 ┌   completions: 10 # create a total of 10 pods
   8 │   parallelism: 4 # run multiple pods simultanously 
   9 │   backoffLimit: 3 # hard stop after 3 failure
  10 │   activeDeadlineSeconds: 100 # total time the whole job has to complete
  11 │   ttlSecondsAfterFinished: 240
  12 │   template:
  13 │     metadata:
  14 │       name: countdown-job
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of job "countdown-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0110 (LOW): job countdown-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 countdown-job1.yaml:4
────────────────────────────────────────
   4 [   name: countdown-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container countdown-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-job1.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job countdown-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-job1.yaml:19-28
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 │          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
  26 │       restartPolicy: OnFailure
  27 │       nodeSelector:
  28 └         kubernetes.io/os: linux   
────────────────────────────────────────



countdown-job2.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Job 'countdown-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Job 'countdown-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'job' 'countdown-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Job 'countdown-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter' of Job 'countdown-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Job 'countdown-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 countdown-job2.yaml:7-28
────────────────────────────────────────
   7 ┌   completions: 30 # create a total of 10 pods
   8 │   parallelism: 6 # run multiple pods simultanously 
   9 │   backoffLimit: 3 # hard stop after 3 failure
  10 │   activeDeadlineSeconds: 100 # total time the whole job has to complete
  11 │   ttlSecondsAfterFinished: 240
  12 │   template:
  13 │     metadata:
  14 │       name: countdown-job
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 countdown-job2.yaml:7-28
────────────────────────────────────────
   7 ┌   completions: 30 # create a total of 10 pods
   8 │   parallelism: 6 # run multiple pods simultanously 
   9 │   backoffLimit: 3 # hard stop after 3 failure
  10 │   activeDeadlineSeconds: 100 # total time the whole job has to complete
  11 │   ttlSecondsAfterFinished: 240
  12 │   template:
  13 │     metadata:
  14 │       name: countdown-job
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of job "countdown-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0110 (LOW): job countdown-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 countdown-job2.yaml:4
────────────────────────────────────────
   4 [   name: countdown-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container countdown-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-job2.yaml:20-25
────────────────────────────────────────
  20 ┌       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job countdown-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-job2.yaml:19-28
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: counter
  21 │         image: centos:7        
  22 │         command:
  23 │          - "bin/bash"
  24 │          - "-c"
  25 │          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i; sleep 2 ; done"
  26 │       restartPolicy: OnFailure
  27 │       nodeSelector:
  28 └         kubernetes.io/os: linux   
────────────────────────────────────────



countdown-jobs.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Job 'countdown' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Job 'countdown' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'job' 'countdown' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter' of Job 'countdown' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Job 'countdown' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Job 'countdown' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter' of Job 'countdown' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter' of Job 'countdown' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter' of Job 'countdown' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Job 'countdown' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Job 'countdown' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 countdown-jobs.yaml:6-17
────────────────────────────────────────
   6 ┌   template:
   7 │     metadata:
   8 │       name: countdown
   9 │     spec:
  10 │       containers:
  11 │       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 └          - "bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 countdown-jobs.yaml:6-17
────────────────────────────────────────
   6 ┌   template:
   7 │     metadata:
   8 │       name: countdown
   9 │     spec:
  10 │       containers:
  11 │       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 └          - "bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of job "countdown" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0110 (LOW): job countdown in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 countdown-jobs.yaml:4
────────────────────────────────────────
   4 [   name: countdown
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container countdown in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-jobs.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job countdown in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-jobs.yaml:10-17
────────────────────────────────────────
  10 ┌       containers:
  11 │       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 │          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
  17 └       restartPolicy: Never
────────────────────────────────────────



countdown-jobs1.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Job 'countdown' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Job 'countdown' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'job' 'countdown' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter' of Job 'countdown' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Job 'countdown' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Job 'countdown' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter' of Job 'countdown' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter' of Job 'countdown' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter' of Job 'countdown' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Job 'countdown' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Job 'countdown' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 countdown-jobs1.yaml:6-17
────────────────────────────────────────
   6 ┌   template:
   7 │     metadata:
   8 │       name: countdown
   9 │     spec:
  10 │       containers:
  11 │       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 └          - "bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 countdown-jobs1.yaml:6-17
────────────────────────────────────────
   6 ┌   template:
   7 │     metadata:
   8 │       name: countdown
   9 │     spec:
  10 │       containers:
  11 │       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 └          - "bin/bash"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of job "countdown" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0110 (LOW): job countdown in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 countdown-jobs1.yaml:4
────────────────────────────────────────
   4 [   name: countdown
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container countdown in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-jobs1.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 └          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job countdown in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-jobs1.yaml:10-17
────────────────────────────────────────
  10 ┌       containers:
  11 │       - name: counter
  12 │         image: centos:7
  13 │         command:
  14 │          - "bin/bash"
  15 │          - "-c"
  16 │          - "for i in 9 8 7 6 5 4 3 2 1 ; do echo $i ; done"
  17 └       restartPolicy: Never
────────────────────────────────────────



countdown-xfusion-job.yaml (kubernetes)
=======================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container-countdown-xfusion' of 'job' 'countdown-xfusion' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container-countdown-xfusion' of Job 'countdown-xfusion' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 countdown-xfusion-job.yaml:6-17
────────────────────────────────────────
   6 ┌   template:
   7 │     metadata:
   8 │       name: countdown-xfusion
   9 │     spec:
  10 │       containers:
  11 │       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 └         - /bin/sh
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 countdown-xfusion-job.yaml:6-17
────────────────────────────────────────
   6 ┌   template:
   7 │     metadata:
   8 │       name: countdown-xfusion
   9 │     spec:
  10 │       containers:
  11 │       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 └         - /bin/sh
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container-countdown-xfusion" of job "countdown-xfusion" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0110 (LOW): job countdown-xfusion in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 countdown-xfusion-job.yaml:4
────────────────────────────────────────
   4 [   name: countdown-xfusion
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container countdown-xfusion in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-xfusion-job.yaml:11-16
────────────────────────────────────────
  11 ┌       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 └         - sleep 5
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job countdown-xfusion in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countdown-xfusion-job.yaml:10-17
────────────────────────────────────────
  10 ┌       containers:
  11 │       - name: container-countdown-xfusion
  12 │         image: fedora:latest
  13 │         command:
  14 │         - /bin/sh
  15 │         - -c
  16 │         - sleep 5
  17 └       restartPolicy: Never
────────────────────────────────────────



counter-app-deployment.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-app-deployment.yaml:6-12
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   capacity:
   8 │     storage: 1Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 └     path: /mnt/flask-app
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-app-deployment.yaml:6-12
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   capacity:
   8 │     storage: 1Gi
   9 │   accessModes:
  10 │   - ReadWriteOnce
  11 │   hostPath:
  12 └     path: /mnt/flask-app
────────────────────────────────────────



counter-app-deployment_1.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-app-deployment_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-app-deployment_1.yaml:6-11
────────────────────────────────────────
   6 ┌   storageClassName: manual
   7 │   accessModes:
   8 │   - ReadWriteOnce
   9 │   resources:
  10 │     requests:
  11 └       storage: 1Gi
────────────────────────────────────────



counter-app-deployment_2.yaml (kubernetes)
==========================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'flask-app' of Deployment 'app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'flask-app' of Deployment 'app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'flask-app' of 'deployment' 'app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'flask-app' of Deployment 'app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'flask-app' of Deployment 'app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'flask-app' of Deployment 'app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'flask-app' of Deployment 'app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'flask-app' of Deployment 'app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'flask-app' of Deployment 'app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'flask-app' of Deployment 'app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'flask-app' of Deployment 'app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-app-deployment_2.yaml:9-31
────────────────────────────────────────
   9 ┌   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: flask
  13 │       env: dev
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: flask
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-app-deployment_2.yaml:9-31
────────────────────────────────────────
   9 ┌   replicas: 3
  10 │   selector:
  11 │     matchLabels:
  12 │       app: flask
  13 │       env: dev
  14 │   template:
  15 │     metadata:
  16 │       labels:
  17 └         app: flask
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "flask-app" of deployment "app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-app-deployment_2.yaml:4-7
────────────────────────────────────────
   4 ┌   name: app-deployment
   5 │   labels:
   6 │     app: flask
   7 └     env: dev
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-app-deployment_2.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: flask-pv-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: flask-app-claim
  24 │       containers:
  25 │       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 └         - containerPort: 5000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container flask-app in deployment app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 counter-app-deployment_2.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: flask-app
  26 │         image: burkanoves/k8s-app:0.3.1
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         volumeMounts:
  30 │         - mountPath: /data
  31 └           name: flask-pv-storage
────────────────────────────────────────



counter-app-deployment_3.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-app-deployment_3.yaml:6-14
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: flask
   9 │     env: dev
  10 │   ports:
  11 │   - name: http
  12 │     protocol: TCP
  13 │     port: 80
  14 └     targetPort: 5000
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-app-deployment_3.yaml:6-14
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     app: flask
   9 │     env: dev
  10 │   ports:
  11 │   - name: http
  12 │     protocol: TCP
  13 │     port: 80
  14 └     targetPort: 5000
────────────────────────────────────────



counter-deployment-test.yaml (kubernetes)
=========================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Deployment 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Deployment 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'deployment' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter' of Deployment 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Deployment 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'counter' of Deployment 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Deployment 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter' of Deployment 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter' of Deployment 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter' of Deployment 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Deployment 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Deployment 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-deployment-test.yaml:6-23
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: counter
   9 │       tier: app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: counter
  14 └         tier: app
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-deployment-test.yaml:6-23
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: counter
   9 │       tier: app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: counter
  14 └         tier: app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of deployment "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-deployment-test.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-deployment-test.yaml:16-23
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container counter in deployment counter (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 counter-deployment-test.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: counter
  18 │           image: ghcr.io/subicura/counter:latest
  19 │           env:
  20 │             - name: REDIS_HOST
  21 │               value: "redis"
  22 │             - name: REDIS_PORT
  23 └               value: "6379"
────────────────────────────────────────



counter-deployment.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter-container' of Deployment 'counter-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter-container' of Deployment 'counter-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter-container' of 'deployment' 'counter-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter-container' of Deployment 'counter-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter-container' of Deployment 'counter-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter-container' of Deployment 'counter-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter-container' of Deployment 'counter-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter-container' of Deployment 'counter-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter-container' of Deployment 'counter-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter-container' of Deployment 'counter-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter-container' of Deployment 'counter-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-deployment.yaml:6-32
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: counter
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: counter
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-deployment.yaml:6-32
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: counter
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: counter
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter-container" of deployment "counter-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment counter-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-deployment.yaml:4
────────────────────────────────────────
   4 [   name: counter-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment counter-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-deployment.yaml:15-32
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 └                   key: folder
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container counter-container in deployment counter-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 counter-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌         - name: counter-container
  17 │           image: ekaghnimukherjee/counter_trial_7:v9
  18 │           env: 
  19 │             - name: COUNT_FOLDER
  20 │               valueFrom : 
  21 │                 configMapKeyRef : 
  22 │                   name: counter-env
  23 │                   key: folder
  24 └           ports:
  ..   
────────────────────────────────────────



counter-err.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter-err' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter-err' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter-err' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter-err' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter-err' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-err.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-err.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter-err" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter-err in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-err.yaml:5-8
────────────────────────────────────────
   5 ┌   name: counter-err
   6 │   labels:
   7 │     app: counter-err
   8 └     version: v1.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter-err in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-err.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter-err in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-err.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter-err1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter-err' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter-err' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter-err' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter-err' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter-err' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-err1.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-err1.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter-err" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter-err in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-err1.yaml:5-8
────────────────────────────────────────
   5 ┌   name: counter-err
   6 │   labels:
   7 │     app: counter-err
   8 └     version: v1.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter-err in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-err1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter-err in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-err1.yaml:10-14
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: count
  12 │     image: busybox
  13 │     args: [/bin/sh, -c,
  14 └             'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter-err2.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter-err' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter-err' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter-err' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter-err' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter-err' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter-err' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter-err' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-err2.yaml:10-17
────────────────────────────────────────
  10 ┌   containers:
  11 │     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-err2.yaml:10-17
────────────────────────────────────────
  10 ┌   containers:
  11 │     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter-err" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter-err in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-err2.yaml:5-8
────────────────────────────────────────
   5 ┌   name: counter-err
   6 │   labels:
   7 │     app: counter-err
   8 └     version: v1.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter-err in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-err2.yaml:11-17
────────────────────────────────────────
  11 ┌     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter-err in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-err2.yaml:10-17
────────────────────────────────────────
  10 ┌   containers:
  11 │     - name: count
  12 │       image: busybox
  13 │       args:
  14 │         [
  15 │           /bin/sh,
  16 │           -c,
  17 └           'i=0; RANDOM=$$; while true; do R=$(($RANDOM%100)); echo "loop:$i  value:$R"; if [ $R -gt 80 ]; then echo "Warning:$R too high" 1>&2; fi; i=$((i+1)); sleep 1; done',
────────────────────────────────────────



counter-incrementer-deployment.yaml (kubernetes)
================================================
Tests: 117 (SUCCESSES: 95, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 13, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'flask-app' of Deployment 'flask-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'flask-app' of Deployment 'flask-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'flask-app' of 'deployment' 'flask-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'flask-app' of Deployment 'flask-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'flask-app' of Deployment 'flask-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'flask-app' of Deployment 'flask-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'flask-app' of Deployment 'flask-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'flask-app' of Deployment 'flask-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'flask-app' of Deployment 'flask-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'flask-app' of Deployment 'flask-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'flask-app' of Deployment 'flask-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'flask-app' of Deployment 'flask-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-incrementer-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: flask-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: flask-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-incrementer-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: flask-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: flask-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "flask-app" of deployment "flask-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment flask-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-incrementer-deployment.yaml:4
────────────────────────────────────────
   4 [   name: flask-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment flask-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container flask-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment flask-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-incrementer-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container flask-app in deployment flask-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 counter-incrementer-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: flask-app
  17 │           image: razyal/twitter_insight:latest
  18 │           ports:
  19 └             - containerPort: 80
────────────────────────────────────────



counter-incrementer-service.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-incrementer-service.yaml:6-11
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   ports:
   8 │     - port: 80
   9 │       targetPort: 80
  10 │   selector:
  11 └     app: flask-app
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-incrementer-service.yaml:6-11
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   ports:
   8 │     - port: 80
   9 │       targetPort: 80
  10 │   selector:
  11 └     app: flask-app
────────────────────────────────────────



counter-pod.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-pod.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-pod.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-pod.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-pod.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-pod.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter-pod1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-pod1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-pod1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-pod1.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-pod1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-pod1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter-pod2.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-pod2.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-pod2.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter-pod2.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-pod2.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter-pod2.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "This is demo log $i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter-service.yaml (kubernetes)
=================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: counter
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 │       targetPort: 8080
  12 └   type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: counter
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 │       targetPort: 8080
  12 └   type: NodePort
────────────────────────────────────────



counter.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter1.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter1.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter2.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter2.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter2.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter2.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter2.yaml:7-13
────────────────────────────────────────
   7 ┌     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter2.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: count
   8 │       image: busybox
   9 │       args:
  10 │         [
  11 │           /bin/sh,
  12 │           -c,
  13 └           'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done',
────────────────────────────────────────



counter3.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter3.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter3.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter3.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter3.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter3.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter4.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter4.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter4.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter4.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter4.yaml:7-9
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter4.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 └     args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counter5.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'count' of Pod 'counter' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'count' of 'pod' 'counter' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'count' of Pod 'counter' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'count' of Pod 'counter' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'count' of Pod 'counter' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'count' of Pod 'counter' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'count' of Pod 'counter' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'count' of Pod 'counter' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counter5.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counter5.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "count" of pod "counter" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod counter in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counter5.yaml:4
────────────────────────────────────────
   4 [   name: counter
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counter in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter5.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod counter in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counter5.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: count
   8 │     image: busybox
   9 │     args: [/bin/sh, -c,
  10 └             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
────────────────────────────────────────



counting-service.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counting-service.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: counting
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 80
  12 └       targetPort: 3000
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counting-service.yaml:6-12
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: counting
   9 │   ports:
  10 │     - protocol: TCP
  11 │       port: 80
  12 └       targetPort: 3000
────────────────────────────────────────



counting.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counting' of Deployment 'counting' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counting' of Deployment 'counting' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counting' of 'deployment' 'counting' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counting' of Deployment 'counting' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counting' of Deployment 'counting' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'counting' of Deployment 'counting' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counting' of Deployment 'counting' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counting' of Deployment 'counting' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counting' of Deployment 'counting' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counting' of Deployment 'counting' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counting' of Deployment 'counting' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counting' of Deployment 'counting' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 counting.yaml:6-25
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: counting
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: counting
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 counting.yaml:6-25
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: counting
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: counting
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counting" of deployment "counting" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment counting in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 counting.yaml:4
────────────────────────────────────────
   4 [   name: counting
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container counting in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counting.yaml:16-25
────────────────────────────────────────
  16 ┌         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 │               valueFrom:
  24 │                 fieldRef:
  25 └                   fieldPath: metadata.name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment counting in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 counting.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: counting
  17 │           image: counting
  18 │           imagePullPolicy: Never
  19 │           ports:
  20 │             - containerPort: 3000
  21 │           env:
  22 │             - name: POD_NAME
  23 └               valueFrom:
  ..   
────────────────────────────────────────



countnumberjob.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'countnumber' of Job 'countnumberjob' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'countnumber' of Job 'countnumberjob' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'countnumber' of 'job' 'countnumberjob' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'countnumber' of Job 'countnumberjob' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'countnumber' of Job 'countnumberjob' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'countnumber' of Job 'countnumberjob' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'countnumber' of Job 'countnumberjob' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'countnumber' of Job 'countnumberjob' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'countnumber' of Job 'countnumberjob' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'countnumber' of Job 'countnumberjob' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'countnumber' of Job 'countnumberjob' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'countnumber' of Job 'countnumberjob' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 countnumberjob.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     metadata:
   9 │       name: countnumber
  10 │     spec:
  11 │       containers:
  12 │       - name: countnumber
  13 │         image: busybox
  14 │         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
  15 └       restartPolicy: OnFailure
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 countnumberjob.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     metadata:
   9 │       name: countnumber
  10 │     spec:
  11 │       containers:
  12 │       - name: countnumber
  13 │         image: busybox
  14 │         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
  15 └       restartPolicy: OnFailure
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "countnumber" of job "countnumberjob" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0110 (LOW): job countnumberjob in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 countnumberjob.yaml:5
────────────────────────────────────────
   5 [   name: countnumberjob
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container countnumberjob in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countnumberjob.yaml:12-14
────────────────────────────────────────
  12 ┌       - name: countnumber
  13 │         image: busybox
  14 └         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job countnumberjob in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 countnumberjob.yaml:11-15
────────────────────────────────────────
  11 ┌       containers:
  12 │       - name: countnumber
  13 │         image: busybox
  14 │         command: ['sh', '-c', 'for i in {1,2,3,4,5,6,7,8,9}; do echo $i; sleep 5; done']
  15 └       restartPolicy: OnFailure
────────────────────────────────────────



courierwebapp-depl.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'courierwebapp' of 'deployment' 'courierwebapp-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'courierwebapp' of Deployment 'courierwebapp-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 courierwebapp-depl.yaml:6-24
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: courierwebapp
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: courierwebapp
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 courierwebapp-depl.yaml:6-24
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: courierwebapp
   9 │   replicas: 1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: courierwebapp
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "courierwebapp" of deployment "courierwebapp-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment courierwebapp-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 courierwebapp-depl.yaml:4
────────────────────────────────────────
   4 [   name: courierwebapp-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container courierwebapp-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment courierwebapp-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 courierwebapp-depl.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container courierwebapp in deployment courierwebapp-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 courierwebapp-depl.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: courierwebapp
  17 │         image: karthickselvamdev/courierwebapp:latest
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             memory: 128Mi
  22 │             cpu: 500m
  23 │         ports:
  24 └         - containerPort: 4200
────────────────────────────────────────



courierwebapp-depl_1.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 courierwebapp-depl_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: courierwebapp
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 4200
  11 └     targetPort: 4200
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 courierwebapp-depl_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: courierwebapp
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 4200
  11 └     targetPort: 4200
────────────────────────────────────────



course-management-service-deployment.yaml (kubernetes)
======================================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'course-management-service' of Deployment 'course-management-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'course-management-service' of Deployment 'course-management-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'course-management-service' of 'deployment' 'course-management-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'course-management-service' of Deployment 'course-management-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'course-management-service' of Deployment 'course-management-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'course-management-service' of Deployment 'course-management-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'course-management-service' of Deployment 'course-management-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'course-management-service' of Deployment 'course-management-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'course-management-service' of Deployment 'course-management-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'course-management-service' of Deployment 'course-management-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'course-management-service' of Deployment 'course-management-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'course-management-service' of Deployment 'course-management-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course-management-service-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: course-management-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: course-management-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course-management-service-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: course-management-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: course-management-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "course-management-service" of deployment "course-management-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment course-management-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 course-management-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: course-management-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container course-management-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment course-management-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course-management-service-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container course-management-service in deployment course-management-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 course-management-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-management-service
  17 │         image: manulagunatilleke/ds-microservices-project-course-management-service:latest
  18 │         ports:
  19 └         - containerPort: 3002
────────────────────────────────────────



course-management-service.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course-management-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-management-service
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3002
  11 │     targetPort: 3002
  12 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course-management-service.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-management-service
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 3002
  11 │     targetPort: 3002
  12 └   type: ClusterIP
────────────────────────────────────────



course-service-deployment.yaml (kubernetes)
===========================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'course-service' of Deployment 'course-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'course-service' of Deployment 'course-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'course-service' of 'deployment' 'course-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'course-service' of Deployment 'course-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'course-service' of Deployment 'course-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'course-service' of Deployment 'course-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'course-service' of Deployment 'course-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'course-service' of Deployment 'course-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'course-service' of Deployment 'course-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'course-service' of Deployment 'course-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'course-service' of Deployment 'course-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'course-service' of Deployment 'course-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course-service-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: course-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: course-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course-service-deployment.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: course-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: course-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "course-service" of deployment "course-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment course-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 course-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: course-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container course-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment course-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course-service-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container course-service in deployment course-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 course-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: course-service
  17 │         image: sanjananilanka/course-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────



course-service-service.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course-service-service.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 82
  11 └       targetPort: 5000
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course-service-service.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 82
  11 └       targetPort: 5000
────────────────────────────────────────



course.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'course-service' of Deployment 'zakaa-course-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'course-service' of 'deployment' 'zakaa-course-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'course-service' of Deployment 'zakaa-course-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'course-service' of Deployment 'zakaa-course-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course.yaml:8-22
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: course-service
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: course-service
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course.yaml:8-22
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: course-service
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: course-service
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "course-service" of deployment "zakaa-course-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment zakaa-course-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 course.yaml:4-6
────────────────────────────────────────
   4 ┌   name: zakaa-course-deployment
   5 │   labels:
   6 └     name:  course-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zakaa-course-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment zakaa-course-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container course-service in deployment zakaa-course-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 course.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: nabeelncz/zakaa-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────



course1.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │   - name:  course-service
  10 │     protocol: TCP
  11 │     port:  3004
  12 └     targetPort: 3004
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │   - name:  course-service
  10 │     protocol: TCP
  11 │     port:  3004
  12 └     targetPort: 3004
────────────────────────────────────────



course2.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'course-service' of Deployment 'learnwise-course-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'course-service' of 'deployment' 'learnwise-course-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'course-service' of Deployment 'learnwise-course-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'course-service' of Deployment 'learnwise-course-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course2.yaml:8-22
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: course-service
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: course-service
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course2.yaml:8-22
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: course-service
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: course-service
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "course-service" of deployment "learnwise-course-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment learnwise-course-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 course2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: learnwise-course-deployment
   5 │   labels:
   6 └     name:  course-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container learnwise-course-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment learnwise-course-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course2.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container course-service in deployment learnwise-course-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 course2.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: rithickramanthali/learnwise-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────



course3.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course3.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │   - name:  course-service
  10 │     protocol: TCP
  11 │     port:  4004
  12 └     targetPort: 4004
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course3.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │   - name:  course-service
  10 │     protocol: TCP
  11 │     port:  4004
  12 └     targetPort: 4004
────────────────────────────────────────



course4.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'eduverse-course-service' of 'deployment' 'eduverse-course-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'eduverse-course-service' of Deployment 'eduverse-course-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course4.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: eduverse-course-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: eduverse-course-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course4.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: eduverse-course-service
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: eduverse-course-service
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "eduverse-course-service" of deployment "eduverse-course-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment eduverse-course-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 course4.yaml:4
────────────────────────────────────────
   4 [   name: eduverse-course-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container eduverse-course-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment eduverse-course-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course4.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container eduverse-course-service in deployment eduverse-course-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 course4.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nahyan007/eduverse-course:latest
  17 │         name: eduverse-course-service
  18 │         envFrom:
  19 │         - configMapRef:
  20 └             name: course-config
────────────────────────────────────────



course4_1.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course4_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: eduverse-course-service
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 7001
  11 └     targetPort: 7001
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course4_1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: eduverse-course-service
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 7001
  11 └     targetPort: 7001
────────────────────────────────────────



course5.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'course-service' of Deployment 'etutor-course-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'course-service' of 'deployment' 'etutor-course-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'course-service' of Deployment 'etutor-course-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'course-service' of Deployment 'etutor-course-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course5.yaml:8-22
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: course-service
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: course-service
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course5.yaml:8-22
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: course-service
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: course-service
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "course-service" of deployment "etutor-course-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment etutor-course-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 course5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: etutor-course-deployment
   5 │   labels:
   6 └     name:  course-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container etutor-course-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment etutor-course-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 course5.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container course-service in deployment etutor-course-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 course5.yaml:18-22
────────────────────────────────────────
  18 ┌       - image: muhammedt1207/etutor-course:latest
  19 │         name: course-service
  20 │         envFrom:
  21 │           - configMapRef:
  22 └               name: course-service-config
────────────────────────────────────────



course6.yaml (kubernetes)
=========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course6.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │   - name:  course-service
  10 │     protocol: TCP
  11 │     port:  8085
  12 └     targetPort: 8085
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course6.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: course-service
   8 │   ports:
   9 │   - name:  course-service
  10 │     protocol: TCP
  11 │     port:  8085
  12 └     targetPort: 8085
────────────────────────────────────────



course_service.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 course_service.yaml:6-9
────────────────────────────────────────
   6 ┌   clusterIP: None
   7 │   selector:
   8 │     app: jupyterhub
   9 └     component: hub
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 course_service.yaml:6-9
────────────────────────────────────────
   6 ┌   clusterIP: None
   7 │   selector:
   8 │     app: jupyterhub
   9 └     component: hub
────────────────────────────────────────



coursemanagement-service-claim0-persistentvolumeclaim.yaml (kubernetes)
=======================================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursemanagement-service-claim0-persistentvolumeclaim.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 100Mi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursemanagement-service-claim0-persistentvolumeclaim.yaml:9-13
────────────────────────────────────────
   9 ┌   accessModes:
  10 │     - ReadWriteOnce
  11 │   resources:
  12 │     requests:
  13 └       storage: 100Mi
────────────────────────────────────────



coursemanagement-service-deployment.yaml (kubernetes)
=====================================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'courses' of Deployment 'coursemanagement-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'courses' of Deployment 'coursemanagement-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'courses' of 'deployment' 'coursemanagement-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'courses' of Deployment 'coursemanagement-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'courses' of Deployment 'coursemanagement-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'courses' of Deployment 'coursemanagement-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'courses' of Deployment 'coursemanagement-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'courses' of Deployment 'coursemanagement-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'courses' of Deployment 'coursemanagement-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'courses' of Deployment 'coursemanagement-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'courses' of Deployment 'coursemanagement-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'courses' of Deployment 'coursemanagement-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'courses' of Deployment 'coursemanagement-service' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:12-46
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: coursemanagement-service
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:12-46
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: coursemanagement-service
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "courses" of deployment "coursemanagement-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coursemanagement-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\Users\nadun\AppData\Local\Microsoft\WinGet\Links\kompose.exe convert
   6 │     kompose.version: 1.31.2 (a92241f79)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: coursemanagement-service
  10 └   name: coursemanagement-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coursemanagement-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:29-41
────────────────────────────────────────
  29 ┌         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 │               hostPort: 3002
  37 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coursemanagement-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursemanagement-service-deployment.yaml:28-46
────────────────────────────────────────
  28 ┌       containers:
  29 │         - env:
  30 │             - name: DB
  31 │               value: mongodb+srv://admin:admin@lms.mqm8lgp.mongodb.net/coursemanagement-service?retryWrites=true&w=majority&appName=LMS
  32 │           image: coursemanagement-service
  33 │           name: courses
  34 │           ports:
  35 │             - containerPort: 3002
  36 └               hostPort: 3002
  ..   
────────────────────────────────────────



coursemanagement-service-service.yaml (kubernetes)
==================================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursemanagement-service-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     - name: "3002"
  14 │       port: 3002
  15 │       targetPort: 3002
  16 │   selector:
  17 └     io.kompose.service: coursemanagement-service
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursemanagement-service-service.yaml:12-17
────────────────────────────────────────
  12 ┌   ports:
  13 │     - name: "3002"
  14 │       port: 3002
  15 │       targetPort: 3002
  16 │   selector:
  17 └     io.kompose.service: coursemanagement-service
────────────────────────────────────────



coursework4.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursework4.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: managed-csi
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursework4.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: managed-csi
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────



coursework4_1.yaml (kubernetes)
===============================
Tests: 131 (SUCCESSES: 100, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 18, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aki-detection' of 'deployment' 'aki-detection' in 'devesa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'copy-hospital-history' of 'deployment' 'aki-detection' in 'devesa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursework4_1.yaml:7-55
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: aki-detection
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: aki-detection
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursework4_1.yaml:7-55
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: aki-detection
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: aki-detection
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aki-detection" of deployment "aki-detection" in "devesa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "copy-hospital-history" of deployment "aki-detection" in "devesa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aki-detection in devesa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework4_1.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 │         env:
  25 └         - name: MLLP_ADDRESS
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aki-detection in devesa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework4_1.yaml:40-48
────────────────────────────────────────
  40 ┌       - name: copy-hospital-history
  41 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  42 │         volumeMounts:
  43 │         - mountPath: /hospital-history
  44 │           name: hospital-history
  45 │         resources:
  46 │           requests:
  47 │             memory: 1Gi
  48 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aki-detection in devesa namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework4_1.yaml:16-55
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework4-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/data/history.csv
  24 └         env:
  ..   
────────────────────────────────────────



coursework5.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursework5.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: managed-csi
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursework5.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: managed-csi
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────



coursework5_1.yaml (kubernetes)
===============================
Tests: 131 (SUCCESSES: 100, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 18, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aki-detection' of 'deployment' 'aki-detection' in 'devesa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'copy-hospital-history' of 'deployment' 'aki-detection' in 'devesa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursework5_1.yaml:7-60
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: aki-detection
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: aki-detection
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursework5_1.yaml:7-60
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: aki-detection
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: aki-detection
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aki-detection" of deployment "aki-detection" in "devesa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "copy-hospital-history" of deployment "aki-detection" in "devesa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aki-detection in devesa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework5_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aki-detection in devesa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework5_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework5-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aki-detection in devesa namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework5_1.yaml:16-60
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework5-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 └         - --db_path=/state/my_database.db
  ..   
────────────────────────────────────────



coursework6.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursework6.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: managed-csi
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursework6.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │   - ReadWriteOnce
   9 │   storageClassName: managed-csi
  10 │   resources:
  11 │     requests:
  12 └       storage: 1Gi
────────────────────────────────────────



coursework6_1.yaml (kubernetes)
===============================
Tests: 131 (SUCCESSES: 100, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 18, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aki-detection' of 'deployment' 'aki-detection' in 'devesa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'copy-hospital-history' of 'deployment' 'aki-detection' in 'devesa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'aki-detection' of Deployment 'aki-detection' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'copy-hospital-history' of Deployment 'aki-detection' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aki-detection' of Deployment 'aki-detection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copy-hospital-history' of Deployment 'aki-detection' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coursework6_1.yaml:7-60
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: aki-detection
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: aki-detection
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coursework6_1.yaml:7-60
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: aki-detection
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: aki-detection
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aki-detection" of deployment "aki-detection" in "devesa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "copy-hospital-history" of deployment "aki-detection" in "devesa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aki-detection in devesa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework6_1.yaml:17-43
────────────────────────────────────────
  17 ┌       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 │         - --db_path=/state/my_database.db
  25 └         - --metrics_path=/state/counter_state.json
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aki-detection in devesa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework6_1.yaml:45-53
────────────────────────────────────────
  45 ┌       - name: copy-hospital-history
  46 │         image: imperialswemlsspring2024.azurecr.io/coursework6-history
  47 │         volumeMounts:
  48 │         - mountPath: /hospital-history
  49 │           name: hospital-history
  50 │         resources:
  51 │           requests:
  52 │             memory: 1Gi
  53 └             cpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aki-detection in devesa namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coursework6_1.yaml:16-60
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: aki-detection
  18 │         image: imperialswemlsspring2024.azurecr.io/coursework6-devesa
  19 │         command:
  20 │         - python3
  21 │         args:
  22 │         - prediction_system.py
  23 │         - --pathname=/hospital-history/history.csv
  24 └         - --db_path=/state/my_database.db
  ..   
────────────────────────────────────────



cow-deploy.yaml (kubernetes)
============================
Tests: 132 (SUCCESSES: 95, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 23, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'cowsay-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'cowsay-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cowsay' of 'deployment' 'cowsay-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'cowsay-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'cowsay-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'cowsay-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'cowsay-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'cowsay-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'cowsay-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'cowsay-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'cowsay-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'cowsay-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'cowsay-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cow-deploy.yaml:8-32
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cowsay-hw
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cowsay-hw
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cow-deploy.yaml:8-32
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cowsay-hw
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cowsay-hw
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cowsay" of deployment "cowsay-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "cowsay-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cowsay-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cow-deploy.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cowsay-deployment
   5 │   labels:
   6 └     app: cowsay-hw
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment cowsay-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cowsay-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cowsay-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cow-deploy.yaml:21-27
────────────────────────────────────────
  21 ┌       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 │         volumeMounts:
  26 │         - name: shared-data
  27 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cowsay-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cow-deploy.yaml:17-32
────────────────────────────────────────
  17 ┌       volumes:
  18 │       - name: shared-data
  19 │         emptyDir: {}
  20 │       containers:
  21 │       - name: nginx
  22 │         image: nginx:latest
  23 │         ports:
  24 │         - containerPort: 80
  25 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cowsay in deployment cowsay-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cow-deploy.yaml:28-32
────────────────────────────────────────
  28 ┌       - name: cowsay
  29 │         image: hsnlabhu/hw2:cowsay
  30 │         volumeMounts:
  31 │         - name: shared-data
  32 └           mountPath: /root/html
────────────────────────────────────────



cow-deploy1.yaml (kubernetes)
=============================
Tests: 132 (SUCCESSES: 95, FAILURES: 37)
Failures: 37 (UNKNOWN: 0, LOW: 23, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'cowsay-deployment1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cowsay' of 'deployment' 'cowsay-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'cowsay-deployment1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'cowsay-deployment1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cowsay' of Deployment 'cowsay-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'cowsay-deployment1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cow-deploy1.yaml:8-33
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cowsay-hw
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cowsay-hw
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cow-deploy1.yaml:8-33
────────────────────────────────────────
   8 ┌   selector:
   9 │     matchLabels:
  10 │       app: cowsay-hw
  11 │   replicas: 1
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: cowsay-hw
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cowsay" of deployment "cowsay-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "cowsay-deployment1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cowsay-deployment1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cow-deploy1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cowsay-deployment1
   5 │   labels:
   6 └     app: cowsay-hw
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment cowsay-deployment1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cowsay-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cowsay-deployment1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cow-deploy1.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - name: shared-data
  28 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cowsay-deployment1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cow-deploy1.yaml:17-33
────────────────────────────────────────
  17 ┌       volumes:
  18 │       - name: shared-data
  19 │         persistentVolumeClaim:
  20 │           claimName: mypvclaim1
  21 │       containers:
  22 │       - name: nginx
  23 │         image: nginx:latest
  24 │         ports:
  25 └         - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cowsay in deployment cowsay-deployment1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cow-deploy1.yaml:29-33
────────────────────────────────────────
  29 ┌       - name: cowsay
  30 │         image: hsnlabhu/hw2:cowsay
  31 │         volumeMounts:
  32 │         - name: shared-data
  33 └           mountPath: /root/html
────────────────────────────────────────



cow-service.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cow-service.yaml:6-11
────────────────────────────────────────
   6 ┌    selector:
   7 │       app: cowsay-hw
   8 │    ports:
   9 │    - protocol: TCP
  10 │      port: 80
  11 └    type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cow-service.yaml:6-11
────────────────────────────────────────
   6 ┌    selector:
   7 │       app: cowsay-hw
   8 │    ports:
   9 │    - protocol: TCP
  10 │      port: 80
  11 └    type: NodePort
────────────────────────────────────────



cow-service1.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cow-service1.yaml:6-11
────────────────────────────────────────
   6 ┌    selector:
   7 │       app: cowsay-hw
   8 │    ports:
   9 │    - protocol: TCP
  10 │      port: 80
  11 └    type: NodePort
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cow-service1.yaml:6-11
────────────────────────────────────────
   6 ┌    selector:
   7 │       app: cowsay-hw
   8 │    ports:
   9 │    - protocol: TCP
  10 │      port: 80
  11 └    type: NodePort
────────────────────────────────────────



coworking-api.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking-api.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app.kubernetes.io/name: coworking-api
   8 │   ports:
   9 │   - name: '5153'
  10 │     protocol: TCP
  11 │     port: 5153
  12 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking-api.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app.kubernetes.io/name: coworking-api
   8 │   ports:
   9 │   - name: '5153'
  10 │     protocol: TCP
  11 │     port: 5153
  12 └     targetPort: 5153
────────────────────────────────────────



coworking-api_1.yaml (kubernetes)
=================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking-api' of Deployment 'coworking-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking-api' of Deployment 'coworking-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking-api' of 'deployment' 'coworking-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking-api' of Deployment 'coworking-api' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking-api' of Deployment 'coworking-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking-api' of Deployment 'coworking-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking-api' of Deployment 'coworking-api' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking-api' of Deployment 'coworking-api' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking-api' of Deployment 'coworking-api' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking-api' of Deployment 'coworking-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking-api' of Deployment 'coworking-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking-api_1.yaml:8-59
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking-api
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking-api
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking-api_1.yaml:8-59
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking-api
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking-api
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking-api" of deployment "coworking-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking-api_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking-api
   5 │   labels:
   6 └     name: coworking-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking-api_1.yaml:18-58
────────────────────────────────────────
  18 ┌       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking-api_1.yaml:17-59
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking-api
  19 │         image: 985294037487.dkr.ecr.us-east-1.amazonaws.com/coworking-app:0.0.1
  20 │         imagePullPolicy: Always
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking1.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking1.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking10.yaml (kubernetes)
=============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking10.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking10.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking10_1.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking10_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking10_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking10_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking10_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking10_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking1_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking1_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking1_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking1_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking1_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking2.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking2.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking2_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coworking' of Deployment 'coworking' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking2_1.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking2_1.yaml:8-44
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking2_1.yaml:20-43
────────────────────────────────────────
  20 ┌       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 │             path: /health_check
  26 │             port: 5153
  27 │           initialDelaySeconds: 5
  28 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking2_1.yaml:17-44
────────────────────────────────────────
  17 ┌       imagePullSecrets:
  18 │       - name: regcred
  19 │       containers:
  20 │       - name: coworking
  21 │         image: 055656678958.dkr.ecr.us-east-1.amazonaws.com/coworking:latest
  22 │         imagePullPolicy: IfNotPresent
  23 │         livenessProbe:
  24 │           httpGet:
  25 └             path: /health_check
  ..   
────────────────────────────────────────



coworking3.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking3.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking3.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking3_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking3_1.yaml:8-47
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking3_1.yaml:8-47
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking3_1.yaml:18-46
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking3_1.yaml:17-47
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: 085018986241.dkr.ecr.us-east-1.amazonaws.com/udacity-cd12355-ecr-repo:8
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking4.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking4.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking4.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking4_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking4_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking4_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking4_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking4_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking4_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking5.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking5.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking5.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking5_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking5_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking5_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking5_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking5_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking5_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: 995346277474.dkr.ecr.us-east-1.amazonaws.com/coworking:4
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking6.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking6.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking6.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking6_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking6_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking6_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking6_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking6_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking6_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking7.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking7.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking7.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking7_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking7_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking7_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking7_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking7_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking7_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: 448474411863.dkr.ecr.us-east-1.amazonaws.com/coworking-analytics:2
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking8.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking8.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking8.yaml:6-13
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking8_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking8_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking8_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking8_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking8_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking8_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: <DOCKER_IMAGE_NAME>:<IMAGE_TAG>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking9.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking9.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking9.yaml:6-13
────────────────────────────────────────
   6 ┌   type: LoadBalancer
   7 │   selector:
   8 │     service: coworking
   9 │   ports:
  10 │   - name: '5153'
  11 │     protocol: TCP
  12 │     port: 5153
  13 └     targetPort: 5153
────────────────────────────────────────



coworking9_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking9_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking9_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking9_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking9_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking9_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: 741692117543.dkr.ecr.us-east-1.amazonaws.com/coworking:9
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



coworking_1.yaml (kubernetes)
=============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coworking' of Deployment 'coworking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coworking' of 'deployment' 'coworking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'coworking' of Deployment 'coworking' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coworking' of Deployment 'coworking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coworking' of Deployment 'coworking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coworking' of Deployment 'coworking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 coworking_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 coworking_1.yaml:8-42
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       service: coworking
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         service: coworking
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coworking" of deployment "coworking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment coworking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 coworking_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: coworking
   5 │   labels:
   6 └     name: coworking
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coworking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking_1.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 │           initialDelaySeconds: 5
  26 └           timeoutSeconds: 2
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coworking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 coworking_1.yaml:17-42
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coworking
  19 │         image: <DOCKER_IMAGE_URI_FROM_ECR>
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             path: /health_check
  24 │             port: 5153
  25 └           initialDelaySeconds: 5
  ..   
────────────────────────────────────────



cowsay-service.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cowsay-service.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 8080
   8 │     protocol: TCP
   9 │     targetPort: 8080
  10 │   selector:
  11 │     kubevirt.io/domain: cowsay-service
  12 └   type: ClusterIP
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cowsay-service.yaml:6-12
────────────────────────────────────────
   6 ┌   ports:
   7 │   - port: 8080
   8 │     protocol: TCP
   9 │     targetPort: 8080
  10 │   selector:
  11 │     kubevirt.io/domain: cowsay-service
  12 └   type: ClusterIP
────────────────────────────────────────



cowsay.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cow-say' of CronJob 'cow-say-cronjob' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cow-say' of 'cronjob' 'cow-say-cronjob' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cow-say' of CronJob 'cow-say-cronjob' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cow-say' of CronJob 'cow-say-cronjob' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cowsay.yaml:6-16
────────────────────────────────────────
   6 ┌   schedule: "* * * * *"
   7 │   successfulJobsHistoryLimit: 5
   8 │   failedJobsHistoryLimit: 0
   9 │   jobTemplate:
  10 │     spec:
  11 │       template:
  12 │         spec:
  13 │           containers:
  14 └           - name: cow-say
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cowsay.yaml:6-16
────────────────────────────────────────
   6 ┌   schedule: "* * * * *"
   7 │   successfulJobsHistoryLimit: 5
   8 │   failedJobsHistoryLimit: 0
   9 │   jobTemplate:
  10 │     spec:
  11 │       template:
  12 │         spec:
  13 │           containers:
  14 └           - name: cow-say
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cow-say" of cronjob "cow-say-cronjob" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob cow-say-cronjob in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cowsay.yaml:4
────────────────────────────────────────
   4 [   name: cow-say-cronjob
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cow-say-cronjob in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob cow-say-cronjob in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cowsay.yaml:13-16
────────────────────────────────────────
  13 ┌           containers:
  14 │           - name: cow-say
  15 │             image: rancher/cowsay:latest
  16 └           restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cow-say in cronjob cow-say-cronjob (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cowsay.yaml:14-15
────────────────────────────────────────
  14 ┌           - name: cow-say
  15 └             image: rancher/cowsay:latest
────────────────────────────────────────



cowsay1.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cow-say' of Job 'cow-say-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cow-say' of Job 'cow-say-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cow-say' of 'job' 'cow-say-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cow-say' of Job 'cow-say-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cow-say' of Job 'cow-say-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cow-say' of Job 'cow-say-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cow-say' of Job 'cow-say-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cow-say' of Job 'cow-say-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cow-say' of Job 'cow-say-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cow-say' of Job 'cow-say-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cow-say' of Job 'cow-say-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cow-say' of Job 'cow-say-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cowsay1.yaml:6-11
────────────────────────────────────────
   6 ┌   template:
   7 │     spec:
   8 │       containers:
   9 │       - name: cow-say
  10 │         image: rancher/cowsay:latest
  11 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cowsay1.yaml:6-11
────────────────────────────────────────
   6 ┌   template:
   7 │     spec:
   8 │       containers:
   9 │       - name: cow-say
  10 │         image: rancher/cowsay:latest
  11 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cow-say" of job "cow-say-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): job cow-say-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cowsay1.yaml:4
────────────────────────────────────────
   4 [   name: cow-say-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cow-say-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job cow-say-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cowsay1.yaml:8-11
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: cow-say
  10 │         image: rancher/cowsay:latest
  11 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cow-say in job cow-say-job (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cowsay1.yaml:9-10
────────────────────────────────────────
   9 ┌       - name: cow-say
  10 └         image: rancher/cowsay:latest
────────────────────────────────────────



cpu-config_1.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'echo-server' of Deployment 'echo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'echo-server' of Deployment 'echo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'echo-server' of 'deployment' 'echo-server' in 'echo-server' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'echo-server' of Deployment 'echo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'echo-server' of Deployment 'echo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'echo-server' of Deployment 'echo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'echo-server' of Deployment 'echo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-config_1.yaml:7-52
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: echo-server
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: echo-server
  15 └         csa.expediagroup.com/enabled: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-config_1.yaml:7-52
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: echo-server
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: echo-server
  15 └         csa.expediagroup.com/enabled: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "echo-server" of deployment "echo-server" in "echo-server" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment echo-server in echo-server namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container echo-server in echo-server namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment echo-server in echo-server namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-config_1.yaml:25-52
────────────────────────────────────────
  25 ┌       containers:
  26 │       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 └           restartPolicy: NotRequired
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container echo-server in deployment echo-server (namespace: echo-server) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cpu-config_1.yaml:26-52
────────────────────────────────────────
  26 ┌       - image: ealen/echo-server:0.7.0
  27 │         imagePullPolicy: IfNotPresent
  28 │         name: echo-server
  29 │         resizePolicy:
  30 │         - resourceName: cpu
  31 │           restartPolicy: NotRequired
  32 │         - resourceName: memory
  33 │           restartPolicy: NotRequired
  34 └         ports:
  ..   
────────────────────────────────────────



cpu-default-limitrange.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-default-limitrange.yaml:6-15
────────────────────────────────────────
   6 ┌   limits:
   7 │     - default:
   8 │         cpu: 500m
   9 │       defaultRequest:
  10 │         cpu: 500m
  11 │       max:
  12 │         cpu: 1
  13 │       min:
  14 │         cpu: 100m
  15 └       type: Container
────────────────────────────────────────



cpu-hog.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress' of Pod 'cpu-hog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress' of 'pod' 'cpu-hog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress' of Pod 'cpu-hog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-hog.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-hog.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress" of pod "cpu-hog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cpu-hog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-hog.yaml:4
────────────────────────────────────────
   4 [   name: cpu-hog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-hog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cpu-hog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-hog.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stress in pod cpu-hog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cpu-hog.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────



cpu-hog1.yaml (kubernetes)
==========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress' of Pod 'cpu-hog' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress' of 'pod' 'cpu-hog' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress' of Pod 'cpu-hog' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress' of Pod 'cpu-hog' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-hog1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-hog1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress" of pod "cpu-hog" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cpu-hog in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-hog1.yaml:4
────────────────────────────────────────
   4 [   name: cpu-hog
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-hog in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cpu-hog in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-hog1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stress in pod cpu-hog (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cpu-hog1.yaml:7-15
────────────────────────────────────────
   7 ┌     - name: stress
   8 │       image: polinux/stress
   9 │       resources:
  10 │         limits:
  11 │           cpu: "100"
  12 │         requests:
  13 │           cpu: "100"
  14 │       command: ["stress"]
  15 └       args: ["--cpu", "2"]
────────────────────────────────────────



cpu-limit.yaml (kubernetes)
===========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of Pod 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-limit.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 └       - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-limit.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 └       - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-limit.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp
   5 │   labels:
   6 └     name: myapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod myapp in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-limit.yaml:8-19
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 └       - containerPort: 80
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container myapp in pod myapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cpu-limit.yaml:9-19
────────────────────────────────────────
   9 ┌   - name: myapp
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     ports:
  16 │       - containerPort: 80
  17 └     args:
  ..   
────────────────────────────────────────



cpu-limit1.yaml (kubernetes)
============================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cpu-limit' of Pod 'cpu-limit' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cpu-limit' of Pod 'cpu-limit' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cpu-limit' of 'pod' 'cpu-limit' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cpu-limit' of Pod 'cpu-limit' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cpu-limit' of Pod 'cpu-limit' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cpu-limit' of Pod 'cpu-limit' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cpu-limit' of Pod 'cpu-limit' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cpu-limit' of Pod 'cpu-limit' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cpu-limit' of Pod 'cpu-limit' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cpu-limit' of Pod 'cpu-limit' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cpu-limit" of pod "cpu-limit" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod cpu-limit in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-limit1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: cpu-limit
   5 │   labels:
   6 └     name: cpu-limit
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-limit in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cpu-limit in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cpu-limit in pod cpu-limit (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cpu-limit1.yaml:9-17
────────────────────────────────────────
   9 ┌   - name: cpu-limit
  10 │     image: registry.cn-beijing.aliyuncs.com/qingfeng666/stress
  11 │     resources:
  12 │       limits:
  13 │         memory: "128Mi"
  14 │         cpu: "1"
  15 │     args:
  16 │       - -cpus
  17 └       - "2"
────────────────────────────────────────



cpu-load-app.yaml (kubernetes)
==============================
Tests: 117 (SUCCESSES: 100, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cpu-load-app' of Deployment 'cpu-load-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cpu-load-app' of Deployment 'cpu-load-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cpu-load-app' of 'deployment' 'cpu-load-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cpu-load-app' of Deployment 'cpu-load-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cpu-load-app' of Deployment 'cpu-load-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cpu-load-app' of Deployment 'cpu-load-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cpu-load-app' of Deployment 'cpu-load-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cpu-load-app' of Deployment 'cpu-load-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cpu-load-app' of Deployment 'cpu-load-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-load-app.yaml:6-24
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cpu-load-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cpu-load-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-load-app.yaml:6-24
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cpu-load-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cpu-load-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cpu-load-app" of deployment "cpu-load-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cpu-load-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-load-app.yaml:4
────────────────────────────────────────
   4 [   name: cpu-load-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-load-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-load-app.yaml:16-24
────────────────────────────────────────
  16 ┌       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cpu-load-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-load-app.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cpu-load-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 │         - containerPort: 8080
  20 │         resources:
  21 │           requests:
  22 │             cpu: 250m
  23 │           limits:
  24 └             cpu: 500m
────────────────────────────────────────



cpu-load-app_1.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-load-app_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cpu-load-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 8080
  12 └   type: LoadBalancer
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-load-app_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cpu-load-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 8080
  12 └   type: LoadBalancer
────────────────────────────────────────



cpu-load-deployment.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'cpu-load-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'cpu-load-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'cpu-load-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'cpu-load-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web' of Deployment 'cpu-load-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'cpu-load-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'cpu-load-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'cpu-load-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'cpu-load-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'cpu-load-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-load-deployment.yaml:6-25
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cpu-load-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cpu-load-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-load-deployment.yaml:6-25
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cpu-load-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cpu-load-app
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "cpu-load-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cpu-load-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-load-deployment.yaml:4
────────────────────────────────────────
   4 [   name: cpu-load-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-load-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cpu-load-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-load-deployment.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment cpu-load-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cpu-load-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       - name: web
  17 │         image: vish/stress
  18 │         resources:
  19 │           limits:
  20 │             cpu: "1"
  21 │           requests:
  22 │             cpu: "0.5"
  23 │         args:
  24 │         - -cpus
  25 └         - "1"
────────────────────────────────────────



cpu-load-hpa.yaml (kubernetes)
==============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-load-hpa.yaml:6-18
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: cpu-load-app
  10 │   minReplicas: 1
  11 │   maxReplicas: 10
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-load-hpa.yaml:6-18
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: cpu-load-app
  10 │   minReplicas: 1
  11 │   maxReplicas: 10
  12 │   metrics:
  13 │   - type: Resource
  14 └     resource:
  ..   
────────────────────────────────────────



cpu-load-service.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-load-service.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cpu-load-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 └     targetPort: 8080
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-load-service.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: cpu-load-app
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 └     targetPort: 8080
────────────────────────────────────────



cpu-ops.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress-ng-container' of Job 'medium-stress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress-ng-container' of 'job' 'medium-stress' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress-ng-container' of Job 'medium-stress' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress-ng-container' of Job 'medium-stress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-ops.yaml:6-29
────────────────────────────────────────
   6 ┌   completions: 15
   7 │   parallelism: 15
   8 │   completionMode: Indexed
   9 │   template:
  10 │     metadata:
  11 │       name: stress-ng-pod
  12 │       labels:
  13 │         job: medium-stress
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-ops.yaml:6-29
────────────────────────────────────────
   6 ┌   completions: 15
   7 │   parallelism: 15
   8 │   completionMode: Indexed
   9 │   template:
  10 │     metadata:
  11 │       name: stress-ng-pod
  12 │       labels:
  13 │         job: medium-stress
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress-ng-container" of job "medium-stress" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job medium-stress in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-ops.yaml:4
────────────────────────────────────────
   4 [   name: medium-stress
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container medium-stress in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-ops.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job medium-stress in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-ops.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --cpu-ops 80000  --metrics-brief
  21 │         resources:
  22 │           requests:
  23 └             cpu: "0.5" # Adjust CPU request as needed
  ..   
────────────────────────────────────────



cpu-quota.yaml (kubernetes)
===========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-quota.yaml:7-9
────────────────────────────────────────
   7 ┌   hard:
   8 │     requests.cpu: "200m"  
   9 └     limits.cpu: "300m"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-quota.yaml:8-9
────────────────────────────────────────
   8 ┌     requests.cpu: "200m"  
   9 └     limits.cpu: "300m"
────────────────────────────────────────



cpu-request-limit.yaml (kubernetes)
===================================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cpu-demo-ctr' of 'pod' 'cpu-demo' in 'cpu-example' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-request-limit.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-request-limit.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cpu-demo-ctr" of pod "cpu-demo" in "cpu-example" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-demo in cpu-example namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-request-limit.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cpu-demo in cpu-example namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-request-limit.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 └     args:
  ..   
────────────────────────────────────────



cpu-request-limit1.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 101, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cpu-demo-ctr' of 'pod' 'cpu-demo' in 'cpu-example' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cpu-demo-ctr' of Pod 'cpu-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-request-limit1.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-request-limit1.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 └     args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cpu-demo-ctr" of pod "cpu-demo" in "cpu-example" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-demo in cpu-example namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-request-limit1.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 │     args:
  16 │     - -cpus
  17 └     - "2"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod cpu-demo in cpu-example namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-request-limit1.yaml:7-17
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: cpu-demo-ctr
   9 │     image: nginx:stable
  10 │     resources:
  11 │       limits:
  12 │         cpu: "100"
  13 │       requests:
  14 │         cpu: "100"
  15 └     args:
  ..   
────────────────────────────────────────



cpu-test-load.yaml (kubernetes)
===============================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cpu-load-container' of Deployment 'cpu-load-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cpu-load-container' of 'deployment' 'cpu-load-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'cpu-load-container' of Deployment 'cpu-load-test' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cpu-load-container' of Deployment 'cpu-load-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpu-test-load.yaml:6-18
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cpu-load-test
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cpu-load-test
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpu-test-load.yaml:6-18
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: cpu-load-test
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: cpu-load-test
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cpu-load-container" of deployment "cpu-load-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cpu-load-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpu-test-load.yaml:4
────────────────────────────────────────
   4 [   name: cpu-load-test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpu-load-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-test-load.yaml:16-18
────────────────────────────────────────
  16 ┌       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cpu-load-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpu-test-load.yaml:15-18
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: cpu-load-container
  17 │         image: busybox
  18 └         command: ["/bin/sh", "-c", "while true; do :; done"]
────────────────────────────────────────



cpudefault.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpudefault.yaml:6-11
────────────────────────────────────────
   6 ┌   limits:
   7 │   - default:
   8 │       cpu: 1
   9 │     defaultRequest:
  10 │       cpu: 0.5
  11 └     type: Container
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpudefault.yaml:6-11
────────────────────────────────────────
   6 ┌   limits:
   7 │   - default:
   8 │       cpu: 1
   9 │     defaultRequest:
  10 │       cpu: 0.5
  11 └     type: Container
────────────────────────────────────────



cpuload-deploy.yaml (kubernetes)
================================
Tests: 117 (SUCCESSES: 96, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 13, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'usecpu' of Deployment 'cpuload' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'usecpu' of Deployment 'cpuload' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'usecpu' of 'deployment' 'cpuload' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'usecpu' of Deployment 'cpuload' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'usecpu' of Deployment 'cpuload' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'usecpu' of Deployment 'cpuload' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'usecpu' of Deployment 'cpuload' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'usecpu' of Deployment 'cpuload' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'usecpu' of Deployment 'cpuload' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'usecpu' of Deployment 'cpuload' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'usecpu' of Deployment 'cpuload' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'usecpu' of Deployment 'cpuload' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpuload-deploy.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: thispod
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: thispod
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpuload-deploy.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 3
   7 │   selector:
   8 │     matchLabels:
   9 │       app: thispod
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: thispod
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "usecpu" of deployment "cpuload" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment cpuload in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpuload-deploy.yaml:4
────────────────────────────────────────
   4 [   name: cpuload
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cpuload in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cpuload in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpuload-deploy.yaml:15-20
────────────────────────────────────────
  15 ┌       nodeName: work1
  16 │       containers:
  17 │       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container usecpu in deployment cpuload (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 cpuload-deploy.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: usecpu
  18 │         image: atcomp/perfload
  19 │         command:
  20 └         - usecpu
────────────────────────────────────────



cpupod.yaml (kubernetes)
========================
Tests: 117 (SUCCESSES: 97, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 13, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'default-cpu-demo-ctr' of 'pod' 'default-cpu-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'default-cpu-demo-ctr' of Pod 'default-cpu-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpupod.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpupod.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "default-cpu-demo-ctr" of pod "default-cpu-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod default-cpu-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpupod.yaml:4
────────────────────────────────────────
   4 [   name: default-cpu-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-cpu-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpupod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod default-cpu-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpupod.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-ctr
   8 └     image: nginx
────────────────────────────────────────



cpupod2.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'default-cpu-demo-2-ctr' of 'pod' 'default-cpu-demo-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'default-cpu-demo-2-ctr' of Pod 'default-cpu-demo-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpupod2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpupod2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "default-cpu-demo-2-ctr" of pod "default-cpu-demo-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod default-cpu-demo-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpupod2.yaml:4
────────────────────────────────────────
   4 [   name: default-cpu-demo-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-cpu-demo-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpupod2.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod default-cpu-demo-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpupod2.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-2-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       limits:
  11 └         cpu: "1"
────────────────────────────────────────



cpupod3.yaml (kubernetes)
=========================
Tests: 117 (SUCCESSES: 98, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'default-cpu-demo-3-ctr' of 'pod' 'default-cpu-demo-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'default-cpu-demo-3-ctr' of Pod 'default-cpu-demo-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 cpupod3.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 cpupod3.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "default-cpu-demo-3-ctr" of pod "default-cpu-demo-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod default-cpu-demo-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 cpupod3.yaml:4
────────────────────────────────────────
   4 [   name: default-cpu-demo-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container default-cpu-demo-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpupod3.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod default-cpu-demo-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 cpupod3.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: default-cpu-demo-3-ctr
   8 │     image: nginx
   9 │     resources:
  10 │       requests:
  11 └         cpu: "0.75"
────────────────────────────────────────



cr-bad.yaml (kubernetes)
========================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 cr-bad.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes/proxy
  10 │   - namespaces
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



cr-bad10.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 cr-bad10.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes/proxy
  10 │   - namespaces
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



cr-bad10_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 cr-bad10_1.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - nodes/proxy
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



cr-bad12.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad12.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - secrets
  11 │   - pods
  12 │   verbs:
  13 │   - get
  14 └   - create
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr01' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad12.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - secrets
  11 │   - pods
  12 │   verbs:
  13 │   - get
  14 └   - create
────────────────────────────────────────



cr-bad12_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad12_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr02' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad12_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────



cr-bad12_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr03' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad12_2.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - update
  12 │   - list
  13 └   - create
────────────────────────────────────────



cr-bad13.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'badcr01' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cr-bad13.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - '*'
  11 │   - pods
  12 │   verbs:
  13 │   - get
  14 └   - create
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr01' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad13.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - '*'
  11 │   - pods
  12 │   verbs:
  13 │   - get
  14 └   - create
────────────────────────────────────────



cr-bad13_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad13_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'badcr02' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cr-bad13_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - apps
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr02' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad13_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────



cr-bad13_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'badcr03' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cr-bad13_2.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 │   - update
  12 │   - list
  13 └   - create
────────────────────────────────────────



cr-bad14.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cr-bad14.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - pods
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr01' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad14.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - pods
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



cr-bad14_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad14_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'badcr02' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 cr-bad14_1.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - apps
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - '*'
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr02' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad14_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────



cr-bad14_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 cr-bad14_2.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   verbs:
  11 │   - update
  12 │   - '*'
  13 └   - create
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr03' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad14_2.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   verbs:
  11 │   - update
  12 │   - '*'
  13 └   - create
────────────────────────────────────────



cr-bad15.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 cr-bad15.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - nodes/proxy
  10 │   - namespaces
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



cr-bad15_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 cr-bad15_1.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - nodes/proxy
  11 │   verbs:
  12 │   - get
  13 │   - watch
  14 └   - list
────────────────────────────────────────



cr-bad17.yaml (kubernetes)
==========================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr01' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad17.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - secrets
  11 │   - pods
  12 │   verbs:
  13 │   - get
  14 └   - create
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr01' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad17.yaml:6-14
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - namespaces
  10 │   - secrets
  11 │   - pods
  12 │   verbs:
  13 │   - get
  14 └   - create
────────────────────────────────────────



cr-bad17_1.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 114, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr02' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad17_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'badcr02' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 cr-bad17_1.yaml:14-23
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - namespaces
  18 │   - secrets
  19 │   - pods
  20 │   verbs:
  21 │   - create
  22 │   - watch
  23 └   - list
────────────────────────────────────────



cr-bad17_2.yaml (kubernetes)
============================
Tests: 116 (SUCCESSES: 115, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'badcr03' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 cr-bad17_2.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - update
  12 │   - list
  13 └   - create
────────────────────────────────────────


