
Report Summary

┌───────────────────────────────────────────┬────────────┬───────────────────┐
│                  Target                   │    Type    │ Misconfigurations │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress.fuller-nginx.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress.minimal-gke.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress.minimal-nginx.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress1377.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress1438.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress1496.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress1499.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress1501.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv66.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv67.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv68.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv69.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv7.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv70.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv71.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv72.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv73.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv74.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv75.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv76.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv77.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv78.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv79.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv8.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv80.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv81.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv82.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv82_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv83.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv84.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv85.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv86.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv87.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv88.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv89.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv9.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv90.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv91.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv92.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv93.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv94.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv95.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-srv95_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl-template.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl-template1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl-template2.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl-template3.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ssl4.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-staging.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-status.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-status1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-sticky2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-sticky2_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-sticky2_2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-subdomains.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-subpath.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-svc-patch-dr1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-svc-patch-prod.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-svc.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-svc1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-svc2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-template.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls-auth.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls-canary.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls-cookie.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls-prod.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls-request-limit.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls-staging.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls-upstream-hashing.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls4.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls4_1.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls4_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-tls5.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-certResolver2.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-certResolver2_1.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-certResolver2_2.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-https2.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-https2_1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-https2_2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums.yaml    │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums1.yaml   │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums1_1.yaml │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums1_2.yaml │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums1_3.yaml │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums_1.yaml  │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums_2.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-linux-albums_3.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-namespace.yaml       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik-test-namespace1.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik2_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik2_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik2_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik3.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik3_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-traefik5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ui.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-ui1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad1_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad2_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad3.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad3_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad4.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad4_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-bad_1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good1_1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good2.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good2_1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good3.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good3_1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good4.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good4_1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-updates-good_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v12.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v13.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v15.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v2-canary.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v2-canary1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v2-canary2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v2-canary3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v2.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v22.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v23.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-v25.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-vault1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-vault1_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-vault1_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wear-watch-different-host.yaml    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wear-watch-domain.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wear-watch.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wear-watch1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wear1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-web1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-web3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with domain.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-auth.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-cache2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-cache3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-ip.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-rewrite-target.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-rewrite-target1.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-rule.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-rule1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-rules.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-tls.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-tls1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-tls2.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-tls3.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-with-tls4.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-without-tls.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-without-tls1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wordpress-pre.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wordpress.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-wp.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-www.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-www1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-www2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-www3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-zeppelin.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-zitadel.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.argocd.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.argocd1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.deployment.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.gitlab.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rbac.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rbac1.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rbac1_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rbac2.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rbac2_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rbac_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rule1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.rule2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.willapp.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.willapp1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress.yaml.verified.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress10.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress100.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1002.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1003.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1004.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1005.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1006.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1007.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1008.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1008_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1008_2.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress101.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1010.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1014.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1015.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1015_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1017.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1019.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress102.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1021.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1024.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1025.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1027.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1030.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1031.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1032.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1033.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1037.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1038.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1039.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress104.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1040.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1041.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1043.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress105.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1060.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1062.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1063.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1068.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1069.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1070.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1071.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1072.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1073.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1074.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1075.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1076.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1077.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1078.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress108.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1082.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1083.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1084.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1085.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress109.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1093.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1094.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1095.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1096.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1096_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1097.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1097_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1098.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1098_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1098_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1099.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress109_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress10_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress10_2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress11.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1100.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1101.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1102.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1109.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress111.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1110.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1112.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1118.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress112.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1123.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1124.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1125.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1126.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1127.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1128.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1131.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1132.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1133.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1134.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1135.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1136.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1138.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress114.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1140.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1141.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1144.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1144_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1145.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1145_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1146.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1146_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1146_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1147.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1148.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1149.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress115.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1150.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1151.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1156.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1157.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1158.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1158_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1159.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1165.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1165_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1165_3.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1168.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1169.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1171.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1172.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1173.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1174.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1176.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1177.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1178.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress118.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1180.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1181.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1182.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1182_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1182_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1183.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1183_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1184.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1184_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1185.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1185_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1185_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1186.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1186_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1187.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1187_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1188.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1188_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1188_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1189.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1189_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress119.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1190.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1190_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1191.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1191_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1191_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1192.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1193.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1194.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1195.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress11_1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress11_2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress12.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress120.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1200.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1207_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1211.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1237.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1238.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1240.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1241.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1245.yaml                          │ kubernetes │         1         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1256.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1257.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1258.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1259.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1271.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1272.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1273.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1274.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1275.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1276.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1277.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1277_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1278.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1278_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1278_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1279.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1280.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1289.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1291.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1294.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1295.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1296.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1297.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1298.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress13.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1302.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1311.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1311_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1312.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1314.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1316.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1317.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1319.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1320.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1321.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1322.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1324.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1325.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1327.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1328.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1329.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1331.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1332.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1333.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1334.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1335.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1336.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1337.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress134.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1341.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1342.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1344.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1345.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1346.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress135.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1351.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1352.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1353.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1354.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1355.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1357.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1358.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1359.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1360.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1362.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1363.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1364.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1365.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1366.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1367.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1368.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1369.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress137.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1370.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1371.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1373.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1376.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1378.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1379.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress138.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1380.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1381.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1382.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1383.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1384.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1385.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1386.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1387.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1388.yaml                          │ kubernetes │        17         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1390.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1391.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1393.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1395.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1396.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1397.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1398.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1399.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress14.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1400.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1401.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1402.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1403.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1404.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1405.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1406.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1407.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1408.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1409.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1410.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1411.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1412.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1413.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1414.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1416.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1417.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1418.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1419.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1419_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1419_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1420.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1423.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1424.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1425.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1426.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1428.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1429.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1430.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1432.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1433.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1434.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1435.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1436.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress144.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1441.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1442.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1443.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1444.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1445.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1446.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1447.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1448.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1449.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress145.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1450.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1451.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1452.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1453.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1454.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1455.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1456.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1457.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1458.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1459.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress146.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1460.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1461.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1462.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1463.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1464.yaml                          │ kubernetes │        10         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1464_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1465.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1466.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1467.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1468.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1469.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1470.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1471.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1472.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1473.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1474.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1475.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1476.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1476_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1477.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1478.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1479.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress148.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1482.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1483.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1484.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1492.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1493.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress15.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1500.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1502.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1503.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1504.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1508.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1513.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1521.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1522.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1540.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1543.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1550.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1551.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1552.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1553.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1554.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1555.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1556.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1564.yaml                          │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1564_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1564_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1564_3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1564_4.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1565.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1567.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1576.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1577.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1578.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1579.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1580.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1581.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1582.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1583.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1584.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1585.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1586.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1587.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1588.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1589.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1590.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1591.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1592.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1593.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1594.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1595.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1598.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress16.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1600.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1602_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1603.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1604.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1605.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1606.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1607.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1608.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress161.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1611.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1612.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1613.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress162.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1625.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1626.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1628.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1629.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress163.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1630.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1632.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1633.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress164.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1642.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1643.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1644.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1645.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1647.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1648.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1649.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress165.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1650.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1652.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1653.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1654.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1655.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1655_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1656.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1657.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1658.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1659.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress166.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1660.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1661.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1662.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1668.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1669.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress167.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1670.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1671.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1676.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1677.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1678.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1679.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress168.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1680.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1681.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1682.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1683.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1686.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1688.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress169.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1690.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress169_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress17.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress170.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1701.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1703.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress170_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress171.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1710.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1711.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1713.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1714.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1715.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1715_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1717.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress172.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1720.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1721.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1722.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1723.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1724.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1726.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1727.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1728.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1729.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress173.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1730.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1731.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1732.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1735.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1736.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress174.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1740.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1741.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1742.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1743.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1744.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1745.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1746.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1747.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1748.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1749.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1750.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1751.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1755.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1756.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1757.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1758.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1759.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1760.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1761.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1762.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1763.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1763_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1763_2.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1765.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1766.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1768.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1769.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress177.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1770.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1770_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1770_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1779.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1781.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1783.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1785.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1786.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1787.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress18.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress180.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1802.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1805.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1806.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1806_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress181.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1810.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1811.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1814.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1818.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress181_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress182.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1820.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1821.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1826.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1828.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1828_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1832.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1834.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1835.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1837.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1839.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress184.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1840.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1841.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1842.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1843.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1846.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1848.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1849.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress185.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1857.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1858.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress186.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1860.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1861.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1862.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1863.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1865.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1866.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1868.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1869.yaml                          │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1869_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1869_2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1869_3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1869_4.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1870.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1871.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1872.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1873.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1875.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1875_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1879.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1880.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1884.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1885.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1886.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1887.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1888.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1889.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress189.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1890.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1891.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1892.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1893.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1894.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1895.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1896.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1896_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1897.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1898.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress19.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1905.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1906.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1910.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1911.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1912.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1912_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1912_10.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1912_11.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1912_12.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress1912_13.yaml                       │ kubernetes │         0         │
└───────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


ingress-tls4_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Deployment 'mydep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Deployment 'mydep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'deployment' 'mydep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Deployment 'mydep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Deployment 'mydep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Deployment 'mydep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'mydep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'mydep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "mydep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-tls4_1.yaml:4
────────────────────────────────────────
   4 [   name: mydep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-tls4_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-tls4_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────



ingress-traefik-test-linux-albums.yaml (kubernetes)
===================================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'albums-linux1' of 'deployment' 'albums-linux1' in 'ingress-traefik-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "albums-linux1" of deployment "albums-linux1" in "ingress-traefik-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment albums-linux1 in ingress-traefik-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container albums-linux1 in ingress-traefik-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment albums-linux1 in ingress-traefik-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 └         - name: RESOURCE
  ..   
────────────────────────────────────────



ingress-traefik-test-linux-albums1.yaml (kubernetes)
====================================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'albums-linux1' of 'deployment' 'albums-linux1' in 'ingress-traefik-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'albums-linux1' of Deployment 'albums-linux1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "albums-linux1" of deployment "albums-linux1" in "ingress-traefik-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment albums-linux1 in ingress-traefik-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container albums-linux1 in ingress-traefik-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment albums-linux1 in ingress-traefik-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: albums-linux1
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 └         - name: RESOURCE
  ..   
────────────────────────────────────────



ingress-traefik-test-linux-albums1_1.yaml (kubernetes)
======================================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'albums-linux2' of 'deployment' 'albums-linux2' in 'ingress-traefik-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "albums-linux2" of deployment "albums-linux2" in "ingress-traefik-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment albums-linux2 in ingress-traefik-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container albums-linux2 in ingress-traefik-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment albums-linux2 in ingress-traefik-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums1_1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 └         - name: RESOURCE
  ..   
────────────────────────────────────────



ingress-traefik-test-linux-albums_1.yaml (kubernetes)
=====================================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'albums-linux2' of 'deployment' 'albums-linux2' in 'ingress-traefik-test' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'albums-linux2' of Deployment 'albums-linux2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "albums-linux2" of deployment "albums-linux2" in "ingress-traefik-test" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment albums-linux2 in ingress-traefik-test namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container albums-linux2 in ingress-traefik-test namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 │         - name: RESOURCE
  25 └           value: albums-linux2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment albums-linux2 in ingress-traefik-test namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-traefik-test-linux-albums_1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: albums-linux2
  18 │         image: shsk2s.azurecr.io/example.albums-golang-linux:v1.0.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         env:
  22 │         - name: PORT
  23 │           value: '80'
  24 └         - name: RESOURCE
  ..   
────────────────────────────────────────



ingress-traefik3.yaml (kubernetes)
==================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Ingress 'traefik-dashboard' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress-traefik3.yaml:9-20
────────────────────────────────────────
   9 ┌   ingressClassName: traefik
  10 │   rules:
  11 │   - host: traefik.dsliz.info
  12 │     http:
  13 │       paths:
  14 │       - path: /
  15 │         pathType: Prefix
  16 │         backend:
  17 └           service:
  ..   
────────────────────────────────────────



ingress.rbac.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'traefik-ingress-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress.rbac.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - services
  10 │   - endpoints
  11 │   - secrets
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



ingress.rbac1.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'traefik-ingress-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress.rbac1.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - services
  10 │   - endpoints
  11 │   - secrets
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



ingress.rbac2.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'traefik-ingress-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress.rbac2.yaml:6-15
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - services
  10 │   - endpoints
  11 │   - secrets
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
────────────────────────────────────────



ingress1008_2.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gettingstarted' of Deployment 'my-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gettingstarted' of Deployment 'my-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gettingstarted' of 'deployment' 'my-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gettingstarted' of Deployment 'my-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gettingstarted' of Deployment 'my-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gettingstarted' of Deployment 'my-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gettingstarted' of Deployment 'my-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gettingstarted' of Deployment 'my-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gettingstarted' of Deployment 'my-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gettingstarted' of Deployment 'my-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gettingstarted' of Deployment 'my-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gettingstarted' of Deployment 'my-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gettingstarted" of deployment "my-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1008_2.yaml:4
────────────────────────────────────────
   4 [   name: my-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1008_2.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gettingstarted in deployment my-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress1008_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: gettingstarted
  17 │         image: bjgomes/gettingstarted
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────



ingress1165_3.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1165_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1165_3.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1165_3.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



ingress1245.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Ingress 'ingress-skooner' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress1245.yaml:7-18
────────────────────────────────────────
   7 ┌   ingressClassName: nginx
   8 │   rules:
   9 │   - host: skooner.tactile.com
  10 │     http:
  11 │       paths:
  12 │       - pathType: Prefix
  13 │         path: /
  14 │         backend:
  15 └           service:
  ..   
────────────────────────────────────────



ingress1388.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'k8s-deployment' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "k8s-deployment" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in k8s-deployment namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in k8s-deployment namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1388.yaml:17-20
────────────────────────────────────────
  17 ┌         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in k8s-deployment namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1388.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: nginx
  18 │           image: nginx:1.14.2
  19 │           ports:
  20 └             - containerPort: 80
────────────────────────────────────────



ingress1419_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Deployment 'mydep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Deployment 'mydep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'deployment' 'mydep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Deployment 'mydep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Deployment 'mydep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Deployment 'mydep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Deployment 'mydep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Deployment 'mydep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Deployment 'mydep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of deployment "mydep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1419_1.yaml:4
────────────────────────────────────────
   4 [   name: mydep
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydep in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1419_1.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1419_1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx:latest
  17 │         name: main
  18 │         ports:
  19 │         - containerPort: 80
  20 └           protocol: TCP
────────────────────────────────────────



ingress1464.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 102, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0009 (HIGH): Deployment 'ingress-nginx-controller' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 ingress1464.yaml:13-133
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   strategy:
  21 └     rollingUpdate:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1464.yaml:50-130
────────────────────────────────────────
  50 ┌       - args:
  51 │         - /nginx-ingress-controller
  52 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  53 │         - --election-id=ingress-nginx-leader
  54 │         - --controller-class=k8s.io/ingress-nginx
  55 │         - --ingress-class=nginx
  56 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  57 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  58 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1464.yaml:50-130
────────────────────────────────────────
  50 ┌       - args:
  51 │         - /nginx-ingress-controller
  52 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  53 │         - --election-id=ingress-nginx-leader
  54 │         - --controller-class=k8s.io/ingress-nginx
  55 │         - --ingress-class=nginx
  56 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  57 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  58 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1464.yaml:50-130
────────────────────────────────────────
  50 ┌       - args:
  51 │         - /nginx-ingress-controller
  52 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  53 │         - --election-id=ingress-nginx-leader
  54 │         - --controller-class=k8s.io/ingress-nginx
  55 │         - --ingress-class=nginx
  56 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  57 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  58 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1464.yaml:50-130
────────────────────────────────────────
  50 ┌       - args:
  51 │         - /nginx-ingress-controller
  52 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  53 │         - --election-id=ingress-nginx-leader
  54 │         - --controller-class=k8s.io/ingress-nginx
  55 │         - --ingress-class=nginx
  56 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  57 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  58 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1464.yaml:50-130
────────────────────────────────────────
  50 ┌       - args:
  51 │         - /nginx-ingress-controller
  52 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  53 │         - --election-id=ingress-nginx-leader
  54 │         - --controller-class=k8s.io/ingress-nginx
  55 │         - --ingress-class=nginx
  56 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  57 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  58 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress1464.yaml:50-130
────────────────────────────────────────
  50 ┌       - args:
  51 │         - /nginx-ingress-controller
  52 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  53 │         - --election-id=ingress-nginx-leader
  54 │         - --controller-class=k8s.io/ingress-nginx
  55 │         - --ingress-class=nginx
  56 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  57 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  58 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1464.yaml:33-133
────────────────────────────────────────
  33 ┌       hostNetwork: true
  34 │       nodeSelector:
  35 │         kubernetes.io/hostname: server-master
  36 │       affinity:
  37 │         nodeAffinity:
  38 │           requiredDuringSchedulingIgnoredDuringExecution:
  39 │             nodeSelectorTerms:
  40 │             - matchExpressions:
  41 └               - key: role
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress1464.yaml:50-130
────────────────────────────────────────
  50 ┌       - args:
  51 │         - /nginx-ingress-controller
  52 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  53 │         - --election-id=ingress-nginx-leader
  54 │         - --controller-class=k8s.io/ingress-nginx
  55 │         - --ingress-class=nginx
  56 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  57 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  58 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────



ingress1564.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'home-app' of Pod 'home-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'home-app' of Pod 'home-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'home-app' of 'pod' 'home-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'home-app' of Pod 'home-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'home-app' of Pod 'home-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'home-app' of Pod 'home-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'home-app' of Pod 'home-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'home-app' of Pod 'home-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "home-app" of pod "home-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod home-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1564.yaml:4-6
────────────────────────────────────────
   4 ┌   name: home-app
   5 │   labels:
   6 └     app: home-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod home-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container home-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1564.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod home-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1564.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



ingress1564_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'laptop-app' of Pod 'laptop-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'laptop-app' of 'pod' 'laptop-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'laptop-app' of Pod 'laptop-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "laptop-app" of pod "laptop-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod laptop-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1564_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: laptop-app
   5 │   labels:
   6 └     app: laptop-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod laptop-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container laptop-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1564_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod laptop-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1564_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



ingress1763_2.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'example-ingress-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'example-ingress-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'example-ingress-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'example-ingress-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "example-ingress-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment example-ingress-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1763_2.yaml:4
────────────────────────────────────────
   4 [   name: example-ingress-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment example-ingress-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container example-ingress-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1763_2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment example-ingress-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1763_2.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



ingress1869.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'home-app' of Pod 'home-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'home-app' of Pod 'home-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'home-app' of 'pod' 'home-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'home-app' of Pod 'home-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'home-app' of Pod 'home-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'home-app' of Pod 'home-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'home-app' of Pod 'home-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'home-app' of Pod 'home-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'home-app' of Pod 'home-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "home-app" of pod "home-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod home-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1869.yaml:4-6
────────────────────────────────────────
   4 ┌   name: home-app
   5 │   labels:
   6 └     app: home-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod home-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container home-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1869.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod home-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1869.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: home-app
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



ingress1869_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'laptop-app' of Pod 'laptop-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'laptop-app' of 'pod' 'laptop-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'laptop-app' of Pod 'laptop-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'laptop-app' of Pod 'laptop-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "laptop-app" of pod "laptop-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod laptop-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress1869_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: laptop-app
   5 │   labels:
   6 └     app: laptop-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod laptop-app in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container laptop-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1869_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod laptop-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress1869_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: laptop-app
  10 │     image: httpd
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


